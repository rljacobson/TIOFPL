66
Chapter 4 Structured Types and the Semantics of Pattern-matching
Finn of the University of Stirling). To simplify the rest of this chapter we will
therefore side-step these complications, by restricting our attention to a
subset of Miranda which does not allow repeated variables in a pattern. We
lose no expressive power thereby, though we do lose some notational
convenience.
4.2.8 Where-clauses
Miranda allows the right-hand side of a definition to be qualified with a
where-clause. For example,
sumsq x y = xsq + ysq
where
xsq = x*x
ysq = y*y
It is intuitively clear that this could be translated to
sumsq = Ax. Ay . (let xsq = * x x
ysq = * y y
in
(+ xsq ysq))
where we use a let-expression instead of a where-clause. In general, the
definitions in a where-clause may be mutually recursive, so we have to use a
letrec-expression instead. This will be optimized in Section 6.2.8.
Finally, the scope of a where-clause may include a set of alternatives and
guards in a conditional equation:
gcd a b = god diff b,
a>b
= gcd a (-diff),
a<b
=
a=b
where
diff = a-b
TRI[ ths ] translates the right-hand side of a definition
TR
A1, G1
letrec TD[[ D. ]]
=
. . .
= An, Gn
TD[ Dm ]
where
in
D1
(IF TE[ G1 ] TEI A1 ]
Dm
(IF TE[ Gn ] TE[ An ] FAIL) .. .)
If Gn is absent, or True, then the final IF-expression
should be replaced by TE[ An ]
where A; is an expression
Gi is a boolean-valued expression
Di is a definition
Figure 4.2 The final TR translation scheme
