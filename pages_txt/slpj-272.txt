272
Chapter 16 SK Combinators
Now there is only a linear build-up of combinators as we perform successive
abstractions. This key optimization renders the whole system practicable.
16.2.5 The B' and C' Combinators
Sometimes the variable being abstracted will only be used in por q, so we need
companion combinators B' and C', with reduction rules
B' cfgx -> cf (g x)
C' cfgx - c (f x) g
each of which is like its undashed counterpart, except that it 'reaches over'
one extra argument. We also need the corresponding optimization rules
B (c f) g
B' cfg
C (B cf) g
C'cfg
We can, as usual, show the correctness of these rules by showing that the two
sides are extensionally equal, which follows directly from the definitions of
the combinators.
The optimization rule for B' is slightly surprising, since it does not look
quite like the optimization rules for S' and C'. Furthermore, the 'optimized'
version requires no fewer reductions to evaluate than the 'unoptimized'
version, and worse still, experiments show that this B' optimization actually
degrades performance!
This seems to have something to do with the B' optimization rule. We gain
nothing when introducting a B', because the sizes of the two graphs are the
same, and we actually lose an opportunity for optimization at an outer level,
because we destroy a (B c f) pattern that might be useful in building an S' or
C'. For example, the expression
C (B (c f) g) h
will become
C (B' c f g) h
if the B' optimization is used, but will become
C' (c f) gh
if not. A different combinator, B*, has been suggested by Mark Sheevel of
Burroughs Corp. It has the reduction rule
B* cfgx -> c (f (g x))
and optimization rule
B c (Bfg) => B* cfg
This rule looks more like the optimization rules for S' and C', and experi-
ments show that this B* does indeed give a performance improvement. This
