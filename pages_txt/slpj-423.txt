Section 24.6 What is a task?
425
state of a task would now be represented by two pointers, the forward and
backward pointers. Then when a suspended task is resumed, the forward and
interest.
backward pointers are already pointing to the area of the graph which is of
We have previously understood that pointer-reversal has a hidden cost,
because the pointers have to be re-reversed when rewinding the spine (i.e.
popping nodes from the stack). But even this is no longer necessarily true,
since we have to mark vertebrae as being in WHNF as we pop them, and in a
parallel machine there will probably be little extra cost to re-reverse the
pointers as well. So pointer-reversal may save repeatedly unwinding the spine
each time a task is blocked, and costs very little.
24.6.2 Using a Stack
During the development of the G-machine it became clear that the careful use
of the stack was crucial to a fast implementation of graph reduction. Does the
stack not then form part of the task state? Is it indeed possible to use a
stack-based implementation like the G-machine for a parallel machine?
We recall that the entire G-machine development was simply a sequence of
optimizations to ordinary graph reduction. In effect, part of the state of the
computation is held in the stack for efficiency reasons, but we should be able
to stop execution at any point, and (using information in the stack) fix up the
graph to represent the current state of affairs. If this sounds like a lot of work,
remember that straightforward graph reduction effectively involves flushing
the current state out into the graph at every reduction step, while a parallel
G-machine would, in effect, keep part of the state of the graph in the stack
over a sequence of reduction steps.
There is no reason why this approach should not be combined with the
pointer-reversing idea. They can be used either individually or together.
24.6.3 Reawakening Blocked Tasks
So far we have not discussed what happens to a task when it is blocked. There
are two main alternatives:
(i) We could simply return it to the pool of tasks awaiting execution. In due
course an unemployed agent looking for work will resume execution of
the task. It will very soon encounter the node that blocked it before. If
this node is still marked, the task is blocked again, and is returned to the
pool of tasks, otherwise it can continue to execute normally.
(ii) We could somehow suspend the task, so that it is not considered for
execution by unemployed agents, and reawaken it when the node which
blocked has its mark removed. Reawakening it would consist of putting
it in the pool of tasks awaiting execution.
