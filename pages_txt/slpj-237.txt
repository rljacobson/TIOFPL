Section 14.5 An example
237
in a slightly odd style in order to demonstrate various aspects of the algorithm:
sumints m = sum (count 1)
where
count n = [],
n>m
sum []
= n : count (n+1)
=
0
sum (n:ns) = n + sum ns
sumints 100
Translating this into the enriched lambda calculus gives
letrec
sumInts
= Am . letrec
count = An. IF (> n m)
NIL
in
(CONS n (count (+ n 1)))
sum (count 1)
in
sum = Ans. IF (= ns NIL) 0 (+ (HEAD ns) (sum (TAIL ns)))
sumInts 100
( Note: this is not exactly the translation that will be produced by the pattern-
matching compiler described in Chapter 5, but it is a correct translation, and
will suffice for present purposes.) The variables sumints and sum are defined at
level 0, but sumints has an inner lambda abstraction. This An abstraction has
the free variables m and count. We lift them out to generate a super-
combinator, which we arbitrarily name $count, thus
$count count m n = IF (> n m) NIL (CONS n (count (+ n 1)))
letrec
sumints
= \m . letrec
count = $count count m
in
sum (count 1)
in
sum = Ans . IF (= ns NIL) 0 (+ (HEAD ns) (sum (TAIL ns)))
sumints 100
