Section 11.5 How to find the next top-level redex
201
11.5 How to Find the Next Top-level Redex
Having decided to implement normal order reduction of top-level redexes
only, we must ask how to find the appropriate redex given a graph to reduce.
Our expression can only be of the form
f E1 E2 . .. En
whose graph looks like this:
En
Here, f is a data object, a built-in function or a lambda abstraction (but not an
application or we would have drawn another level in the picture), and there
may be zero or more arguments (E;), which are arbitrarily complicated
expressions. There are now various possibilities:
(i) f may be a data object such as a number or a CONS cell, in which case the
expression is in weak head normal form and we are done. However, in
this case n should be 0; if not, the data object is being applied to an
argument. This corresponds to a type error in the original program, such
as using a number as a function, and will never occur if the program has
been type-checked.
(ii) f may be a built-in function taking, say, k arguments. In this case we must
check to see whether there are enough arguments available (i.e. n = k);
if so, (f E1 ... Ek) is the outermost redex which normal order will select.
For example, in Figure 11.1(a) the redex is (IF E1 E2 E3) and the $
marks the root of this subgraph.
If there are too few arguments (n < k) then the expression is in weak
head normal form.
(iii) f may be a lambda abstraction. If it has an argument available (n 2 1) the
redex we should reduce next is (f E1). For example, in Figure 11.1(b) the
redex is ((\x. body) E1), and the $ marks this application node.
normal form.
If there are no arguments (n = 0) then the expression is in weak head
According to our abstract expression syntax there is one other possibility
for f: it could be a variable name. However, in this case the variable must occur
free in the entire expression, so we may justifiably give an error.
