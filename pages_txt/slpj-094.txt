Section 5.3 The Miranda pattern-matching compiler
93
definition:
Incidentally, the following definition of tack is not equivalent to the above
tack x (xs:xss) = (x : xs) : xss
The difference between the two is closely related to the question of strict and
function firsts.
lazy pattern-matching, mentioned in Section 4.3.5 in connection with the
The pattern-matching compiler also uses the standard function foldr. The
function foldr is defined so that
foldr f a [x1, X2, . . ., Xn] = f x1 (f x2 ( . . . (f xn a). . .))
For example, (foldr (+) 0 xs) returns the sum of the list of numbers xs. The
function foldr is defined by:
foldr
foldr f a []
:: (* -> * * -> * *) -> * * -> [* ] -> * *
= a
foldr f a (x:xs) = f x (foldr f a xs)
5.3.6 The Function match
We are now ready to define the function match. Calls of match have the form
(match k us qs def). Here, as in Section 5.2, us represents a list of variables,
qs represents a list of equations and def is a default expression. The argument
k is added to help in generating new variable names; it should be chosen so
that for every i>k, (makeVar i) is a new variable not in us, qs or def.
would be:
For example, the initial call to match to compile the definitions of mappairs
match 3
["_u1", "_u2", "_u3"]
[ ( [VAR "f", CON "NIL" [],
VAR "ys"
J. E1 ),
( [VAR "f", CON "CONS" [VAR "x", VAR "xs"],
CON "NIL" [] ], E2 ),
( [VAR "f", CON "CONS" [VAR "x", VAR "xs"],
error
CON "CONS" [VAR "y", VAR "ys"] ], E3 ) ]
where E1, E2 and Es represent the three expressions on the right-hand sides of
the equation, and error represents the expression ERROR.
The definition of match can now be derived in a fairly straightforward way
from the description given in Section 5.2. The type of match is:
match :: num -> [variable] -> [equation] -> expression -> expression
mixture rule.
The equations for the top-level of match come from the empty rule and the
match k []
match k (u:us) qs def
qs def = foldr FATBAR def [e ! ([],e) <- qs ]
= foldr (matchVarCon k (u:us)) def (partition isVar qs)
