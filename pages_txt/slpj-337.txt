Section 20.2 Preserving laziness
339
rather than the heap wherever possible. In particular, the compilation scheme
C (Section 18.5.3) builds graph structures in the heap, and many of our
optimizations will be directly aimed at replacing uses of the C compilation
scheme with alternative (and cheaper) schemes in particular cases.
20.2 Preserving Laziness
may be lost.
This optimization should be regarded as essential, since without it laziness
As we mentioned when we introduced the first version of the R scheme
(Section 18.5.2), it gives poor performance when the body of the super-
combinator is a single variable. This problem was discussed at some length in
Section 12.4, and we discovered that the solution was to evaluate the variable
before updating the root of the redex with its value.
The same problem arises with a supercombinator definition such as
$G x = letrec v1 = .. .v2. . .X. . .
v2 = ...V1 . ..
in v2
where the body of the supercombinator is a letrec, whose body is a single
variable.
What we must do is to redefine R to have a separate case for each kind of
expression, just as we did for C. Figure 20. 1 gives such an R scheme. The code
for a body which is just a single variable loads the value onto the stack, uses
EVAL to evaluate it, and only then updates the root of the redex with the
result. Notice the way let and letrec are handled rather elegantly by recursively
applying the R scheme, having first compiled the definitions.
At first it may seem that the EVAL in the rule for a global, f, is redundant,
R[ E ] pd
generates code to apply a supercombinator to its arguments.
Note: there are d arguments.
RE i ] pd
RE fled
= PUSHINT i; UPDATE (d+1); POP d; RETURN
= PUSHGLOBAL f; EVAL;
RI x ] pd
UPDATE (d+1); POP d; UNWIND
= PUSH (d - p x); EVAL
RI E1 E2 I p d
UPDATE (d+1); POP d; UNWIND
= C[[ E1 E2 1 p d;
UPDATE (d+1); POP d; UNWIND
R[[ let x=Ex in E ] pd
R[ letrec D in E ] pd
= C[ Ex ] pd; RI E ]] p[x=d+1] (d+1)
= CLetrec[ D ]] p' d'; RI[ E I p' d'
where
(o', d') = XI[[ D ] pd
Figure 20.1 Modifications to the R scheme to preserve laziness
