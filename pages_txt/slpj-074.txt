Section 4.3 The semantics of pattern-matching lambda abstractions
73
difference in evaluation strategy (strict versus lazy product-matching) to
cause a gross difference in the operational behavior of the program (scanning
the whole of an infinite list versus looking at the first element only). The
example is derived from a paper by Wadler [1985].
A further reason for advocating lazy product-matching is that it allows us to
describe mutual recursion correctly. For an explanation of this point, see
Section 6.2.6.
There is another interesting mathematical way of looking at the differences
between strict and lazy product-matching. In domain theory there is more
than one way of forming the product of two domains A and B, that vary in their
treatment of L. The ordinary product, A x B, is defined like this:
A x B = { (a,b) | aEA and bEB}
(1,1).
All the elements of this domain are pairs, and the bottom element of A x B is
The lifted product, (A x B), is defined like this:
(A x B)1 = (A x B) U {1}
In this product the element 1 is distinct from (1, L). This corresponds closely to
our operational ideas of how tuples (or any other data structure) are formed: 1
stands for a non-terminating computation, while (1,1) is a pair, both of whose
elements are non-terminating computations.
The key insight is that lazy product-matching corresponds to ordinary
product, and strict product-matching corresponds to lifted product. To
implement the ordinary product domain (A x B) we have to make (1,1)
indistinguishable from non-termination. Since they clearly differ operation-
ally, the only way to conceal their differences is to use values in an ordinary
product domain in a way that makes them indistinguishable. This is precisely
what the lazy product-matching rule does:
Evall[ A(PAIR p1 p2). E ]] 1
=
Eval[[ Ap1. Ap2. E ] (SEL-PAIR-1 1) (SEL-PAIR-2 1)
= Eval[[ Apt. Ap2.E ] 1 1
Eval[[ A(PAIR pi p2). E ] (PAIR 1 1)
=
Evai[[ Api . Ap2. E ]] (SEL-PAIR-1 (PAIR 1 1)) (SEL-PAIR-2 (PAIR 1 1))
Evail[ Ap1 . Ap2. E ] 1 1
In other words, the abstraction (A(PAIR p1 p2). E) is indifferent to whether its
argument is 1 or (1,1); it returns the same result in either case. So lazy
product-matching can be regarded as a way of implementing ordinary product
domains (A x B) by using the values in the lifted product domain (A x B)jin
such a way that (1,1) is indistinguishable from L.
Finally, it is worth noting that the use of lazy product-matching carries an
implementation cost. Consider a function addPair, which adds together the
elements of a pair:
addPair = \(PAIR x y) . + x y
