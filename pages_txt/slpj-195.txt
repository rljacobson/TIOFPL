Section 11.2 Data constructors, input and output
195
In a nutshell, arguments should be evaluated at most once and, if possible, not
at all.
Any implementation of a lazy language must somehow support these two
ingredients. We will have to wait until the next chapter before we see how to
support the second ingredient, but the first is rather easy - it is directly
implemented by normal order reduction!
Recall from Section 2.3 that normal order reduction specifies reducing the
leftmost outermost redex first. Given an application of a function to an
argument, the outermost redex is the function application itself, so a normal
order reducer will reduce this prior to reducing the argument to normal form.
For example, in the expression
(Ax.3) <bomb>
where <bomb> does not terminate, normal order chooses to apply the
lambda abstraction (giving the result 3) rather than first evaluating the
argument <bomb>. Hence normal order reduction directly implements the
first ingredient of a lazy evaluator.
In terms of reduction order, strict semantics means reducing the argument
to a lambda expression before reducing the application of the lambda
expression to the argument. This is called applicative order reduction.
As we will see in this chapter, normal order is actually an extremely natural
and easily implemented reduction order, since the rule for identifying the next
redex turns out to be rather simple. Thus graph reduction gives a 'good fit
with lazy evaluation.
11.1.4 Summary
There are strong arguments for and against lazy evaluation, but a detailed
discussion of the question is beyond the scope of this book. (The author is,
however, convinced that lazy evaluation is a crucially important feature for
functional programming.)
It seems undeniable, however, that graph reduction is a particularly
effective implementation technique for lazy languages. Since graph reduction
is the subject of this book, we will henceforth restrict our attention to
languages with lazy semantics, implemented using normal order reduction.
Arvind et al. [1984] give a more detailed description of some of these issues.
11.2 Data Constructors, Input and Output
Suppose that the result of evaluating our program is an infinite list. We want
this list to be printed out as it is generated. We certainly do not want to wait
until it has all been evaluated before printing anything, because we would
have to wait forever! Similarly, we do not want the program to evaluate its
