Fourteen
RECURSIVE
SUPERCOMBINATORS
So far we have made no explicit mention of how our lambda-lifter should
handle recursive definitions. One way to do so is to translate all our recursive
definitions into non-recursive ones, using the fixpoint combinator Y, as
described in Chapter 2. This is inefficient and slow for the following reasons:
(i) There is no reason why the supercombinators should not be explicitly
recursive since, unlike lambda abstractions, they have names so they can
refer to themselves. For example
$F X = $G ($F (- x 1)) 0
(ii) To make $F non-recursive using Y would require an auxiliary definition,
thus:
$F = Y $F1
$F1 F X = $G (F (- x 1)) 0
Defining $F in this way will require more reductions than the explicitly
recursive version, since the Y has to be reduced.
(iii) In Chapter 6 the translation into the ordinary lambda calculus of a letrec
involving mutual recursion was handled by first grouping the definitions
into a tuple, and then making this definition non-recursive with Y. Not
only is it annoying to have to introduce tuples to handle mutual recursion
of functions, but it is also very inefficient since the tuple has to be
constructed and then taken apart.
We conclude that explicitly recursive definitions of supercombinators will
give a better performance. We now describe the techniques required to obtain
a set of mutually recursive supercombinator definitions without using Y.
232
