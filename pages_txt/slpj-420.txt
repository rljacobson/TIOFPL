422
Chapter 24 Parallel Graph Reduction
Consider, for example, the following program:
let f
9 6 =
g x = + (- x)
in
+ (f 3) (f 1)
We might spark two tasks to evaluate the (f 3) and (f 1) subgraphs, which
share a common subgraph f:
f:@-
g
The + might spark the nodes marked #, thus creating two new tasks to
evaluate the arguments to the +. The first of these tasks to unwind into the
node labelled f will mark it (let us suppose it is the left-hand task in the
picture). When the second task tries to unwind into this node it will be
blocked. Meanwhile the first task will reduce the f node to WHNF by applying
g to 6, and overwriting the node with the result (+ (-6)). Then, having
evaluated the arguments (-6 and 3) it will add them, remove the mark from
the f node as it pops the node from its stack, and overwrite the node marked #
with the result (-3). Now the second task can proceed, so it will unwind into
the f node, where it will see the (+ (-6)). It will never know that there was
once a (g 6) redex there.
24.5.3 Reducing Mutual Exclusion
A disadvantage of the blocking scheme outlined above is that it risks
unnecessary serialization. To take a common example, many books on
functional programming point out the usefulness of higher-order functions. A
typical example of this is the definition of sum, which sums the elements of a
list, in terms of foldr, a higher-order function which combines the elements of a
list using a given dyadic function:
foldr f b [] = b
foldr f b (x:xs) = f x (foldr b xs)
sum = foldr (+) 0
