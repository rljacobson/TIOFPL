416
Chapter 24 Parallel Graph Reduction
value of its argument, that is if f is strict. So here is another application of
strictness analysis (Chapter 22), to identify points at which parallel evaluation
can be started. We can perform strictness analysis, annotate the graph with
information derived thereby, and use these annotations to control the
sparking of new tasks.
24.4.1.1 Strictness annotations
In fact, two forms of annotation are desirable. Consider an application of a
strict supercombinator $F to an argument E, which has a graph looking like
this:
At first sight it looks as if we could annotate in one of two ways:
(i) Annotate the application node to indicate that the argument would be
needed:
(ii) Annotate $F to indicate that it will need its argument:
Actually we should do both, because either one on its own sometimes fails to
initiate parallelism. Suppose we decided to annotate application nodes only.
Consider the expression
(IF Ec $F $G) E
where $F is strict but $G is not. Parallel evaluation of E cannot be started in
case the result of the IF expression is $G, so the application of the IF expression
to E cannot be annotated as strict. Hence E will not be evaluated in parallel. If,
however, $F was annotated as strict, then after the IF had completed, $F
would be applied to E, and parallel evaluation of E would begin as $F is
applied to E.
On the other hand, suppose that we annotate supercombinators only, not
application nodes, and suppose also that $G in the above example was strict.
Then it would be safe to evaluate E in parallel with evaluating the IF
expression, and it might be highly advantageous to do so (if Ec took a long
time to evaluate, for example). But because we are only annotating super-
combinators, the parallel evaluation of E will not be started until the IF has
completed and either $F or $G is applied to E. A further example of the
