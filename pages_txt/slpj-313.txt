Section 18.8 The built-in functions
315
stack. With the aid of this instruction we can give the following sequence for
$NEG:
EVAL;
NEG;
Evaluate the argument
Negate it
UPDATE 1;
UNWIND:
Update the root of the redex
Continue
The code for $+ is similar, complicated only by having to get the appropriate
parameter on top of the stack before calling EVAL:
PUSH 1;
EVAL;
Get second argument
Evaluate it
PUSH 1;
EVAL;
Get first argument
Evaluate it
ADD;
Add them
UPDATE 3;
POP 2;
Update root of redex
UNWIND;
Pop parameters
Evaluation is complete
The EVAL instruction does the following:
(i) Examines the object on top of the stack. If it is a CONS cell, an integer
does nothing.
(boolean, character), a supercombinator or a built-in function, EVAL
(ii) If it is an application cell, EVAL creates a new stack, pushes the top item of
the old stack, saves the current program counter (which now points to the
instruction after the EVAL), and then executes the UNWIND instruction.
After each reduction an UNWIND instruction is executed. If this UNWIND
discovers that the expression is in WHNF, it restores the old stack and jumps
to the saved return address.
As we saw in Section 11.6, we can build the new stack directly on top of the
old stack. Indeed they can overlap by one item, since the top element of the
old stack is the same as the bottom element of the new stack. We need to save
two items on another stack, called the dump:
(i) the old stack depth, or (equivalently) the old stack pointer;
(ii) the old program counter.
The UNWIND instruction at the end of the code for $NEG or $+ will always
discover that evaluation is complete, because we know that the result of a
negation or addition is an integer. It is wasteful, therefore, for UNWIND to test
the result for being in WHNF. We can encode this information by using a new
instruction, RETURN, instead of UNWIND. RETURN assumes that the
expression being evaluated is now in WHNF, but otherwise behaves just like
counter.
UNWIND; that is, it restores the old stack and jumps to the saved program
