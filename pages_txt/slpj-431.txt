Appendix
433
that this is the case which applies if all the other tests fail. Thus,
f args = rhs1, test1
= ths2, test2
= thsN, otherwise
(N.B. Earlier versions of the Miranda compiler permitted the guard to be left off in the
last case - the programs in the main part of this book are written in this older form.)
It is also permitted to introduce local definitions on the right-hand side of a
definition, by means of a where clause. Consider for example the following definition of
real roots):
a function for solving quadratic equations (it either fails or returns a list of one or two
quadsolve a b c = error "complex roots", delta<0
=[-b/(2*a)], delta=0
[-b/(2*a) + radix/(2*a),-b/(2*a) - radix/(2*a)], delta>0
where
delta = b*b - 4*a*c
radix = sqrt delta
Note that the scope of the where clause, if present, is all the right-hand sides associated
with a given left-hand side. Where clauses may occur nested, to arbitrary depth,
allowing Miranda programs to be organized with a nested block structure. Indentation
of inner blocks is compulsory, as layout information is required by the compiler to
determine the correct parse. This is done using Landin's 'offside rule' [Landin, 1966].
Pattern-matching
It is permitted to define a function by giving several alternative equations, dis-
tinguished by the use of different patterns in the formal parameters. This provides
another method of case analysis which is often more elegant than the use of guards.
Here are some simple examples of pattern-matching on lists:
sum [] = 0
sum (a:x) = a + sum x
reverse [] = []
reverse (a:x) = reverse x ++ [a]
The range of possibilities permitted by Miranda in pattern-matching is quite rich-for
example, patterns can be nested, and repeated identifiers can be used to imply equality
of subcomponents. Pattern matching can also be combined with the use of guards. As
an example which shows this, here is a definition of a function for removing adjacent
duplicate elements from a list
no_dups x = x, #x<2
no_dups (a:a:x) = no_dups (a:x)
no_dups (a:b:x) = a : no_dups (b:x), a ~= b
Notice the way in which guards are here used to fully separate the cases, so that the
meaning of the script is not sensitive to the order in which the equations are written. In
fact the semantics of the language specifies that cases are tested in the order written,
but as a general rule it is better to avoid writing code which depends on this (although
this is not always possible without clumsiness).
Accessing the elements of a tuple is also done by pattern-matching. For example, the
selection functions on 2-tuples can be defined thus
Ist (a,b) = a
snd (a,b) = b
