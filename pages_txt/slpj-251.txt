Section 15.4 A larger example
251
(Note: as before, this is not exactly the translation that would be produced by
the pattern-matching compiler, but it suffices for present purposes.) Applying
the algorithm to foldl, we choose the innermost lambda abstraction, (Axs. . .),
and look for maximal free expressions, which are: (fold! op), (op base) and
base. We take these out as extra parameters, p, q and base respectively, giving
$R1 p q base xs = IF (= xs NIL) base (p (q (HEAD xs)) (TAIL xs))
letrec
sumints = An. foldi + 0 (count 1 n)
count = An . Am . IF (> n m) NIL (CONS n (count (+ n 1) m))
in
foldl = xop. Abase. $R1 (fold| op) (op base) base
sumints 100
Now the innermost lambda abstraction is Abase, and its maximal free
expressions are ($R1 (foldl op)) and op, which we will take out as r and op
respectively, giving
$R1 p q base xs = IF (= xs NIL) base (p (q (HEAD xs)) (TAIL xs))
$R2 r op base = r (op base) base
letrec
sumints = An.fold! + 0 (count 1 n)
count = An . Am. IF (> n m) NIL (CONS n (count (+ n 1) m))
in
foldl = xop. $R2 ($R1 (fold! op)) op
sumints 100
Now all the definitions in the top-level letrec are supercombinators, because
we have lifted out all the inner lambdas, so after lifting out any constant
expressions we can lift them directly to get
$sumInts n = $fold!Plus0 ($count1 n)
$foldlPlus0 = $foldl + 0
$count1 = $count 1
$count n m = IF (> n m) NIL (CONS n ($count (+ n 1) m))
$foldl op = $R2 ($R1 ($foldl op)) op
$Prog = $sumints 100
$R1 p q base xs = IF (= xs NIL) base (p (q (HEAD xs)) (TAIL xs))
$R2 r op base = r (op base) base
$Prog
