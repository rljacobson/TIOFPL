Section 24.4 Sparking tasks
417
necessity of annotating application nodes is given by the following example.
Suppose the supercombinator $T is defined thus:
$T x f = fx
Now consider the expression
$T E $F
where $F is strict. $T is not in general strict in its first argument, but in this
context we would be safe to evaluate E in parallel, and we can achieve this by
annotating the ($T E) application node.
We conclude that to maximize opportunities for parallelism we should
annotate both functions and application nodes with strictness information.
These issues are discussed by Hankin et al. [1986].
24.4.2 Speculative Parallelism
In this section we consider relaxing our constraint that a task should only be
sparked if it is certain that its result will be needed, and consider what might
happen if we are more speculative about sparking tasks. This has the
advantage that it increases the opportunities for parallelism.
An extreme example of speculative parallelism is to spark a task for every
node in the graph or, in other words, to regard any redex in the graph as a
candidate for reduction. More conservative regimes are also possible, in
which the arguments to some functions are sparked even though it is not
certain that their result will be required.
24.4.2.1 The dangers of speculation
The danger of such speculative parallelism is that machine resources may be
consumed, evaluating pieces of graph that will eventually be discarded. For
example, consider the expression
IF Ec Et Es
Only one of the 'then' (Et) and 'else' (E.) branches of the IF will be used, and
the speculative evaluation of the other will consume machine resources
uselessly. On the other hand, if the resources are available, we could begin
evaluation of Ec, E: and E. simultaneously, and when the evaluation of Ec was
completed we would have a head start on evaluating the selected branch.
The situation is not unlike a government job creation scheme. If agents are
unemployed then we may as well find some work for them, but there is a
danger that in our eagerness to find them jobs, the work they do may
ultimately prove not to be useful.
This approach has hidden dangers. Suppose the evaluation of Ec would give
the result TRUE after a few reductions, but the evaluation of Ee failed to
terminate. Then after we begin concurrent evaluation of Ec, Et and Ee there is
a risk that the machine will squander all its resources evaluating Ee and never
