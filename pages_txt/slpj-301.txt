Section 18.5 Compiling a supercombinator definition
303
subsequently need to update it. Now the arguments p and q are conveniently
accessible. The supercombinator $F itself has been popped off, because this
stack rearrangement is actually carried out by a prelude to the target code for
$F.
Stack base
Root of redex
Arg n
Current
context
Arguments
(d+1
items)
Arg 1
Intermediate
values
Stack top
Figure 18.5 The stack during G-code execution
We see, therefore, that during the execution of the G-code for a super-
combinator, the stack looks like Figure 18.5. The section at the top of the
stack, including the pointer to the root of the current redex, the arguments
and the intermediate values, is called the current context. It always sits at the
top end of the stack, but there may be other stack elements between the stack
base and the base of the current context. At the end of the execution of a
function, the root of the redex will be updated and all the items in the context
will be popped, leaving only the pointer to the root of the redex.
To summarize, here are two ground rules, which will hold throughout:
(1) When execution of (the code corresponding to) a supercombinator body
begins, the arguments are on top of the stack, and underneath them is a
pointer to the root of the redex.
(2) When execution of the supercombinator completes, only the pointer to
the reduced graph remains on the stack. The reduced graph is not
necessarily in WHNF, so the last instruction in the supercombinator
initiates the next reduction.
During compilation of a supercombinator the compiler needs to maintain a
model of what the stack looks like. In particular, it needs to know where the
value of each variable is held, relative to the top of the stack. For all our
compilation functions this information will be held as:
(i) p, a function which takes an identifier and returns a number giving the
offset of the corresponding argument from the base of the current
context, counting the bottom element of the context as having an offset of
