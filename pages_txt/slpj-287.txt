Section 17.5 Exploiting cell lifetimes
17.4 Shorting out Indirection Nodes
In Chapter 12 we discussed the introduction of indirection nodes to presen
sharing when updating the root of a redex with its result. This is the on
purpose of indirection nodes, and in all other respects they are a burden
the implementation, since they take up storage, and have to be 'jumped ove
when traversing the graph.
It turns out that a rather simple modification to the garbage collector c
'short out' all the indirection nodes in a graph, so they are no longer require
Consider a mark-scan collector. When it reaches an indirection node duri
the mark phase, it does not mark the indirection node. Instead it overwrit
the pointer to the indirection node with the contents of the indirectid
effectively shorting it out. Thus:
IND
becomes
IND
Since all pointers to indirection nodes will be updated in this way it follo
that the indirection nodes themselves will be unreferenced (and unmarked
so they can be collected with the rest of the garbage. Not only does this sa
store, but it also saves time when following the pointers that have be
updated. A very similar technique will work for a copying collector.
17.5 Exploiting Cell Lifetimes
Another approach recently suggested by Lieberman and Hewitt [1983
based on the observation that
The longer a cell has lived,
the longer it is likely to live.
Consider, for example, a heap which includes a filing system. Many files
be unused for long periods, while data structures that are currently be
processed will have relatively short lifetimes. A conventional copy
collector will copy the entire filing system each time it runs - a very waste
activity, since it is unlikely to recover any space from the inactive majority
the filing system.
Hewitt and Lieberman therefore suggest dividing the address space in
regions of increasing age. Most pointers point backwards in time (that is
they cross region boundaries, they will mostly point from younger regions
older ones). Where pointers point from an older region into a younger d
