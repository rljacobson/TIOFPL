408
Chapter 23 The Pragmatics of Graph Reduction
(ii) We have no good means of reasoning about run-time behavior so as to
understand how good or bad our programs are.
(iii) In order to reassure himself that his program does not have undesirable
run-time behavior the programmer may have to know a lot about the
particular implementation.
(iv) Even a clever programmer cannot solve all the problems without
extensions to the implementation. Examples are strictness analysis (or
the facility for the programmer to add annotations to indicate strictness)
and parallel execution.
v) There are as yet no automatic systems for alleviating these effects.
(vi) It is very difficult to tell when undesirable behavior is taking place, except
that the program runs slower than expected. Even this relies on correct
expectations, and gives no help in finding which part of the program is
behaving badly. What is needed here is a good set of debugging tools
which would assist the programmer in finding the 'hot spots' in the
program. An example of such a tool in an imperative language is a
profiling tool, which gives a breakdown of how much time is spent in each
subroutine.
We should not get too downhearted! The fact is that most functional programs
run quite satisfactorily. What this chapter has established is an urgent need for
tools to help reason about the space and time behavior of functional
programs. This seems a rather hard problem, and Stoye suggests that efforts
might more profitably be directed to providing better debugging tools with
which to identify the offending part of the program, leaving the programmer
to fix the problem thus identified.
References
Backus, J. 1978. Can programming be liberated from the von Neumann style? A
functional style and its algebra of programs. Communications of the ACM. Vol.
21, no. 8, pp. 613-41.
Hughes, R.J.M. 1984. Parallel Functional Programs use Less Space. Programming
Research Group, Oxford.
Meira, S.R.L. 1985. On the efficiency of applicative algorithms. PhD thesis, Computer
Laboratory, University of Kent, p. 36. March.
Stoye, W. 1985. The implementation of functional languages using custom hardware.
PhD thesis, Computer Lab., University of Cambridge. May.
Turner, D.A. 1981. The semantic elegance of applicative languages. In Proceedings of
85-92. ACM.
the ACM Conference on Functional Languages and Computer Architecture, pp.
