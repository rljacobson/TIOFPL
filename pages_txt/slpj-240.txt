240
Chapter 14 Recursive Supercombinators
The new method has one major advantage. In our previous approach the
recursive call to count in the $count supercombinator was made to a function
passed in as a parameter (called count). In contrast, the new method makes
the recursive call directly to the supercombinator $count. This means that the
compiler can see which function is being called, and this information can
make the compiled code considerably more efficient (see Chapter 20).
On the other hand, the $count supercombinator generated by the new
method is larger than that generated by the previous method. It contains an
extra application node ($count m), and a new instance of this application node
will be constructed on every application of $count, which will consume more
store.
In the case of mutually recursive functions, it turns out that each function
needs to be passed the free variables of all the other functions in the mutually
recursive set, as well as its own. This involves doing the sort of dependency
analysis described in Section 6.2.8. Furthermore, as mentioned above, data
structures and functions must be treated in different ways by the new method,
which makes the compiler more complicated.
The trade-off between the two techniques is not yet clear.
14.7 Compile-time Simplifications
Once lambda-lifting has been completed there are some simple optimizations
that further improve the lambda-lifted program. These take the form of
compile-time simplifications of the program.
14.7.1 Compile-time Reductions
It may be advantageous to perform certain reductions at compile-time. For
example, consider the definitions
$F x y = + ($G y) x
$G p = *pp
The ($G y) in the body of $F is a redex which will be created every time $F is
applied. We could, however, reduce it at compile-time, giving
$F x y = + (* yy) x
thus performing the $G reduction once and for all at compile-time. This
process is directly analogous to expanding out the code for a procedure call
in-line, a common optimization in conventional compilers. In order to
preserve sharing we should replace the redex with a let-expression:
$G E - let p = E in * p p
Sometimes we can evaluate subexpressions completely, as in the definition
$H X = + x (* 3 4)
