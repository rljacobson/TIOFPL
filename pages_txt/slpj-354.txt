356
Chapter 20 Optimizations to the G-machine
(because the graph constructed by C may be discarded), but on almost any
conceivable machine it would be cheaper to perform the addition than to
construct the graph. The reason we cannot do this in any old context is that the
evaluation of x might not terminate; but we can safely perform this
optimization in any context where we are sure that x is evaluated. Exactly the
same optimization can be used for any other built-in function. For example,
CI HEAD y I p d {y evaluated }
= PUSH (d - p y); HEAD
We would also like to propagate this information upwards. For example,
we would like to arrange that
CI + (+ x5) y Ipd
{x and y evaluated }
= PUSH (d - p y); PUSHINT 5; PUSH (d - p x); ADD; ADD
To achieve this, we would simply need C to return an extra piece of
information to say when its result was known to be evaluated. But this is
already available to us in the form of o, which records which stack locations
are evaluated, so the optimization is easily incorporated.
The optimizations in this section depend on the relative costs of performing
certain built-in operations (for example, addition versus heap cell allocation).
As such, they need to be considered carefully with a particular machine in
mind. However, the examples presented here would be worth doing on most
machines. They would not be nearly so attractive if, for example, the +
operator was an arbitrary precision addition function.
20.9 Manipulating Basic Values
Consider the following function definition
f xy = + x ( +y 1)
This will compile to
PUSHINT 1; PUSH 2; ADD; PUSH 1; ADD;
UPDATE 3; POP 2; RETURN
In an implementation which uses a boxed representation of integers (see
Section 10.6) the first ADD will
i) take two integers (y and 1) out of their boxes,
EE
add them,
(iii)
)allocate a new box,
(iv) and put the result in the new box.
The second ADD will promptly take the result out of the box in order to add it
to x. Hence, the allocation of the box and the act of putting the intermediate
result in it were wasted.
