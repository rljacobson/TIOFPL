Section 19.4 More on the graph representation
333
As noted in Section 19.2.2, we should first check for stack overflow, unless the
machine's hardware is capable of doing so automatically.
Suppose, instead, that the cell is an integer cell. Then the specification for
UNWIND says that the integer cell must be the only thing on the stack, and we
should return to the caller, restoring the old stack but putting the top element
of the current stack on top of it. Fortunately, it is already in the right place!
Hence, all that is required is the following:
INT_UNWIND:
The Unwind code for an integer cell
mov! (SP)+,%EP Restore stack pointer
rsb
Return to caller
Suppose now that we are unwinding a global function cell. Then the
specification for UNWIND (see Figure 19.1) requires a test to check whether
there are enough arguments on the stack for the function to execute. The
Chalmers G-machine actually uses a separate tag for each function, complete
with a separate entry table (remember that a tag takes a whole word, so there
are plenty of tags available). This means that instead of having code for
FUN_UNWIND we have a piece of code F_UNWIND for each global function F
(supercombinator or built-in function). Suppose that F takes two arguments.
Then the code for F_UNWIND might look like this:
F_Return:
We get here if there are too
movl (SP)+,%EP
few args. Return to caller.
Restore stack pointer
rsb
Return to caller
F_UNWIND:
Unwind code for function F
moval 8(%EP), r0
NB: pointer to FUN node is still on stack
cmpl (SP), r0
10 points to base of context
jlss F_Return
Is this below stack base?
Return if too few args
movl 4(%EP),r0
Now rearrange the stack
movl Tail(10),(%EP)
Top vertebra in ro
movi 8(%EP), r0
Push its tail (overwrites FUN pointer)
Next vertebra in ro
movl Tail(10),4(%EP) Tail into stack
F_EXEC:
Now comes the code for F
The code immediately after F_UNWIND first makes a test to see whether there
are enough arguments. It does so by computing the address of the base of the
context in the stack, assuming that enough arguments are present. In this
case, two arguments and four bytes per stack element give an offset of eight
from the top of the current stack. It then compares this context base address
with the saved stack pointer, found on the dump, which points to the base of
