Section 2.5 The denotational semantics of the lambda calculus
31
functions and data values that can be denoted by a lambda expression. The
really serious complication is that, in view of the self-application required in
the lambda abstraction for Y, the domain must include its own function space.
1981].
Giving a sound theory to such domains is the purpose of domain theory [Scott,
We will take the existence and soundness of domain theory and denota-
tional semantics for granted, and the framework they provide will prove to be
quite useful. They are rich and beautiful areas of computer science, and Stoy
[1981] is a good starting-point for further reading..
A note on notation: as we have seen, the environment p is an essential
argument to Eval. Nevertheless, in all the situations where we use Eval in the
rest of this book, p plays no significant role. For the sake of simplicity, we will
therefore omit the argument p from now on - it could be restored by adding p
to every call of Eval. For example, we will write
Eval[[ E1 ] = Evall[ E2 D
where we should more correctly write
Evall[ E: I p = Eval[[ E2 ] p
2.5.2 The Symbol 1
One of the most useful features of the theory we have described in this section
programs.
is that it gives us a way to reason about the termination (or otherwise) of
As remarked in Section 2.3, the reduction of an expression may not reach a
normal form. What value should the semantics assign to such programs? All
that we have to do is to include an element 1, pronounced 'bottom', in the
form:
value domain, which is the value assigned to an expression without a normal
Evall[ <expression with no normal form> ]] = 1
1 has a perfectly respectable mathematical meaning in domain theory, and,
like the symbol 0 (which also stands for 'nothing'), its use often allows us to
write down succinct equations instead of rambling words. For example,
instead of saying 'the evaluation of the expression E fails to terminate', we can
write
Eval][ E ]] = L
2.5.3 Defining the Semantics of Built-in Functions and Constants
In this section we will see how to define the value of Evall[ k ], where k is a
constant or built-in function.
For example, what is the value of Evall[ * I? It is certainly a function of
