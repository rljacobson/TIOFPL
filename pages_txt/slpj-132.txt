Section 7.2 Reduction rules for list comprehensions
131
which may be an easier way to think of the rule for generators. For example,
[square x 1 x <- [1, 2, 3]; odd x]
- [square 1 ! odd 1] ++ [square 2 ! odd 2] ++ [square 3 { odd 3]
(by rules (1) and (2))
[square 1 | True] ++ [square 2 | False] ++ [square 3 | True]
[square 1 1 ] ++ [] ++ [square 3 1 ]
(reducing odd)
-[square 1] ++ [] ++ [square 3]
(by rules (3) and (4))
- [1, 9]
(by rule (5))
These rules are based upon using append (++) to combine the result lists,
rather than cons (:) as one might expect. This is necessary in order to make it
easy for filters to remove elements (by reducing to the empty list, as with
[square 2 1 odd 2] in the example above). It is also necessary for multiple
generators, as in the example below:
cp ['a','b'] [1,2,3]
- [(x,y) I x <- ['a','b']; y <- [1,2,3] ]
- [('a',y) ly <- [1,2,3] ] ++ [('b',y) | y <- [1,2,3] ]
(definition of cp)
[('a', 1) ( ] ++ [('a',2) ( ] ++ [('a',3) | ] ++
(by rules (1) and (2))
[('b',1) 1 ] ++ [('b',2) 1 ] ++ [('b',3) | ]
[('a', 1), ('a',2), ('a',3),
(by rules (1) and (2) again)
('b',1), ('b',2), ('b',3) ]
(by rule (5))
The careful reader will have noticed that the above examples have ignored
follows:
lazy evaluation. A lazy evaluator would begin to reduce the first example as
[square x 1 x <- [1, 2, 3]; odd x]
- [square 1 ( odd 1] ++ [square x ( x <- [2, 3]; odd x]
[square 1 1]
++ [square x 1 x <- [2, 3]; odd x]
(by rule (2))
- [square 1]
++ [square x 1 x <- [2, 3]; odd x]
(by rule (4))
- 1 : [square x 1 x <- [2, 3]; odd x]
(by rule (5))
and so the first element of the result can be returned without examining the
entire input list.
