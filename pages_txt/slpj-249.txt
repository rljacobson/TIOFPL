Section 15.3 Lambda-lifting using maximal free expressions
249
supercombinator. The name can then be used instead of the expression. This
is illustrated in the next section.
15.3.2 Fully Lazy Lambda-lifting in the Presence of letrecs
program
As in Chapter 14, our strategy needs to take account of letrecs. Consider the
let
f = \x. letrec fac = An. (. . .)
in
in + x (fac 1000)
+ (f 3) (f 4)
The algorithm of Chapter 14 will compile it to
$fac fac n = (.. .)
$f x = letrec fac = $fac fac
in + x (fac 1000)
+ ($f 3) ($f 4)
The function fac is defined locally in the body of f, and hence (fac 1000) cannot
be lifted out as a free expression from the body of f. Unfortunately, this means
that (fac 1000) will be recomputed each time $f is applied, so we have lost full
laziness.
The solution is to recognize that the definition of fac does not depend on x.
With this in mind we can 'float' the letrec for fac outwards, giving this program
letrec
fac = An .(.. .)
in let
in
f = \x. + x (fac 1000)
+ (f 3) (f 4)
Now our fully lazy lambda-lifter will produce a fully lazy program:
$fac n = (.. .)
$fac1000 = $fac 1000
$f x = + x $fac1000
$Prog = + ($f 3) ($f 4)
$Prog
