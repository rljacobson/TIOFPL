72
Chapter 4 Structured Types and the Semantics of Pattern-matching
none of the components of A is evaluated, then A will not be evaluated either,
which is the effect we wanted to achieve.
Let us see how this works on zeroPair:
zeroPair = \(PAIR x y).0
Hence,
Eval[[ zeroPair ] L
=
Evall[ A(PAIR x y).0 ]] L
=
Eval[[ Ax. Ay . 0 ] (SEL-PAIR-1 1) (SEL-PAIR-2 1)
Evall[ Ay.0 ]] (SEL-PAIR-2 1)
= 0
as required.
4.3.5 A Defence of Lazy Product-matching
Consider the Miranda function firsts, which takes a list of numbers, and
returns a pair consisting of the first odd and first even elements of the list:
firsts []
= (0,0)
firsts (x:xs) = combine x (firsts xs)
combine x (od,ev) = (x,ev),
odd x
= (od,x),
even x
Suppose that we were to use strict product-matching, so that when evaluating
an application (combine A, A2) we would first evaluate A2. Now consider
evaluating (firsts [1..]), where [1 .. ] is the infinite list of integers starting at 1:
firsts [1..] - combine 1 (firsts [2. .])
combine 1 (combine 2 (firsts [3. .]))
and so on.
The evaluation of (firsts [1. .)) will never terminate. This is hardly satis-
factory, because it is clear that the value of (firsts [1.. ]) should be (1,2).
All is well, however, if we use lazy product-matching. Then, in effect, the
evaluation goes like this:
firsts [1..]
combine 1 (firsts [2..])
(1, SEL-PAIR-2 (firsts [2.. ]))
fittt
(1, SEL-PAIR-2 (combine 2 (firsts [3.. ])))
(1, SEL-PAIR-2 (SEL-PAIR-1 (firsts [3.. ]), 2))
(1, 2)
Under lazy product-matching, combine does not evaluate its second
argument. Instead it binds od to (SEL-PAIR-1 A) and ev to (SEL-PAIR-2 A),
where A is the argument.
We conclude that lazy product-matching gives significant benefits to the
programmer. The effect is quite subtle: strict product-matching caused the
entire argument list to be scanned even though all the operations on lists are
lazy. One purpose of this section is to point out that it is easy for a subtle
