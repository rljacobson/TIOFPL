138
Chapter 7 List Comprehensions
The translation rule (A) of Figure 7.4 should be replaced by the rule
(A') TQI [E 1 p <- Li; Q] ++ L2 II
letrec
h = Aus. case us of
NIL
CONS u us'
TEI L2 D
( ((ATE[ p ]. TQ[ [E ( Q] ++ (h us') I) u)
in (h TE[[ Li D)
[ (h us') )
where h, u, us and us' are new variable names which do not occur
free in E, L1, L2or Q.
Again, the central phrase of this rule is in just the right form for further
processing by the pattern-matching compiler, and the rule for variables
emerges as a special case of the rule for patterns. And, again, just as rule (A)
can be derived from rule (a), so rule (A') can be derived from rule (a').
Furthermore, the new translation scheme is still optimal, in that it performs
the minimum number of CONS operations.
In short, extending the results of the previous sections to allow patterns in
generators is straightforward; the new rules have the old rules as a special
case; the correctness of the new results may be shown in the same way; and the
efficiency of the translations is unimpaired.
Reference
Turner, D.A. 1982. Recursion equations as a programming language. In Functional
Programming and Its Applications. Darlington et al. (editors). Cambridge
University Press.
