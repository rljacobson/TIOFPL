Twenty
OPTIMIZATIONS TO THE
G-MACHINE
We now give a long sequence of optimizations to the G-code compilation
schemes. In the main they are independent of each other and any combination
of them could be implemented. All of them are based on the idea of compiling
special code to avoid building graphs.
One particular optimization, concerning spine allocation, is so important
that we devote the next chapter to it.
20.1 On Not Building Graphs
The principal reason why implementations of functional languages have the
reputation for being very slow is that they spend a lot of time allocating and
garbage-collecting cells from the heap. A heap provides a very general
storage allocation mechanism, but it is also very expensive. Each cell used
costs us in four ways:
(i) it must be allocated;
it must be filled with data;
E
E
the data in it will normally subsequently be read;
(iv) the cell must be recovered when it becomes unreferenced.
In contrast, a stack is a much less flexible allocation mechanism, but the store
it allocates is recovered immediately when it becomes unused, and this
recovery is very cheap (decrementing the stack pointer). In addition, because
stacks seldom grow large, it is often possible to implement the stack with
faster technology, so that accessing stack elements is faster than going to the
heap.
A primary objective of our optimizations, then, will be to use the stack
338
