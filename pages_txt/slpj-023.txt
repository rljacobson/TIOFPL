22
Chapter 2 The Lambda Calculus
abstraction, substituting the argument for free occurrences of the formal
parameter. Special care needs to be taken when the argument contains
free variables.
(iii) Eliminating redundant lambda abstractions. n-reduction can sometimes
eliminate a lambda abstraction.
Within this framework we may also regard the built-in functions as one more
form of conversion, 8-conversion. For this reason the reduction rules for
built-in functions are sometimes called delta rules.
As we have seen, the application of the conversion rules is not always
straightforward, so it behoves us to give a formal definition of exactly what the
conversion rules are. This requires us to introduce one new piece of notation.
The notation
E[M/x]
means the expression E with M substituted for free occurrences of x.
As a mnemonic, imagine 'multiplying' E by M/x, giving M where the x's
cancel out, so that x[M/x] = M. This notation allows us to express
B-conversion very simply:
(AX.E) M E[M/x]
and it is useful for a-conversion too.
Figures 2.3 and 2.4 give the formal definitions of substitution and
conversion. They are rather forbidding, but all the complexity arises because
of the name-capture problem described in Section 2.2.6 which will not arise at
all in our implementations. Hence a-conversion will not be necessary, B-
reduction can proceed by simple substitution, and n-reduction will prove to
be a compile-time technique only.
To summarize our progress so far, we now have:
(i) a set of formal rules for constructing expressions (Figure 2.1);
(ii) a set of formal rules for converting one expression into an equivalent one
(Figures 2.2-2.4).
x [M/x]
M
c [M/x]
where c is any variable or constant other than x
C
(E F)[M/x] = E[M/x] F[M/x]
(AX. E)[M/x] = AX.E
(Ay . E)[M/x] where y is any variable other than x
= Ay. E[M/x] if x does not occur free in E
or y does not occur free in M
= \z. (E[z/y))[M/x] otherwise
where z is a new variable name which does not
occur free in E or M
Figure 2.3 Definition of E[M/x]
