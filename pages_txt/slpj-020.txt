Section 2.2 The operational semantics of the lambda calculus
19
2.2.4 Eta-conversion
One more conversion rule is necessary to express our intuitions about what
lambda abstractions 'ought' to be equivalent. Consider the two expressions
(Ax. + 1 x)
and
(+ 1)
These expressions behave in exactly the same way when applied to an
argument: they add 1 to it. n-conversion is a rule expressing their equivalence:
(Ax. + 1 x) + (+ 1)
More generally, we can express the n-conversion rule like this:
(AX. F X) - F
provided x does not occur free in F, and F denotes a function.
The condition that x does not occur free in F prevents false conversions. For
example,
(Ax. + x x)
is not n-convertible to
(+ x)
because x occurs free in (+ x). The condition that F denotes a function
prevents other false conversions involving built-in constants; for example:
TRUE
is not n-convertible to
(AX. TRUE x)
When the n-conversion rule is used from left to right it is called n-reduction.
2.2.5 Proving Interconvertibility
We will quite frequently want to prove the interconvertibility of two lambda
expressions. When the two expressions denote a function such proofs can
become rather tedious, and in this section we will demonstrate a convenient
method that abbreviates the proof without sacrificing rigor.
As an example, consider the two lambda expressions:
IF TRUE ((Ap.p) 3)
and
(AX.3)
