Section 5.2 The pattern-matching compiler algorithm
83
equivalent case-expression. We begin with rules for simple cases and proceed
to more general cases.
5.2.2 The Variable Rule
In the example above, we have the following call on match:
match [u1, U2, U3]
[ ( [f, NIL,
( [f, CONS x XS, NIL
ys
J. (A f ys)
], (B f x xs)
ERROR
( [f, CONS x xs, CONS y ys], (C f x xs y ys) ) ]
In this case, the list of patterns in every equation begins with a variable. This
may be reduced to the equivalent call:
match [uz, u3]
( [NIL,
ys
( [CONS x XS, NIL
], (A uf ys)
], (B U1 x xs)
ERROR
( [CONS x xs, CONS y ys], (C U1 x xs y ys) ) ]
This is derived by removing the first variable, u1, and in each equation
removing the corresponding formal variable, f, and replacing f by u, in the
right-hand side of each equation.
The same method works whenever each equation begins with a variable,
even if each equation begins with a different variable. For example,
match [u2, u3]
[ ( [x, NIL],
(B x) ),
ERROR
( [y, CONS x xs], (C y x xs) ) ]
reduces to the call,
match [u3]
[ ( [NIL],
(B u2) ),
ERROR
( [CONS x xs], (C U2 x xs) ) ]
(This particular example arises when compiling the definition of nodups.)
In general, if every equation begins with a variable pattern, then the call of
match will have the form:
match (u:us)
[ ( (V1:ps1), E1 ),
E
( (Vm:PSm), Em ) ]
