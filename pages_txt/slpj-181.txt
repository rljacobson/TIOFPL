180
Chapter 9 A Type-checker
tclet2 phi FAILURE
= FAILURE
tclet2 phi (OK (phi',t))
= OK (phi' $scomp phi, t)
The purpose of add_decls is to update a type environment gamma so that it
associates schematic types formed from the types ts with the variables xs. The
variables which become schematic variables are those that are not unknowns
in gamma. The definition is slightly complicated by our obligation to ensure
that the names of the schematic variables are distinct from the names of any
unknown variables which can occur in the range of a substitution. We use the
name sequence ns to supply new names for the schematic variables.
add_decls':: type_env -> name_supply
-> [vname] -> [type_exp] -> type_env
add_decis gamma ns xs ts
= (xs $zip schemes) ++ gamma
where schemes = map (genbar unknowns ns) ts
unknowns = unknowns_te gamma
genbar unknowns ns t
= SCHEME (map snd al) t'
where al = scvs $zip (name_sequence ns)
t'
scvs = (nodups (tvars_in t)) $bar unknowns
= sub_type (al_to_subst al) t
Here snd is a function which projects a pair to its second coordinate. The
projection functions for pairs are defined by
fst :: (*, **) -> *
fst (x,y) = x
snd :: (*,**) -> * *
snd (x,y) = y
The function nodups returns a list with the same set of entries as its
argument list, but without duplicates:
nodups :: [*] -> [*]
nodups xs = f [] xs
where
f acc []
= acc
f acc (x:xs) = f acc xs, x $in acc
= f (x:acc) xs
9.7.6 Type-checking letrec-expressions
The definition of the function invoked to type-check expressions
(LETREC xs es e) is rather intricate, as there are many things to do. In
outline, they are these:
