96
Chapter 5 Efficient Compilation of Pattern-matching
transform to:
unwieldy = Axs.Ays.
(case xs of
NIL
(case ys of
NIL
A
CONS y' ys'
FAIL) (a)
I FAIL
(b)
CONS x' xS' =>
FAIL)
I B xs ys
(c)
This expression is a little larger than the previous version of unwieldy, but
now (B xs ys) appears only once. If (B xs ys) stands for a large expression,
then this new expression may be much smaller than the previous one.
As an example of how this sort of expression is evaluated, consider the call
(unwieldy NIL (CONS 1 NIL))
This is evaluated as follows. First, the outer case-expression is evaluated.
Since xs is NIL, this causes the inner case to be evaluated. Since ys is
(CONS 1 NIL), the inner case-expression returns FAIL; see line (a). So the
expression after the inner [ is returned, which is also FAIL; see line (b). Thus,
the outer case-expression returns FAIL. So the expression after the outer [ is
returned; see line (c). This is (B NIL (CONS 1 NIL)), which is the value
returned by the call of unwieldy.
5.4.2 Optimizing Expressions Containing I and FAIL
It is often the case that all occurrences of FAIL, and its companion, I, can be
eliminated. Most of these optimizations depend on reasoning that FAIL can
never be returned by an expression, because in this case an occurrence of I can
be eliminated.
Suppose that FAIL is returned by an expression E. Then it is necessary
(though not sufficient) that one of the following conditions must hold:
(i) FAIL is mentioned explicitly in E;
(ii) E contains a pattern-matching lambda abstraction, whose application
may fail;
(iii) FAIL is the value of one of the free variables of E.
If the pattern-matching compiler described in this chapter is applied
throughout, then no pattern-matching lambda abstractions will remain in the
transformed program, and hence (ii) cannot occur. Since the programmer
presumably cannot write FAIL explicitly in his program, it is not hard
(although perhaps tedious) to verify that (iii) cannot occur either.
These observations focus our attention on all the places where FAIL can be
introduced explicitly by the compiler. There are only two such places:
(i) In the translation of conditional equations (Section 4.2.6). Fortunately,
