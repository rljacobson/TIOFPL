Twelve
GRAPH REDUCTION OF LAMBDA
EXPRESSIONS
We have now dealt with the issue of which redex to reduce next, and how to
find it. In this chapter we will complete the implementation by showing how to
perform a reduction.
Performing a reduction constitutes a local transformation of the graph
representing the expression, so the process of reduction successively modifies
the graph until it reaches its final form, the result of the computation.
As we have seen in the previous chapter, the function at the tip of the spine
may be either a lambda abstraction, or a built-in function (if, that is, the graph
has a top-level redex at all). We will deal with these two cases separately.
12.1 Reducing a Lambda Application
Suppose the redex consists of a lambda abstraction applied to an argument.
Then we must apply the B-reduction rule to the graph. That is, we must
construct an instance of the body of the lambda abstraction, substituting the
argument for free occurrences of the formal parameter.
We will sometimes refer to this process as 'constructing a new instance of
the body of the lambda abstraction', but we will often abbreviate this to
'instantiating the lambda body'. Figure 12.1 gives an example.
reduces to
AX TRUE
NOT TRUE
NOT
X
(Ax. NOT x) TRUE - NOT TRUE
Figure 12.1 Instantiating the body of a lambda abstraction
