Section 4.1 Introduction to structured types
55
However, the type of a tuple completely determines the number and the types
of its fields. For example, a pair always contains exactly two fields, a triple
contains exactly three fields, and so on.
4.1.2.3 Enumerated types
The type declaration
color ::= VERMILLION | PUCE | LAVENDER
in which each constructor has zero fields, is just like an enumerated type in
Pascal. Thus, we can define the type of boolean values:
bool ::= TRUE | FALSE
The usual functions on booleans can then be defined using pattern-
matching; for example:
if TRUE e1 e2 = e1
if FALSE e1 e2 = e2
Miranda uses the names 'True' and 'False' for its built-in truth-values.
4.1.2.4 Summary
Since it is easy to translate 'built-in' types like lists and tuples into equivalent
structured types, then any implementation of a functional language that
handles structured types will also handle these 'built-in' types for free. This
can greatly simplify an implementation. Instead of implementing several type
mechanisms, one for lists, one for tuples, one for enumerated types, and so
on, we need only implement a single mechanism for structured types, and
equations.
translate other types into structured types. Figure 4.1 gives the required
4.1.3 General Structured Types
In general, the form of a structured type definition is:
T ::= C1 Ti,1 . . . T1,n
..
I Cn Tn,1 . . . Tn.m
where the Ti,j are types and the c, are constructors of arity ni. In the 'tree'
example above, T was (tree *), C1 was LEAF, T1,1 was num, C2 was BRANCH, T2,1
was (tree * ), and T2,2 was (tree *).
Readers familiar with the mathematical operations for constructing types
will recognize that the general type above can be written as the sum (that is,
discriminated union):
T = Ti+... + Tn
