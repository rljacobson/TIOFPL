Section 4.3 The semantics of pattern-matching lambda abstractions
71
returned even if the evaluation of the argument is very expensive or non-
terminating:
Eval[[ zeroAny ]] 1 = 0
We say that zeroAny is lazy since it does not evaluate its argument.
The semantics of the function zeroList has already been described by the
preceding sections. It specifies that zeroList evaluates its argument, and
checks whether it is [ ]. If it is, then zeroList returns 0, otherwise it returns
ERROR. We say that zeroList is strict since it does evaluate its argument:
Eval[[ zeroList ] 1 = 1
Should the zeroPair function be lazy or strict? Since the argument is a tuple
there is no point in evaluating it to check that it really is a tuple, as was
required in the case of zeroList, because the check would always succeed
(assuming that the program is type-checked). It would be more in the spirit of
a lazy language to specify that
Eval[[ zeroPair ] 1 = 0
and the Miranda language specifies this choice. We call this lazy product-
matching. On the other hand, an alternative choice would be to specify that
Evall[ zeroPair ] 1 = 1
and we call this strict product-matching.
Notice that there is no 'right' or 'wrong' answer; it is simply a question of
making a clear choice of semantics for product-matching. The only 'wrong'
approach is not to notice that there is a choice to be made (and hence to risk
making different choices in different parts of the implementation, with
unpredictable results).
Nevertheless, we contend that there are persuasive arguments in favor of
the lazy approach. We discuss this issue in the next section, while in the rest of
this section we concentrate on the semantics of lazy product-matching.
We may describe lazy product-matching by the following semantic rule:
Eval[[ A(t pi . . . pr). E ]] a = Eval[[ Ap:. . .Ap,. E ] (SEL-t-1 a)
(SEL-t-r a)
Here SEL-t-i is a built-in function which selects the ith field from a structured
equations:
object built with constructor t. It may be described by the following semantic
SEL-t-i (t a1 . . . ai . . . ar) = a
SEL-t-i L
= 1
Suppose that (Ap. E), where p is a product pattern, is applied to an expression
A. The rule for lazy product-matching postpones the evaluation of the
argument A by binding the names for the components to applications of
SEL-t-i to A, rather than evaluating A and extracting its components directly. If
