226
Chapter 13 Supercombinators and Lambda-lifting
13.3 Transforming Lambda Abstractions into Supercombinators
To summarize our progress so far, we have seen that certain sorts of lambda
abstractions, the supercombinators, are particularly easy to compile. Our
implementation effort now breaks into two parts:
(i) a translation algorithm which transforms all the lambda abstractions in
the program into supercombinators;
(ii) an implementation of supercombinator reduction.
First of all we consider how to transform lambda abstractions into super-
combinators. Here is an example program (in which neither lambda
abstraction is a supercombinator):
(xx. (Ay. + y x) x) 4
Consider first the innermost lambda abstraction (Ay . + y x).
It has a free variable, x, so it is not a supercombinator. However, a simple
transformation will make it into one:
make each free variable into an extra parameter (we sometimes call this
abstracting the free variable).
Thus we would transform
(Ay . + y x)
to
(Ax.Ay. + y x) x
(This operation is simply B-abstraction.) To see that these two expressions are
equivalent, just perform a B-reduction on the second to get the first. To make
it slightly clearer we could perform an a-conversion on the Ax abstraction to
give
(Aw. Ay. + y w) x
This clarifies the distinction between the two xs which occurred in the previous
version. Now the lambda abstraction (Aw.Ay. + y w) is a supercombinator!
Performing this transformation on our original program gives
(Ax. (Aw.Ay . + y w) x x) 4
Next we give the supercombinator a name, $Y say, like this
$Y wy = +y w
(AX. $Y x x) 4
