342
Chapter 20 Optimizations to the G-machine
Now suppose (as at the beginning of the last section) that E was of the form
(CONS E1 E2). Then we would compile code to construct the graph of
($CONS E1 E2) and promptly EVALuate it. But this is precisely the kind of
situation that the optimizations of the previous section succeeded in spotting.
How can we perform the same optimization for the C-EVAL sequence?
The reason that the C-EVAL sequence performs badly is that the C scheme
proceeds in ignorance of the fact that the result is going to be evaluated. What
we need is a new scheme, E, which is a version of C that delivers an evaluated
result. To be specific:
E[[ Ell pd
produces G-code which evaluates E to WHNF and leaves the result on top of
the stack.
This is, of course, precisely what theC-EVAL sequence did. Figure 20.2 gives
the E compilation scheme. In exactly the same way as the R scheme, E looks
for a number of special cases, and produces good code for these cases. Notice
how often it is possible to apply E recursively to compile subexpressions. For
example, when the result of (+ E1 E2) is needed then we are sure the results
of E: and Ez will be needed, so they can be compiled with E. This achieves the
desirable effect of propagating demand into the expression. In the same way
as R, E propagates down inside lets and letrecs. If, however, none of the special
cases applies, E takes the easy way out and uses C followed by EVAL.
E[ El pd
Evaluates E, leaving the result on top of the stack.
E[ il pd
= PUSHINT i
E[ fled
=
PUSHGLOBAL f; EVAL
E[[ x ] pd
E[ NEG E ] pd
=
PUSH (d - p x); EVAL
E[ + E1 E2 ]] p d
=
E[ E ] p d; NEG
E[ CONS E1 E2 I p d
= E[ E2 ] p d; E[[ E1 I p (d+1); ADD
E[ HEAD E ]] p d
= C[[ E2 ]] p d; C[ E1 1 p (d+1); CONS
E[ IF Ec Et Er ] pd
= E[ E ] p d; HEAD; EVAL
= E[ Ec ] p d; JFALSE L1;
E[[ Et ] p d; JUMP L2;
LABEL L1;
E[ Et ] p d;
LABEL L2
E[[ let x=Ex in El p d
= C[ Ex I pd;
E[ letrec D in E ] p d
E[ E ] p[x=d+1] (d+1); SLIDE 1
= CLetrec [ D ] p' d'; E[ E ] p' d'; SLIDE (d'-d)
where
E[ E1 E2 ] p d
(p', d') = Xr[ D ] pd
= C[ E1 E2 ] p d; EVAL
Figure 20.2 The E compilation scheme
