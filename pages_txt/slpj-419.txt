Section 24.5 Blocking tasks
421
24.5 Blocking Tasks
What happens if two tasks start evaluating the same piece of graph? They
might do this because the same node was sparked twice, or (more commonly)
subgraph.
because the graphs being evaluated by the two tasks share a common
As we will see in this section, for efficiency reasons we will need to
introduce a mechanism whereby tasks can be blocked from evaluating a piece
of graph which another task is already evaluating.
24.5.1 The Need for Blocking
The indivisibility of each reduction step assures us that nothing incorrect will
happen if two tasks were to evaluate the same graph, but it would certainly be
inefficient. They would execute in rough synchronization, and would either
execute the same reduction at the same time or would 'leapfrog' each other.
Their exact behavior would depend on the implementation but what is clear is
that the same result would be obtained by either of them alone. For example,
consider the program
let x = * 4 5
in + x x
We might spark two parallel tasks to evaluate the arguments to the +, both of
which will try to evaluate the (* 4 5). They will both get the same result, so it
is probably better to allow one to proceed and make the other wait for the
result. Otherwise we risk tying up two agents to do the work of one.
For efficiency reasons, therefore, we would like it to be possible for one
task to be blocked by another. Let us consider the blocking mechanism in
more detail.
24.5.2 The Blocking Mechanism
A task proceeds by unwinding the spine until it finds a function at the tip,
when it performs the appropriate reduction (if there are enough arguments).
As the task unwinds the spine, it could mark the vertebrae nodes (by altering
the tag), so that a marked node is a signal saying 'DANGER - task at work
inside here'. (Note that this mark is, of course, entirely different from the
mark used by a mark-scan garbage collector. It may be implemented by
altering the tag on the node.)
Now, when another task comes across the marked node during its unwind,
it would be blocked. As the first task rewinds the spine (i.e. pops vertebrae
from its stack when a reduction is completed), it removes the mark from the
vertebrae. Of course, the vertebra which is actually updated by the reduction
must be overwritten before its mark is removed. Any tasks blocked by the
marked nodes are now free to proceed.
