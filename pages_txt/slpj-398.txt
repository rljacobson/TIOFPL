400
Chapter 23 The Pragmatics of Graph Reduction
Now how many times does the (sqrt 4) get evaluated? The answer is once.
These are not obvious answers, and it takes a little while with the lambda-
lifter to discover how lazy they are, yet a program transformation system
might easily transform one into the other without expecting the serious
degradation in performance that would result.
23.2.3 Summary
We conclude that it is by no means obvious how lazy a function is, and that we
do not at present have any tools for reasoning about this. Laziness is a delicate
property of a function, and seemingly innocuous program transformations
may lose laziness.
23.3 The Space Behavior of Lazy Functional Programs
So far in this book we have largely taken for granted that lazy evaluation is a
Good Thing, since it postpones evaluation until it is certain that the result of
the evaluation is required.
However, this view is rather naive since it takes into account only the
number of reductions performed, while discounting the memory consump-
tion of the evaluation. It is actually rather difficult to work out what the space
consumption of a lazy program will be, and we will examine a number of
examples in this section.
23.3.1 Space Leaks
Consider the following Miranda program:
f = drop 1000
drop n XS = xs,
n=0
= drop (n-1) (tl xs)
(...f. . .f. . .f. . .)
(drop n xs) returns the list xs with the first n elements knocked off it. The
function f is drop applied to one argument, 1000, and is used at various points
in the program.
Now, the lambda expression for drop is
drop = An.Axs. IF (= n 0) xs (drop (- n 1) (TAIL xs))
When fully lazy lambda-lifting is performed, the expressions (= n 0) and
