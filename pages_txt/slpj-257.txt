Section 15.6 Eliminating redundant full laziness
257
numerical value. No heap will be consumed. A fully lazy lambda-lifter
will produce two combinators:
$S1 if-v-zero x = if-v-zero (+ x 1) (+ x 2)
$S v
= $S1 (IF (= v 0))
and will replace the Av abstraction with $S. The compiler will now have to
generate code for $S1 to construct (+ x 1) and (+ x 2) in the heap before
unwinding the spine of the if-v-zero function, about which it now has no
information.
These objections are substantial, but on the other hand full laziness can save
very large amounts of time and space in some cases. Further study reveals,
however, that the fully lazy lambda-lifter often abstracts out an expression
when nothing is gained by so doing. Hence we could improve the trans-
formation by selectively performing ordinary (rather than fully lazy) lambda-
lifting where nothing is gained by the fully lazy method. This section is
therefore devoted to identifying certain situations where fully lazy lambda-
lifting gains nothing, and is based on work by Fairbairn [1985] and Hudak and
Goldberg [1985].
15.6.1 Functions Applied to Too Few Arguments
In the example above, the fully lazy lambda-lifter took out (IF (= v 0)) as an
extra parameter. However, IF requires 3 arguments to reduce, so no work is
saved by sharing this expression. More precisely, just as much work would be
saved by taking out (= v 0) as an extra parameter, thus
$T V
$T1 v-zero x = IF v-zero (+ x 1) (+ x 2)
= $T1 (= v 0)
and replacing the Av abstraction with $T. In a straightforward template-
instantiation implementation some space would be saved by taking out the
larger expression (since the application of IF to (= v 0) would only be built
Chapter 20).
once), but even this is not always true in a compiled implementation (see
The conclusion is that no work is saved by abstracting out expressions which
consist of a built-in operator or supercombinator applied to too few
arguments. As the example shows, however, the arguments of the function
may be considered for abstraction.
This applies equally to constant expressions which might otherwise be
candidates for a new supercombinator definition (see Section 15.5.2). As an
illustration of this, consider the example in Section 15.4, where. the $foldiPlus0
and $count1 supercombinators are irreducible; nothing is gained by treating
them as separate supercombinators.
