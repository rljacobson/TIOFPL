204
Chapter 11 Selecting the Next Redex
Specifically, we hold two pointers, F and B (for forward and backward). To
begin with, F points to the root of the expression, and B points to a unique cell
called TOP. This initial set-up is shown in the left-hand column of Figure 11.3,
where we have depicted the spine vertically on the page. Then to unwind one
level, we set
F
= Left( F )
Left( F ) = B
B
simultaneously
where Left( F ) means the left field of the node F points to. This operation is
shown taking place in the subsequent columns of Figure 11.3. When we reach
the tip, F will point to the tip and B will point back up the trail of reversed
pointers to the root. Thus the vertebrae nodes and the arguments to the
function can be found by following pointers from B.
When going back up (rewinding) the spine, we simply reverse the
operation, putting the pointers back into their original state. We can easily tell
when we reach the top because B becomes TOP.
B-> TOP
TOP
TOP
TOP
F
DR
B-
-@-R
@-
R
@->R
Q
F-
@-
Q
B
-@-
->Q
@-
Q
@-
P
. P
F
-@-P
B
F
Initial
Step 1
Step 2
Step 3
Figure 11.3 Pointer-reversal in action on (f P Q R)
11.6.2 Argument Evaluation using Pointer-reversal
There is a slight problem when we need to evaluate the arguments to a strict
built-in function. Consider the expression (IF (= x 0) P Q). When we have
unwound the spine to find the IF, the graph looks like the left column of Figure
11.4. Now we need to evaluate the argument, so we must unwind the spine of
the argument. Unfortunately, we cannot initialize B with TOP, because we
would then not be able to find our way back to the parent spine. Instead we
simply pointer-reverse our way into the argument spine, but marking the
parent spine vertebrae, in some way. To 'turn the corner' into the argument
spine, we perform the following operations:
F
= Right( B ) )
Right( B ) = F
Mark( B )
simultaneously
