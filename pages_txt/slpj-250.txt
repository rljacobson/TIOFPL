250
Chapter 15 Fully Lazy Lambda-lifting
This example also illustrates the utility making a maximal constant
expression into a supercombinator ($fac1000 in this case), rather than
abstracting it out as a parameter.
Our strategy now breaks into two phases:
(i) Float out letrec (and let) definitions as far as possible.
(ii) Perform fully lazy lambda-lifting.
How far out can a letrec definition be floated? The value of a variable bound in
a letrec will generally depend on the values of certain free variables. We call
the set of free variables on which a variable x depends, x's free variable set.
Once we know x's free variable set we can float the definition of x outwards
until the next enclosing lambda abstraction binds one of the variables in the
free variable set.
This step has the additional benefit that definitions which have no free
variables at all will be floated out to the top level, where they will be turned
into supercombinators directly.
15.4 A Larger Example
We shall now work through a larger example to show the lambda-lifting
algorithm with full laziness modifications in action.
The example is the function 'foldl', being used to add up the numbers
between 1 and 100.
sumInts n = foldl (+) 0 (count 1 n)
count n m = [].
n.>m
count n m = n : count (n + 1) m
fold! op base []
= base
foldl op base (x:xs) = foldl op (op base x) xs
sumInts 100
Translating the example into the enriched lambda calculus, we get
letrec
sumints = An. fold! + 0 (count 1 n)
count = An . Am . IF (> n m) NIL (CONS n (count (+ n 1) m))
foldl
= \op . Abase. Axs . IF (= xs NIL)
base
in sumints 100
(foldl op (op base (HEAD xs)) (TAIL xs))
