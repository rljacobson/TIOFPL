148
Chapter 8 Polymorphic Type-checking
or to parameterize foldr with the type variables A and B. Precisely the same
code is executed whatever the types A and B (at least in a naive implement
tation of the compiler), and it would be artificial to duplicate that code, or
name it differently for each pair of types.
The terminology is also sometimes (perhaps unfortunately) applied to
types themselves. For example, it is said that foldr possesses a 'polymorphic'
type, meaning that its type is expressed with schematic variables. (Going by
etymology, 'polymorphic' should mean 'of many forms', and it is precisely in
order to identify a single form that we use an expression with schematic
variables.)
A polymorphic type discipline was first worked out for the language ML
around 1976, and since then has been incorporated in a number of functional
and imperative languages. In pragmatic terms at least, polymorphism repre-
sents a significant advance over the type disciplines of languages such as
Pascal or Algol 68.
8.3 Type Inference
This type discipline is not only polymorphic; it has the property that the only
places in a program where we have to mention types at all are in the type
definitions themselves. The type-checker is able, as part of a single process,
(i) to determine whether the program is well typed; and
if the program is well typed, to determine the type of any expression in the
E
program.
(Of course, to make a program easier to understand we should almost always
accompany a definition with a specification of the type of the defined entity.)
Before delving into the details of type-checking, we should ask ourselves
how we can informally deduce the types of functions given only their defining
equations.
Consider the definition:
isdigit ch = (code '0' <= x) & (x <= code '9')
where x = code ch
From the right-hand side of the definition we can see that, if the function is
well defined at all, its value must be a truth-value, since the outermost
operator & (conjunction) produces truth-values. Moreover, the infix operator
<= which supplies its values as arguments to & also produces truth-values. (So
we can see that & is used consistently with its type.) The arguments to <= must
both have the type num, and this is clearly the case for the actual arguments,
namely (code '0') and (code '9'). It follows that x must be a number, and for
this to hold, ch must have type char. So the right-hand side of the definition is
