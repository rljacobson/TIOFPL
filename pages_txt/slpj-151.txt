150
Chapter 8 Polymorphic Type-checking
8.4 The Intermediate Language
The language for which we will construct a type-checker is the language of the
lambda calculus. We will use the form of that language in which recursion is
expressed using the letrec construct rather than by using the Y combinator.
Briefly, the forms of expression are these:
(ii)
i) Variables: x, y, etc.
(ifi)
)Lambda abstractions: Ax . E
Application: E1 E2
Simultaneous definitions (let-expressions):
let x1 = E1
Xk = Ek
in E
(v) Mutual recursion (letrec-expressions):
letrec x1 = E1
XK = Ek
in E
The type-checker should be invoked when the source program has been
brought into this form, and before lambda-lifting, or transformation to a
supercombinator program (see Chapter 13). It is, however, important that
the program is subjected to the dependency analysis referred to in Section 6.2.8
before type-checking. This is for the following reason. If we include in a
letrec-expression a definition whose right-hand side does not 'really' depend
on the other names defined in the letrec, we may not be able to type-check the
program at all. (For an explanation of this, see Mycroft [1984].)
The most conspicuous absentee from this list of constructs is anything
corresponding to function definitions by pattern-matching. But as is shown in
Chapters 4-6, we can replace such definitions by using instead built-in case
functions associated with the type-forming operations defined by the
programmer or supplied by the system. The names of these case functions,
and indeed of the associated discriminators and selectors, can be regarded as
the names of variables with predeclared types. Hence they are of no special
interest in the type-checker.
(In the same vein, we might have taken the easy way out in our treatment of
recursion, and used the Y combinator, regarding this as having a priori the
predeclared type
Y :: (A -> A) -> A, for all types A
However, the issues involved in the problem of how a type discipline should
treat recursion are rather subtle. Although the solution we have adopted is in
fact precisely equivalent to adoption of the Y combinator for the expression of
