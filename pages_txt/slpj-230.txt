230
Chapter 13 Supercombinators and Lambda-lifting
eliminate the definition of $T altogether (since it is the same as $S). This
would not have been possible had we put the extra parameters x and y for $S in
the other order. Hence we should order the free variables, with those bound at
inner levels coming last in the parameter list of the supercombinator.
This suggests that we could associate a lexical level-number with each
lambda abstraction, so that the lexical level-number of a lambda abstraction is
defined to be one more than the number of textually enclosing lambdas (the
experienced reader will recognize these level-numbers as de Bruijn numbers
[de Bruijn, 1972]). For example, consider
(Ax. Ay . + x (* y y))
The Ax abstraction is at level 1, while the Ay abstraction is at level 2 (since it is
enclosed by a xx abstraction).
The lexical level of a variable is now defined to be the lexical level of the
lambda abstraction which binds it. If the level of x is less than y we say that x is
freer than y, since it is bound further out.
Constants (including built-in functions such as +, and previously generated
supercombinators) can be regarded as being bound at the top level, and so
should be at level 0. There is, of course, no need to abstract out constants as
extra parameters during lambda-lifting.
To summarize:
(i) The level-number of a lambda abstraction is one more than the number
of lambda abstractions which textually enclose it. If there is none, then
its level-number is 1.
(ii) The level-number of a variable is the level-number of the lambda
abstraction which binds it.
(iii) The level-number of a constant is 0.
It is simple to determine the lexical levels of all variables in a single
tree-walk over the expression. On the way down the tree the level-numbers of
the lambdas are recorded in a sort of environment, while on the way up the
level of each variable is computed, using the environment.
Now to maximize the chances of being able to apply n-reduction we can
simply sort the extra parameters in increasing order of lexical level.
13.4 Implementing a Supercombinator Program
All the preceding work has shown how to compile our program into a set of
supercombinator definitions. What happens now? We have spoken of the
supercombinators being compiled in some way, but in fact there is a spectrum
of possible implementations:
(i) We could keep the body of the supercombinator as a tree, and instantiate
it using a function similar to Instantiate. This is the supercombinator
equivalent of the lambda reducer in the last chapter, and all the
