Section 16.1 The SK compilation scheme
265
16.1.3 Implementations
The combinators S, K, I, etc. are simply particular examples of super-
combinators, so the reduction machine required to execute them is a cut-
down version of the supercombinator reduction machine. The method of
finding the next redex by sliding down the spine, the choice of a spine stack or
pointer reversal, the implementation of Y, the use of indirection nodes, and so
on, all apply exactly as described in Chapter 12. The main differences are that
(i) the combinators are implemented directly as built-in functions by the
reduction machine, rather than indirectly via a general supercombinator
body instantiation mechanism;
(ii) the reduction machine does not need to implement the template-
instantiation mechanism described in Section 12.1, since there are no
lambda abstractions to instantiate.
This means that a graph reducer based on SK reduction is one of the simplest
implementations of graph reduction.
The implementations of Turner's languages SASL [Turner, 1976] and
Miranda are based on SK combinators, exactly as described above, with some
minor enhancements (especially to assist pattern-matching).
The family of SK combinators can be thought of as the built-in instruction
set of a graph reduction machine, and. thus amenable to direct implement
tation in hardware. This idea has been taken up in two machines designed
specifically to implement SK reduction, the Cambridge SKIM machine
[Stoye, 1985 and 1983] and Burroughs' NORMA machine [Scheevel, 1986].
16.1.4 SK Combinators Perform Lazy Instantiation
A program compiled into SK combinators executes even more lazily than a
definition
supercombinator program. For example, consider the supercombinator
$F x = IF ec et et
where et and er are textually large expressions. When $F is applied, new
instances of et and er are constructed, despite the fact that one or other will
certainly be discarded. Let us instead compile it using SK combinators:
Ax . IF ec et et
S
S ( Ax. IF ec e:) (1x.e.).
S
S (S (Ax. IF ec) (Ax.e:)) (Ax.e()
S (S (S (K IF) (Ax.ec)) (1x.e.)) (1x.e:)
Suppose that (Ax. ec) compiles to a combinator expression cc, (Ax. et) compiles
to ct, and (Ax. e:) compiles to cr. Then the whole expression compiles to
S (S (S (K IF) Cc) ct) Cr
