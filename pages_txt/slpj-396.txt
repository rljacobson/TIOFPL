398
Chapter 23 The Pragmatics of Graph Reduction
because the result message does not depend on the value of the number; lazy
evaluation has postponed the evaluation of (charsToNum inputStream) until
after the result message has been output.
This is an example of a case when we want some control over the evaluation
order in order to make the program behave correctly in time. In this case there
is a straightforward solution. What is needed is a built-in function seq, with
the behavior
seq ly = 1
seq x y = y
Pragmatically,
seq evaluates its first argument, discards it,
and then returns its second argument.
We can now rewrite double, thus:
double inputStream
=
"Enter number: " ++
seq n "Result is: " +4
numToChars (2*n) ++
double restinput
where
(n, restinput) = charToNum inputStream
Now the 'Result is:' message is made to depend on the value of n, so the
message will not be output until n has been evaluated (and hence input).
This is the first example of a situation in which lazy evaluation gives slightly
unexpected results. In this case, however, it is possible to reason about the
order in which results appear in the output stream, so the problem is not
nearly so serious as those which follow.
23.2 The Delicacy of Full Laziness
We have described what it means for an implementation to be lazy or fully
lazy only in very operational terms, and they are difficult concepts to reason
about. Programs that look lazy sometimes turn out not to be for subtle
reasons, and we will see some examples in the following sections.
23.2.1 Ordering of Parameters
We recall the Miranda program from Chapter 15 which we used to develop
the concept of full laziness:
f
t 6 =
g x y = y + sqrt x
(f 1) + (f 2)
