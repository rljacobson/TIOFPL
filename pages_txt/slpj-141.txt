140
Chapter 8 Polymorphic Type-checking
Given the informal spirit of this book, and its concentration on setting up
intuitions rather than on attaining impregnable conceptual rigor, it is not
appropriate to proceed 'from the ground up'. Instead, we shall assume that
the reader already has some understanding of the notion of a type, and wishes
to see how that notion can be applied in practice. Nevertheless, some
cautionary remarks may be in order, and they are made at the end of the
chapter.
This chapter is organized as follows. Section 8.1 reviews some basic
concepts, and notations for types. Section 8.2 illustrates the concept of
polymorphism, using several examples. Section 8.3 shows in an informal way
how types may be inferred from the structure of a definition. Section 8.4 sets
out the language for which we will build a type-checker. Section 8.5 considers
the detailed type structure of expressions in the language, and attempts to
clarify the rules of type inference, which are summarized in Section 8.6.
Section 8.7 contains the cautionary remarks referred to before.
Important note: The type-checker described here is actually somewhat
more liberal than that of the Miranda compiler itself, in that it will succeed in
type-checking some programs which the Miranda compiler would reject. This
difference is explained in Section 8.5.5. The Miranda type-checker is also
considerably more sophisticated than the one we describe here, because it
supports features, such as abstract data types and a module structure, which
are beyond the scope of this book.
8.1 Informal Notation for Types
The types with which we are concerned in functional programming include
ground types such as characters, numbers and booleans, types of tuples, lists
and, of course, functions. To talk about these types, we will use the following
notation. Capital letters will be used for type variables. A type variable A
stands for a type in much the same way that a numerical variable n stands for a
number in mathematics. Lower-case letters will be used for the elements of
types. The notation
a :: A
means that a has type A. For example, 42::num, 'f'::char, where num is the
type of numbers, and char is the type of characters. (Note: the notation used
for types in this chapter differs from that of Miranda - in Miranda an upper
case letter cannot stand for a type.)
8.1.1 Tuples
Given types A and B, (A,B) is the type of ordered pairs (a,b) where a::A, and
b::B. Using Descartes' terminology, a is the first coordinate of (a,b), and b is
the second. More generally, ifn = 2 and A1,. . ., An are types, then
