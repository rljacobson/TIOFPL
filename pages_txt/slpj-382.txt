384
Chapter 22 Strictness Analysis
We now have a formal way of posing the question, namely, 'given a
function f, does (f 1) = 1?' We can depict the question using the now-familiar
diagram:
f 1
standard
abstract interpretation
interpretation
(ordinary
(evaluation using
evaluation)
rule of signs)
Value of
abstraction
(1 1)
(0, 1}
abs
What should the abstraction map, and abstract domain, be? It is clear that
we want the abstraction function abs to distinguish between i and all other
elements, so that
abs | = 0
abs x = 1 if x + 1
The abstract domain needs only two elements, which we arbitrarily call 0
and 1. Using the notation established earlier, f is strict if and only if
Eval[[ fl ] = 1
which is true if and only if
abs Eval[[ f 1 ] = 0
All that remains is to pick a suitable abstract interpretation, which we call
Eval#, to distinguish it from the abstract interpretation Eval% used for the rule
of signs.
22.2.2 Choosing an Appropriate Abstract Interpretation
The abstract interpretation should have the following two properties:
(i) It must be 'safe'. By this we mean that it should never suggest that a
function is strict, when in reality it is not.
(ii) It should be as 'informative' as possible, subject to (i). That is, the
abstract interpretation should detect strict functions in as many cases as
possible.
As in the case of the rule of signs, we can give formal expression to the safety
requirement:
abs Eval[[ E ]I s Eval#{[ E I
for any expression E.
