Section 23.2 The delicacy of full laziness
399
Now consider a rather similar program in which g takes its parameters in a
different order:
fy
=gy4
gy x = y + sqrt x
(f 1) + (f 2)
We might hope that the (sqrt 4) would only be computed once, as before,
but it will in fact be computed twice. This is because (sqrt x) is no longer an
MFE of any lambda expression (try it!). This, in turn, is a consequence of the
ordering of the parameters of g.
We might take this as a clue to the compiler to put g's parameters in the
other order and change all the calls of g appropriately. But suppose the
definition of g was
g x y = sqrt x + sqrt y
Now no order is 'right', and its laziness depends on the way it is used. If g is
used many times with its first parameter fixed then all is well, but if it is used
many times with its second parameter fixed we will recompute (sqrt y) each
time.
There is an asymmetry in the laziness of g with respect to different
parameters. The onus is on the programmer to put the parameters to his
functions in the 'best' order to maximize laziness.
23.2.2 Full Laziness and Recursion
Consider the following Miranda program (due to William Stoye):
f x0 = 0
f x n = sqrt x + f x (n-1)
f 4 1000
How many times does the (sqrt 4) get evaluated, once or 1000 times? The
equivalent:
answer is 1000 times. Now consider another program, which is plainly
f x = g where g 0 = 0
g n = sqrt x + g (n-1)
f 4 1000
