Section 6.1 Transforming pattern-matching lambda abstractions
105
all, we recall the semantics of (Ak. E) from Section 4.3.2:
Eval[[ Ak. E ]] a = Eval[[ E ]]
Eval[[ Ak. E ] a = FAIL
if a = Eval [ k ]
Eval[[ Ak. E ]] 1 = 1
if a + Eval[[ k ]] and a + 1.
Operationally, (\k. E) tests whether its argument is equal to k; if so, it returns
E, if not it returns FAIL. This simple test can be carried out by the built-in IF
function, using the following transformation:
(Ak. E) = (Av. IF (= k v) E FAIL)
where v is a new variable which does not occur free in E. It should be clear
(and can be proved, using the semantics of (\k. E) and the semantics of IF and
=) that these two lambda abstractions have the same meaning, and hence are
equivalent. Notice the way in which we introduce a new Av abstraction, so that
we can name the argument directly in its body.
As an example, consider the Miranda definition
flip 0 = 1
flip 1 = 0
This will be translated to
flip = AX.( ((10. 1) x)
0 ((x1.0) x)
[ ERROR)
Now, transforming out the pattern-matching lambda abstractions gives
flip = Ax.( ((Av. IF (= 0 v) 1 FAIL) x)
I ((\v. IF (= 1 v) 0 FAIL) x)
[ ERROR)
It is now easy to verify that
flip 0
flip 1
0
flip 2
ERROR
6.1.2 Product-constructor Patterns
Next we consider the case of (\p. E), where p is the product pattern
(t pi ... pr), and t is a product constructor of arity r. As before, we recall its
semantics (Section 4.3.4):
Eval[[ A(t pi . . . pr). E ]] a = Eval[[ Api. . .Apr. E ]] (SEL-t-1 a)
(SEL-t-r a)
To implement this semantics, we invent a new
function
