28
Chapter 2 The Lambda Calculus
defined as a lambda abstraction, without using recursion!
Y = (1h. (1x.h (x x)) (Ax.h (x x)))
To see that Y has the required property, let us evaluate
Y H
H
(Ah. (Ax.h (x x)) (1x.h (x x))) H
(1x. H (x x)) (AX.H (x x))
H ((\X. H (x x)) (Ax.H (x x)))
H (Y H)
and we are home and dry.
For those interested in polymorphic typing (see Chapter 8), the only respect
in which Y might be considered an 'improper' lambda abstraction is that the
subexpression (Ax. h (x x)) does not have a finite type.
The fact that Y can be defined as a lambda abstraction is truly remarkable
from a mathematical point of view. From an implementation point of view,
however, it is rather inefficient to implement Y using its lambda abstraction,
and most implementations provide Y as a built-in function with the reduction
rule
YH - H (Y H)
We mentioned above that a function may have more than one fixed point,
so the question arises of which fixed point Y produces. It seems to be the 'right'
one, in the sense that the reduction sequence of (FAC 1) given above does
mirror our intuitive understanding of recursion, but this is hardly satisfactory
from a mathematical point of view. The answer is to be found in domain
theory, and the solution produced by (Y H) turns out to be the unique least
fixpoint of H [Stoy, 1981], where 'least' is used in a technical domain-theoretic
sense.
2.5 The Denotational Semantic's of the Lambda Calculus
There are two ways of looking at a function: as an algorithm which will
produce a value given an argument, or as a set of ordered argument-value
pairs.
The first view is 'dynamic' or operational, in that it sees a function as a
sequence of operations in time. The second view is 'static' or denotational: the
function is regarded as a fixed set of associations between arguments and the
corresponding values.
In the previous three sections we have seen how an expression may be
evaluated by the repeated application of reduction rules. These rules
prescribe purely syntactic transformations on permitted expressions, without
reference to what the expressions 'mean'; and indeed the lambda calculus can
be regarded as a formal system for manipulating syntactic symbols. Never-
theless, the development of the conversion rules was based on our intuitions
