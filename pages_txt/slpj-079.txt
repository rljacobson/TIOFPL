Five
EFFICIENT COMPILATION OF
PATTERN-MATCHING
Philip Wadler
This chapter shows how to compile function definitions with pattern-matching
into case-expressions that can be efficiently evaluated. Previously, pattern-
matching has been formally defined, and we have seen some examples of
function definitions with pattern-matching.
5.1 Introduction and Examples
We begin by reviewing two examples.
The first example shows pattern-matching on more than one pattern. The
function call (mappairs f xs ys) applies the function f to corresponding pairs
from the lists xs and ys.
mappairs f [] ys
mappairs f (x:xs) []
=
=
[]
mappairs f (x:xs) (y:ys) = f x y : mappairs f xs ys
For example, (mappairs (+) [1,2] [3,4]) returns [4,6]. The definition given
here specifies that if the argument lists are not the same length, then the
result will be as long as the shorter of the two lists. For example,
(mappairs (+) [1,2] [3,4,5]) also returns [4,6].
The simplest way to think of pattern-matching is as trying to match each
equation in turn. Within each equation, patterns are matched from left to
right. For example, evaluating (mappairs (+) [1,2] [3,4] first matches (+)
against f in the first equation, which succeeds, and then matches [1,2] against
78
