42 Chapter 3 Translating a High-level Functional Language into the Lambda Calculus
Generalizing this idea, we can now define the semantics of a simple let-
expression as follows:
(let v = B in E) = ((\v. E) B)
(We use the symbol = to denote the equivalence of two expressions.) That
is all that is needed to define its semantics! By repeated application of this
equivalence, we could eliminate all simple let-expressions from an expression,
in favor of lambda abstractions.
3.2.2 Simple letrec-expressions
expression:
The syntax of a simple letrec-expression is similar to that of a simple let-
letrec V1 = E1
V2 = E2
. .
Vn = En
in
E
where the vi are variables, and E, E1, . .., En are expressions in the (enriched)
lambda notation. We will sometimes abbreviate 'letrec-expression' to 'letrec'
(and 'let-expression' to 'let'), where no ambiguity arises.
The term 'letrec' is short for 'let recursively', and it introduces possibly
recursive bindings for a number of variables vi. The difference between lets
and letrecs is that the vi are in scope in the E: (as well as E) of a letrec. To take an
example, the expression
letrec factorial = An. IF (= n 0) 1 (* n (factorial (- n 1)))
in
factorial 4
defines a recursive function factorial, and applies it to the argument 4. The
value of the expression is thus 24.
Like let-expressions, letrec-expressions can appear embedded anywhere in
an expression. Unlike let-expressions, however, it is essential to allow
multiple definitions in a letrec-expression, so as to permit mutual recursion.
This is demonstrated by the following example:
letrec f = ...f ...g . . .
g = .. .f. .
in . .
Here, f refers to itself and g, and g refers to f. This cannot be transformed into
a nested pair of letrecs, because then either g would not be in scope in the body
off, or vice versa.
It is easy to provide a semantics for a letrec with only a single definition,
using the Y operator developed in Section 2.4. In particular,
(letrec v = B in E) = (let v = Y (\v.B) in E)
