Thirteen
SUPERCOMBINATORS AND
LAMBDA-LIFTING
Since the operation of constructing an instance of a lambda body while
substituting for the formal parameter is the fundamental operation of our
implementation, we will now consider how to make it more efficient.
In this chapter and the next we will show how to transform a lambda
expression into a form in which the lambda abstractions are particularly easy
to
instantiate. These special lambda abstractions are called
supercombinators, and the transformation is called lambda-lifting. Then, in
Chapter 15, we will show how to enhance the lambda-lifting transformation to
be fully lazy, a property alluded to in Section 12.1.3. The terms
'supercombinator' and 'fully lazy' were both coined by Hughes, who was the
first to combine full laziness with lambda-lifting [Hughes, 1984].
13.1 The Idea of Compilation
The operation of instantiating the body of a lambda abstraction was called
Instantiate in the previous chapter, and was performed by a recursive tree-walk
over the lambda body. Such an Instantiate operation is rather inefficient for the
following reasons:
(i) at each node of the body, Instantiate has to do a case analysis on the tag of
the node;
(ii) at each variable node Instantiate has to test if the node is the formal
parameter; a similar test has to be made at each lambda node;
new instances of subexpressions containing no free occurrences of the
formal parameter will be constructed when they could safely and
220
