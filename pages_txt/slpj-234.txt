234
Chapter 14 Recursive Supercombinators
just reinvented the letrec! The graph can be described by the letrec expression
letrec a = c b
b = c 3
C = f b
in a
This gives us the idea that letrec expressions can be regarded as textual
descriptions of a cyclic graph. Hence a letrec in a supercombinator body can be
regarded as the description of a graphical portion of the supercombinator
body.
Up to now we have considered a supercombinator body to be a tree, and
applying the supercombinator involves constructing a new instance of the
tree. Now we see that allowing letrecs in a supercombinator body allows the
body to be a graph, and applying such a supercombinator involves con-
structing a new instance of this graph. We say that such a supercombinator has
a graphical body.
For example, consider the following supercombinator definition:
$Y f = letrec yf = f yf
in yf
This is a definition of the cyclic version of the familiar Y combinator, whose
body is a graph. When $Y is applied, we make an instance of the graph,
substituting for occurrences of the formal parameter, f. During the
instantiation we must be careful to preserve the cycles of the original graph.
A compiling implementation would compile code which would, when
executed, construct the graph with the appropriate substitutions made. The
way in which this is done is described in Chapter 18.
In a similar way we can allow supercombinator bodies to contain let-
expressions, regarding them as descriptions of (acyclic) graphs. This will
actually save us reductions, because we can now describe directly expressions
such as
let x = 3 in E
where we would previously have translated this to
(AX. E) 3
which requires a reduction to explicate.
To summarize, we see that
(i) it is quite easy to extend supercombinators to allow them to have bodies
which are general graphs, rather than being restricted to trees;
(ii) graphical supercombinator bodies can easily be described using a letrec
(or a let in the case of acyclic bodies);
(iii) to instantiate a letrec (or let), we simply construct the graph described by
the letrec (or let);
(iv) using graphical bodies can save us reductions.
