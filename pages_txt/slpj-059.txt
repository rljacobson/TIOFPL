58
Chapter 4 Structured Types and the Semantics of Pattern-matching
Another point, illustrated by the first factorial equation, is that a pattern
may consist of a literal constant, such as a number or character.
As another example, consider the Miranda function definition
lastElt (x:[]) = x
lastElt (x:xs) = lastElt xs
The function call (lastElt xs) returns the last element of the list xs. Again, the
order of the equations is significant, since the patterns overlap. Furthermore,
the first pattern is an example of a nested pattern, in which the pattern [] is
nested inside the pattern (x:[]). Finally, the equations are not exhaustive,
since neither pattern matches the argument []. If lastElt is applied to [ ] some
sort of error should be reported.
Pattern-matching can apply to several arguments, as the following Miranda
definition shows:
xor False y
=y
xor True False = True
xor True True = False
Another feature of Miranda that is closely connected with pattern-
matching is conditional equations, which control the selection of alternatives
by the use of guards. We could, for example, rewrite the factorial function in
the following way:
factorial n = 1,
n=0
= n * factorial (n-1)
A single left-hand side governs several alternatives, which together constitute
the right-hand side. In this case there is only one guard, namely the boolean-
valued expression 'n=0', which appears following a comma. Guards are
evaluated one at a time, beginning at the top, and when a guard evaluates to
True, the corresponding alternative expression is selected. The guard may be
omitted in the final right-hand side, giving an 'otherwise' case (equivalent to a
guard of True).
The factorial example shows, incidentally, that a constant appearing in a
pattern can easily be eliminated by replacing it with a variable and adding a
guard to the equation instead.
Conditional equations interact with pattern-matching, as demonstrated in
the next example. The function funnyLastElt returns the last element of its
argument list, except that if a negative element is encountered then it is
returned instead:
funnyLastElt (x:xs) = x,
x<0
funnyLastElt (x:[]) = x
funnyLastElt (x:xs) = funnyLastElt xs
Pattern-matching proceeds, as usual, from top to bottom; when a left-hand
side matches the argument, the guarded alternative(s) are tried, from top to
bottom. If none of the guards is True, then pattern-matching continues,
