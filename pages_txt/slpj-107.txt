106
Chapter 6 Transforming the Enriched Lambda Calculus
UNPACK-PRODUCT-t for each product constructor t, and use it in this
transformation:
(A(t p1 .. . Pr). E) = UNPACK-PRODUCT-t (Ap1. . . Apr. E)
The idea is that UNPACK-PRODUCT-t takes two arguments, a function and a
structured object, and applies the function to the lazily selected components
of the object. It is defined by the following semantic equation:
UNPACK-PRODUCT-t f a = f (SEL-t-1 a) . . . (SEL-t-r a)
It can easily be shown that the transformation is valid, by comparing the
semantics of the expression before and after the transformation.
The right-hand side of the transformation still has pattern-matching lambda
abstractions in it, but they are smaller than the one we began with, and
repeated use of the rules for transforming pattern-matching lambda abstract
tions will eliminate them.
As an example, consider the function addPair, which adds together the
elements of a pair:
addPair = \(PAIR x y). + x y
This will be transformed to
addPair = UNPACK-PRODUCT-PAIR (Ax. Ay . + x y)
We can check that it gives the right results by reducing (addPair (PAIR 3 4)):
addPair (PAIR 3 4)
UNPACK-PRODUCT-PAIR (Ax. Ay. + x y) (PAIR 3 4)
(Ax. Ay . + x y) (SEL-PAIR-1 (PAIR 3 4)) (SEL-PAIR-2 (PAIR 3 4))
(Ay. + (SEL-PAIR-1 (PAIR 3 4)) y) (SEL-PAIR-2 (PAIR 3 4))
utttttt
+ (SEL-PAIR-1 (PAIR 3 4)) (SEL-PAIR-2 (PAIR 3 4))
+ 3 (SEL-PAIR-2 (PAIR 3 4))
+
3 4
7
6.1.3 Sum-constructor Patterns
Finally, consider the case of (Ap. E), where p is a sum pattern (s p1 . . . Pr), and
s is a sum constructor of arity r. The semantics of such lambda abstractions
was derived in Section 4.3.3:
Evall[ A(s pi . . . pr). E ]] (s a1 . . . a.) = Eval[[ Api. . .Apr. E ]] a1 . .. ar
Eval[[ A(s pi . . . p.). E ]] (s' a1 . . . ar)= FAIL
if s + s'
Evall[ A(s p1 . . . P.). E I L
= 1
We can make a very similar transformation to the product-constructor case,
leaving all the hard work to a new function UNPACK-SUM-s:
(\(s P1 . . . Pr). E) = UNPACK-SUM-s (Ap1. . .Apr. E)
