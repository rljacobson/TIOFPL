160
Chapter 8 Polymorphic Type-checking
then the expression is well typed. For the structure of that expression does not
constrain X to be instantiated differently at the different occurrences of prxi.
When we are type-checking the body B of a let or letrec definition, we must
therefore distinguish the type variables in the type derived for a defined name
according to whether they may or may not be differently instantiated at the
various occurrences of the name. Variables of the former kind are those that
do not occur in the type of any constrained variable in the definition of the
name. A constrained variable is one which is a bound variable of a lambda
abstraction enclosing B, or one defined in a letrec-expression enclosing B in
one of its right-hand sides.
This is one of the points at which the type regime of Miranda differs from
that of the type checker described here. The Miranda compiler requires that
all occurrences of a variable bound in a local definition share a single type.
This has the effect that local definitions cannot introduce new polymorphism
into a program. We will not explore the implications of this difference here-
the type checking rules given in this and the following chapter are for a
standard implementation of the Milner type discipline.
We have used the notion of type trees to help elucidate the type structure of
expressions, and guide us towards a sharper view of the rules we use when
constructing and checking the types of expressions. In the next section we
summarize those rules. With luck, the device will have served its purpose, and
we can then consider how to turn our intuitions into algorithms.
8.6 Summary of Rules for Correct Typing
The following rules are intended to describe the local 'look' of the type
structure of a well-typed expression. To lighten the notational burden, we
shall sometimes simplify the expression whose type tree is depicted in the
figures. The simplifications are indicated in the commentary.
8.6.1 Rule for Applications
A -> B
A
@
B
8.6.2 Rule for Lambda Abstractions
. . . X :: A . . . X :: A .. .
B
-AX.
A -> B
Note that all occurrences of the variable x bound by the abstraction must have
the same type.
