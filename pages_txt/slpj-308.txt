310
Chapter 18 The G-machine
Xr just computes the augmented p and the new value of d, returning them as a
pair (p', d'). The [] bracket updates p to include all the new information.
The final 'SLIDE (d'-d)' slides down the top element of the stack,
squeezing out the pointers to the Et.
Warning: there will be a problem if a definition body consists of a single
variable name bound in the same letrec; for example
letrec x = y
in E
y = CONS 1 y
This gives a problem because UPDATE will try to update one hole with
another. However, the definition of x will be removed at an earlier stage in the
of x by y in E.
compiler, by the optimization of Section 14.7.3, which replaces occurrences
CI E Ipd
Constructs the graph for an instance of E in a context given by p and d.
It leaves a pointer to the graph on top of the stack.
cli led
= PUSHINT i
CI f Ipd
=
=
PUSHGLOBAL f
C[ x Ipd
PUSH (d - p x)
CI E1 E2 1 p d
C[[ let x=Ex in E ]] p d
= C[[ E2 ] p d; C[[ E1 1 p (d+1); MKAP
= CI Ex I pd;
C[[ letrec D in E ]] p d
CI E ]] p[x=d+1] (d+1); SLIDE 1
= CLetrec[ D ] p' d'; C[[ E ] p' d'; SLIDE (d'-d)
where
(p', d') = Xr[ D ]pd
Figure 18.10 The C compilation scheme
CLetrec[[ D 1 p d
Takes a mutually recursive set of definitions D, constructs an instance of
each body, and leaves the pointers to the instances on top of the stack.
CLetrec |
X1 = Et | p d = ALLOC n;
X2
CI E1 1 p d; UPDATE n;
CI E2 ] p d; UPDATE n-1;
= En_
CI En I p d; UPDATE 1;
Xr[[ D Ipd
definitions D.
Returns a pair (p', d') which gives the context augmented by the
ed = ( prx1=d+17, d+n )
x2=d+2
Xn=d+n
Figure 18.11 Auxiliary compilation schemes CLetrec and Xr
