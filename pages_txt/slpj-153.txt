152
Chapter 8 Polymorphic Type-checking
TO, T1, ..., T7 to the nodes of the tree. Drawing the tree in a slightly
different way to use less space, we get:
x:: TO z:: T1
@
y:: T2 z:: T3
-@
T4
T5
@
T6
Ax . Ay . Az .
LL
In order to be sure than an expression (E1 E2) of application form is well typed,
the function E: must have a functional type (A -> B), where Ez is of type A,
and (E1 E2) is of type B. So whatever else is clear, the types of the sub-
expressions must be related by the following equations:
TO = T1 -
-> T4
T2 = T3 -> T5
T4 = T5 -> T6
Substituting back in the tree, we get
x:: T1 -> T5 -> T6 z:: T1
y:: T3 -> T5 z:: T3
@
@
T5 -> T6
T5
@
T6
Ax. Ay . AZ.
T7
Now what should we say about the abstraction? Certainly T7 will have the
form
(T1 -> T5 -> T6) -> (13 -> T5) ->
but it is not immediately clear what to do about the two type labels T1 and T3
for the two occurrences of the variable z. It would be simple if we could see
some reason to say that the labels T1 and T3 must stand for the same type. For
then we could add two more equations to the set above, namely
T1 = T3
17 = (TO -> T2 -> T1 -> T6)
and then on substituting back in the tree we would get
x:: T1 -> T5 -> T6 z:: T1
y:: T1 -> T5 z:: T1
@
@
T5 -> T6
T5
@
T6
Ax. Ay . Az.
(T1 -> T5 -> T6) -> (T1 -> T5) -> T1 -> T6
On the other hand, we have already seen in Section 8.2.3 expressions such as
1 . code . I
