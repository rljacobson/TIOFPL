90
Chapter 5 Efficient Compilation of Pattern-matching
In general, a call of match where some equations begin with variables and
some with constructors may be transformed as follows. Say we are given a call
of match of the form
match us qs E
The equation list qs may be partitioned into k lists qs1, ..., qsk such that
qs = qs1 ++ ... ++ qSk
The partition should be chosen so that each qs either has every equation
beginning with a variable or every equation beginning with a constructor. (In
the example above, each qs had length 1, but in general this need not be the
case.) Then the call of match can be reduced to:
match us qs, (match us qs2 ( . . . (match us qsk E). . .))
It is easy to use the definition of match to show that this rule is correct.
5.2.7 Completeness
With the addition of the mixture rule, it is now possible to reduce any possible
call of match to a case-expression. This can be seen by a simple analysis. Given
a call (match us qs E) then us will be either empty, so the empty rule applies,
or non-empty. If us is non-empty then each equation must have a non-empty
pattern list, which must begin with either a variable or a constructor. If all
equations begin with a variable then the variable rule applies; if all begin with
a constructor then the constructor rule applies; and if some begin with
variables and some with constructors then the mixture rule applies.
Further, define the 'size' of an equation list as the sum of the sizes of all the
patterns in the equation list. It can be seen that all four of the rules result in
calls of match with smaller equation lists. This guarantees that the algorithm
must eventually terminate.
5.3 The Pattern-matching Compiler in Miranda
This section presents the transformation algorithm as a functional program in
Miranda.
5.3.1 Patterns
First, it is necessary to give a data type for representing patterns.
pattern
::= VAR variable
CON constructor [pattern]
variable
== [char]
constructor == [char]
