206
Chapter I1 Selecting the Next Redex
graph). This is useful for a parallel machine, when evaluations may need
to be suspended and their state saved somehow. This topic is discussed in
Chapter 24
It seems, therefore, that pointer-reversal alone is suitable only for small
experimental implementations. A stack is necessary for high performance,
but a parallel machine may well use both schemes together.
References
Abelson, H., and Sussman, G.J. 1985. Structure and Interpretation of Computer
Programs. MIT Press.
Arvind, Kathail, V., and Pingali, K. 1984. Sharing of Computation in Functional
Language Implementations. Laboratory for Computer Science, MIT. July.
Barendregt, H.P., Kennaway, J.R., Klop, J.W., and Sleep, M.R. 1986. Needed
reduction and spine strategies for the lambda calculus. Report CS-R8621. Centre
for Mathematics and Computer Science, Amsterdam. May.
Henderson, P. 1980. Functional Programming - Application and Implementation.
Prentice-Hall.
Peyton Jones, S.L. 1986. Functional programming languages as a software engineering
tool. In Software Engineering - The Critical Decade. Ince (editor). Peter
Peregrinus.
Scheevel, M. 1986. Norma: a graph reduction processor. In Proceedings of the ACM
Conference on Lisp and Functional Programming, Cambridge, Mass., pp. 212-19.
August.
Schorr, H., and Waite, W. 1967. An efficient machine independent procedure for
garbage collection. Communications of the ACM. Vol. 10, no. 8, pp. 501-6.
Stoye, W.R., Clarke, T.J.W., and Norman, A.C. 1984. Some practical methods for
rapid combinator reduction. In Proceedings of the ACM Symposium on Lisp and
Functional Programming, Austin, pp. 159-66. August.
Turner, D.A. 1983. The SASL Language Manual. University of Kent. November.
Watson, P., Watson, I., and Woods, V. 1986. A Model of Computation for the Parallel
Evaluation of Functional Languages. PMP/MU/PW/000001. Department of
Computer Science, University of Manchester. February.
