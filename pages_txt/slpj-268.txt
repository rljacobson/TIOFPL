268
Chapter 16 SK Combinators
Now if we use the unoptimized version of f, whenever we apply f to a new
argument x, we get
S (K p) (K q) x
K p x (K q x)
p (K q x)
p q
and this application of p to q, (p q), is brand new. However, if we use the
optimized version, we get
K (p q) x
P q
and this (p q) is the original shared instance in the (K (p q)) expression. Thus,
not only does it take fewer reductions to get to (p q), but we will only compute
(p q) once; that is, we have a fully lazy implementation.
16.2.2 The B Combinator
Consider the lambda abstraction
AX. - X
This compiles to
S (K -) 1
which wastes time and effort passing x into the left branch (K -) where it is
promptly discarded. What we would like is a version of S which passes x to the
right only; let us call it B. The reduction rule for B is
Bfgx -> f (g x)
The appropriate optimization rule is
S (K p) q => Bpq
which says 'if x is not used in the left branch (as shown by the K), then use B
instead of S'. This rule would optimize our example thus
S (K -) | = B- 1
Notice that this optimization saves work at compile-time (because the
resulting program is smaller) and at run-time (because there are fewer
reductions to be done). In fact, this particular example can be optimized
further. The expression
(B p 1)
is the same as
P
