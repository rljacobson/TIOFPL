Section 23.1 The time behavior of functional programs
397
research issues. Meira [1985] takes the efficiency of functional programs as
the main subject of his thesis, and chapter 6 of Stoye's thesis [Stoye, 1985]
gives a good summary of the area. Both served as major sources for this
chapter.
23.1 The Time Behavior of Functional Programs
Normally we are only concerned with the result of a functional program,
rather than the exact time at which the parts of the result are produced. In the
of evaluation.
case of an interactive program, however, we need more control over the order
We may write interactive functional programs by specifying the program as a
function from a (finite or infinite) list of input characters to a (finite or infinite)
list of output characters. Such finite or infinite lists of data items are often
called streams. We may draw such a system like this:
Keyboard
Functional
program
Screen
with
Suppose we wanted to write a program which repeatedly prompted the user
Enter number:
then read a number (17, say) from the input stream, and then output
Result is: 34
where the result is double the input number. We could write the program
using a function double, which takes the input stream as its argument and
produces the output stream as its result:
double inputStream
"Enter number: " ++
"Result is: " ++
numToChars (2*n) ++
double restinput
where
(n, restinput) = charsToNum inputStream
numToChars is a function which takes a number and converts it to a list of
characters. charsToNum takes a list of characters and converts an initial
segment of the list to a number, returning the number and the rest of the list.
The ++ operator is Miranda's infix list concatenater.
Unfortunately, when we run the program we will get the prompt
Enter number: Result is:
The system outputs the result message before reading the number. It does this
