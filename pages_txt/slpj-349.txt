Section 20.5 Evaluating arguments
351
it is clear that x will be evaluated, so we could compile E with the E scheme.
Letrecs are more problematic, since there is a danger that we might try to
evaluate a HOLE, so we will not attempt to optimize them.
We would therefore like to do two things:
(i) We would like to work out which functions are sure to need the values of
their arguments. This process of inferring which functions are strict is
called strictness analysis and is treated in detail in Chapter 22. We can
then use such strictness information to annotate applications of strict
functions. For example, we could annotate the body of $G thus:
$G x = $F ! (* x x) ! (+ x x)
where we use an infix '!' to indicate strict application. We can annotate
let-expressions in a similar way. For example, we could use a ! after the
variable name:
let x! = E in (+ x 1)
(ii) Secondly, we need to modify our compilation schemes to take advantage
of this new information.
The latter task is rather easy. We need only to add a clause to the ES scheme to
say
RS[[ E1 ! E2 ] p d n = El[ E2 1 p d; RS[[ E: ]] p (d+1) (n+1)
and make a similar modification to the ES scheme. This gives the effect of
call-by-value, in which the argument Ez is evaluated before the function E1 is
applied to it. A similar modification applies to the handling of let-expressions
in R and E. All of these modifications are given in Figure 20.8, together with
RI let x! = Ex in El ed
E[ let x! = Ex in E ]] pd
= E[ Ex ] p d; RI E ] p[x=d+1] (d+1)
= E[ Ex I pd;
RS[ IF E ] pd n
E[ E ] p[x=d+1] (d+1); SLIDE 1
= E[ E ] pd; JFALSE L;
RS[ $K-2-1 ] pd n;
LABEL L;
RSI E1 ! E2 ] pd n
RS[ $K-2-2 ] pd n
ES[ IF E ] p d
= E[ E2 1 p d; RS[[ E: ] p (d+1) (n+1)
= E[ E J p d; JFALSE L1;
LABEL L1;
ESI[ $K-2-1 ]] p d n; JUMP L2
ES[[ $K-2-2 ] pd n;
ES[ E1 ! E2 ] pd n
LABEL L2
= E[[ E2 ] p d; ES[[ E1 I p (d+1) (n+1)
Figure 20.8 Modifications to R, RS, E and ES to evaluate arguments
