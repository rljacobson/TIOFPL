330
Chapter 19 G-code - Definition and Implementation
19.4 More on the Graph Representation
We may think of the G-machine in the following way:
G-code execution mechanism
Graph interface
The graph
The G-code execution mechanism manipulates nodes in the graph, using a
certain limited set of operations which we call the graph interface. Once we
have specified the graph interface we are at liberty to alter the concrete
implementation of the graph so long as the implementation supports all the
operations in the graph interface.
In practice, such a clean separation of concerns is hard to achieve without
suffering a considerable performance penalty. We may distinguish, however,
between two kinds of graph operation:
(i) Node-specific operations are only used on a specific type of node. For
example, the G-code instruction HEAD is only executed when the node on
top of the stack is known to be a CONS node. Node-specific operations
can normally compile to a single target machine instruction.
Other examples of node-specific operations are ADD and JFALSE.
(ii) Generic operations are used on a variety of types of node. For example,
when the UNWIND instruction is executed, nothing is known about the
node on top of the stack. The first thing UNWIND has to do is to perform
case analysis on the node type. Generic operations are considerably more
expensive than node-specific operations because of this case analysis.
Other examples of generic operations are EVAL, PRINT, CASEJUMP
and some garbage collection operations.
The Chalmers G-machine has a rather fast and elegant implementation of the
generic operations, which contributes significantly to its performance and
extensibility. We will discuss this technique in the succeeding sections.
19.4.1 Implementing Tag Case Analysis
As noted earlier, in the Chalmers G-machine the tag of a cell is a word, and it
points to a small table of code entry points, one entry point for each generic
operation.
