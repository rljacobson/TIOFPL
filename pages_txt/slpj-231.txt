References
231
mechanisms described in the previous chapters concerning how to find
the next redex, how to perform a reduction, indirection nodes, the stack
and so on are still valid. The only change required is in the implemen
tation of Instantiate. It is simplified because all lambda abstractions are
known to be supercombinators (which have no free variables, and hence
need never be copied), but is made more complicated because it has to
substitute for several variables at once.
We call this the template-instantiation implementation.
(ii) We could keep the body of the supercombinator as a tree, but held in a
contiguous block of store. Now the instantiation can be done with a
modified block move, which can be implemented much more efficiently
than a tree-walking instantiation. This idea is used by Keller [1985]. It is
possible because supercombinators are constructed once and for all at
compile-time, rather than being generated on the fly at run-time.
(iii) We could compile the body to a linear sequence of instructions which will
create an instance when executed. This is the idea behind the G-machine
[Johnsson, 1984], which we discuss in Chapters 18-21. This is faster still,
and also opens the way to many further optimizations, as we shall see.
The fundamental point is that all we can do with a supercombinator is to apply
it, and hence we are free to choose a representation for the supercombinator
that makes this operation efficient.
References
Barendregt, H.P. 1984. The Lambda Calculus: its syntax and semantics, 2nd edition, p.
24. North-Holland.
Curry, H.B., and Feys, R. 1958. Combinatory Logic, Vol. I. North-Holland.
De Bruijn, N.G. 1972. Lambda calculus notation with nameless dummies.
Indagationes Mathematicae. Vol. 34, pp. 381-92.
Henderson, P. 1980. Functional Programming: application and implementation.
Prentice-Hall.
Hoffman, C.M., and O'Donnell, M.J. 1982. Programming with equations. ACM
TOPLAS. Vol. 4, no. 1, pp. 83-112.
Hughes, R.J.M. 1984. The design and implementation of programming languages.
PhD thesis, PRG-40, Programming Research Group, Oxford. September.
Johnsson, T. 1984. Efficient compilation of lazy evaluation. In Proceeding of the ACM
Symposium on Compiler Construction, Montreal, pp. 58-69. June.
Johnsson, T. 1985. Lambda lifting: transforming programs to recursive equations. In
Conference on Functional Programming Languages and Computer Architecture,
Nancy. Jouannaud (editor). LNCS 201. Springer Verlag.
Keller, R.M. 1985. Distributed graph reduction from first principles. Department of
Computer Science, University of Utah.
Klop, J.W. 1980. Combinatory reduction systems. PhD thesis, Mathematisch
Centrum, Amsterdam.
Landin, P.J. 1964. The mechanical evaluation of expressions. Computer Journal. Vol.
6, pp. 308-20.
O'Donnell, M.J. 1977. Computing in Systems Described by Equations. LNCS 58..
Springer Verlag.
