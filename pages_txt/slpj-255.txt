Section 15.5 Implementing fully lazy lambda-lifting
255
In practice, the algorithm of this section could probably be combined with
the dependency analysis algorithm.
How far out should a let(rec) be floated? We can compute the 'correct'
level-number of its variables, by computing the level-numbers of their
definition bodies. This level-number is correct in the sense that it identifies the
innermost lambda abstraction on which the definition depends. The let(rec)
should then be floated out until the nearest enclosing lambda abstraction has
this level-number.
This still leaves some freedom in choosing exactly how far out a let(rec) can
be floated. The algorithm which we describe below specifies that:
(i) The immediately enclosing lambda abstraction has the same level-
number as that of the variables bound in the let(rec).
ifi)
The let(rec) does not appear in the function position of an application.
It should be floated out as little as possible subject to the constraints (i)
and (ii) .
The second condition rejects expressions such as:
(let v = E in E1) E2
in favor of the following equivalent expression, in which the let is floated out
one more stage:
let v = E in (E1 E2)
(and similarly for letrecs). This has no effect on laziness, but allows an
important simplification in Chapter 20.
The final condition specifies that a let(rec) should be floated out no further
than is necessary to meet the first two conditions. To see why this may be
important, consider the expression
IF E (\x. let v = F in G) H
where E, F, G and H are arbitrary expressions, and F does not contain x. The
algorithm will transform this to
IF E (let v = F in (\x.G)) H
A sophisticated implementation may be able to avoid constructing the graph
of H if E turns out to be TRUE, and vice versa (see Chapter 20). If we were to
float the let out further, we would get the expression
let v = F in (IF E (\X. G) H)
which is less good, because then the graph of F would have to be constructed
whatever value E turned out to have.
We can now outline the algorithm as follows. Working from the outside
inwards, for each let(rec) perform the following steps:
(1) Compute the level-numbers of each definition body. While doing so for
a letrec, assume that the level-number of the variables defined in the
