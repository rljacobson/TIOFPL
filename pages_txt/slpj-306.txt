308
Chapter 18 The G-machine
Stack
Before (i)
Before (iii)
Ex
Eb
Ex
Ex
Before (iv)
After (iv)
Figure 18.8 Execution of a let
p[x=d+1] is just p augmented with information about where to find x.
Symbolically,
p[x=n] x = n
p[x=n] y = py
if x + y
The 'SLIDE 1' instruction squeezes out one element from the stack.
The job was fairly easy to do because we could access the graph constructed
by the let definition in just the same way as we access the parameters of a
supercombinator. This is another strong reason for performing the stack
rearrangement described in Section 18.5.1.
18.5.3.5 E is a letrec-expression
Finally, we consider the rule for
Cl[ letrec D in Et I p d
where D is a set of definitions and En is an expression. Recall that a letrec in a
supercombinator body is just a description of a cyclic graph. The way to
construct such a graph is:
(i) First allocate some empty cells, one for each definition, putting pointers
to them on the stack. These empty cells are called holes.
(ii) Now augment the context p and d to say that the values of the variables
(iii)
bound in the letrec can be found in the stack locations just allocated.
Then for each definition body:
(a) construct an instance of it, leaving a pointer to the instance on top of
the stack, and
(b) then update its corresponding hole with the instance (using the
UPDATE instruction; this also removes the pointer on top of the
stack).
During the instantiation process, occurrences of names bound in the
letrec will be replaced by pointers to the corresponding hole, because we
have augmented the context in stage (ii).
