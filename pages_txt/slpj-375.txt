Section 21.4 Optimizing the E scheme
377
can be optimized to
CONS; UPDATE (q+1); POP q; RETURN
This corresponds precisely to the CONS optimization in the R scheme, but
moved to a peephole optimization in the code generator. All the special cases
in R can be moved to the code generator in this way, but this loses
opportunities to use B, so in practice we might wish to use both methods.
The difficult case is when we are confronted with
PUSH n; SQUEEZE p q; DISPATCH k
(that is, a PUSH of a variable). In this case the code generator can do no
compile-time case analysis, so the case analysis must be done at run-time.
Using the case analysis technique outlined in Chapter 19, we would then add a
DISPATCH entry to each tag's entry table. The VAX target code for
'DISPATCH 3' might then be:
moval 3,12
movl (%EP)+,r0
k is passed to DISPATCH code in 12
movl (10),r1
Pop function into ro
Tag into r1
jmp *O_Dispatch(r1) Case analysis jump
21.4 Optimizing the E Scheme
The optimizations we have applied to the RS scheme can equally be applied to
the ES scheme. Like the RS scheme, the ES scheme constructs the spine of the
expression and then unwinds into it, so we might hope to use the same
technology to improve it.
Figure 21.5 gives the required modification. First we ALLOCate a HOLE to
contain the result; for the RS scheme this is already present in the form of the
root of the redex. Next we build the ribs using ES, pushing them on the stack.
Finally we use a new G-code instruction, CALL, to finish the job. This CALL at
the end, instead of the SQUEEZE-DISPATCH sequence, is the only difference
between RS and ES.
CALL is very like DISPATCH, except that it first saves the stack and code
pointers in the dump (just as EVAL is very like UNWIND except that it saves the
Modification to the E scheme
E[ E: E2 ] p d = ALLOC 1; ES[[ E1 E2 ] p d 0;
Modifications to the ES scheme
ES[[ x ] pd n = PUSH (d - p x); CALL n
ES[[ f ] ed n = PUSHGLOBAL f; CALL n
Figure 21.5 Modifications to the E and ES schemes to use CALL
