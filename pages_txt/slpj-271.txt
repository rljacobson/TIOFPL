Section 16.2 Optimizations to the SK scheme
271
Now, we are going to have to abstract x1, X2,. ..,Xn in turn from (p q). This
gives the following results:
Original expression
First abstraction (x1)
p q
S 'p 'q
Second abstraction (x2) S (B S 2p) 2q
Third abstraction (x3)
S (B S (B (BS) 3p)) 3q
Fourth abstraction (x4) S (B S (B (B S) (B (B (B S)) ^p))) *q
The size of the expression expands quadratically with the number of variables
abstracted. This happens because the combinators introduced by one
abstraction complicate subsequent abstractions.
from
We would like to deal with the general problem of abstracting a variable, x1,
<combinator expression> p q
where <combinator expression> contains no variables. At the moment the
abstraction goes like this:
A. x1 [[ <combinator expression> p q ]]
= S (B <combinator expression> 'p) 'q
and it is the fact that we introduce two new combinators (S and B), one of
which is nested, that causes the problem. Suppose we invent a new
combinator, S', with the following optimization rule
S (B xy) z => S' xy z
Now we get a simpler abstraction:
A x1 [[ <combinator expression> p q I
= S' <combinator expression> 'p 'q
We must choose the reduction rule for S' to make this optimization valid, so
S' cfg x
S (B cf) gx
Bcf x (g x)
(to make optimization valid)
c (f x) (g x)
which gives us the reduction rule for S', namely
S' cfgx -> c (f x) (g x)
Thus S' is like S, but 'reaches over' one extra argument.
Let us see what effect the S' optimization has on multiple abstraction:
Original expression
First abstraction (x1)
S 'p 'q
Second abstraction (x2) S' S 2p 2q
Third abstraction (x3) S' (S' S) 3p 3q
Fourth abstraction (x4) S' (S' (S' S)) 'p *q
