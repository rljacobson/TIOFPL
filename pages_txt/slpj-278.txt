278
Chapter 16 SK Combinators
This suggests a third representation of the program:
Represent
@w . . .YZ
as
p
Dww . . .yz
where Dvw. . .yz is one of a family of combinators with the following reduction
rules:
Djvw. . .yz p q x
Dsvw. . .yz p q x
Dvw. . .yz p q
Dbvw. . .yz p q x
Dvw. . .yz (p x) (q x)
Dcvw . . .yz p q x
Dvw. . .yz p (q x)
D
Dww. . .yz (p x) q
This new representation, together with the D reduction rules, is a perfectly
executable combinator program, except that it is represented much more
compactly than the original. The only cost is a slight increase in the complexity
of the reduction machine. An escape mechanism is also required to deal with
the case where there are too many directors in the string to fit in the D
combinator family. Stoye [1985] describes an implementation of director
strings on SKIM.
16.4 The Size of SK Combinator Translations
One obvious feature of the examples given in this chapter is that the translated
program is often much larger than in its lambda form; in fact Kennaway [ 1982]
shows that the size of the combinator expression can be proportional to the
square of the size of the lambda expression in the worst case. To become
convinced of this; the reader is encouraged to construct the director string
form of the lambda abstraction
AXn. . . AX2 . AX1 . (X1 X2 . . . Xn)
A closely related observation is that the SK combinator compiler repeatedly
re-scans the code it has already partially compiled. This can be seen in the
compilation rule
C[[ Ax.e ]] = A x [[ C[[ e ] I
in Figure 16.5.
Burton [1982] describes a method for balancing the expression tree, at the
expense of introducing extra redexes; this gives a complexity of 0(Nlog N),
