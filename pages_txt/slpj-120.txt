Section 6.2 Transforming let and letrec
119
An equivalent expression, which exposes more information, would be
let
z = 4
in letrec
in letrec
sum = Ax. Ay . IF (= x 0) y (sum (- x 1) (+ y 1))
in let
fac = An. IF (= n 0) 1 (* n (fac (- n 1)))
x = fac z
in
sum x z
In this latter form, the structure of the expression exposes clearly which
definitions depend on each other, and the use of letrec is restricted to the
occasion where it is actually necessary. Even when recursion is being used,
separate groups of recursive definitions are in separate letrecs (so that sum and
fac are in separate letrecs).
This transformation is called dependency analysis, since it sorts definitions
into groups according to the dependency relationships which hold between
them. It is closely related to data flow analysis techniques used in conventional
compilers.
It is highly desirable to perform dependency analysis, for two reasons:
(i) Let-expressions can be implemented considerably more efficiently than
letrec-expressions, so the use of the latter should be avoided unless
recursion is actually present.
(ii) Type-checking may be impossible if dependency analysis is not
performed (see Chapter 8). Furthermore, other steps such as strictness
analysis (see Chapter 22) become considerably more efficient if depen-
dency analysis is performed first.
We will now describe the dependency analysis algorithm in more detail,
using the following example as an illustration:
letrec
b
.a. . .
= ...h . . .b. ..d . . .
d = . ..C. . .
f = ...g . ..h . ..a. . .
g = .. .f. . .
h = ...g. . .
in
The example is a simple letrec, but the algorithm requires only minor
modification to deal with general let(rec)s.
each letrec.
The algorithm divides into four steps, which are performed separately on
