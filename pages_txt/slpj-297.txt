Section 18.3 The source language for the G-compiler
299
of execution steps, the example contains some optimizations which we will
not study until Chapter 20.)
We will now develop the G-machine in a stepwise fashion, beginning with a
very simple implementation, and developing the compilation algorithm and
the G-code together. First, however, we will specify the language from which
we are compiling.
18.3 The Source Language for the G-compiler
The compilation to G-code begins with a program consisting of a number of
supercombinator definitions of the form
$S X1 X2 . . . Xn = E
where E is an expression containing no lambdas, but which may contain lets
and letrecs. Figure 18.3 gives a reminder of the syntax of expressions. Notice
<E> ::= <constant>
<identifier>
KE> <E>
let <identifier> = <E> in <E>
- --
letrec <identifier> = <E>
<identifier> = <E>
in <E>
Figure 18.3 BNF for syntax of expressions
that the left-hand side of a definition in a let or letrec can consist only of a
single variable; local function definitions have been removed by lambda-
lifting. For example,
let f x = + x 1
in E
cannot occur. Notice also that we allow only one definition in a let. Multiple
definitions can be handled by nested lets, and the restriction slightly simplifies
the compiler.
It is worth having a formal description of the syntax, because our compiler
will need to contain a case for each construct. Referring to the syntax enables
us to confirm that all cases have been covered.
To save repetitive work in this chapter we will use a stripped-down set of
built-in functions and constants, shown in Figure 18.4. The stripped-down set
has been chosen to illustrate all the features of the compiler. The operators in
the right-hand column behave exactly like those in the left-hand column.
Assuming that we implement lists with structure tag 1 for NIL and 2 for
