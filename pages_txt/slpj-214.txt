214
Chapter 12 Graph Reduction of Lambda Expressions
substituting pointers to the argument for the formal parameter, and updating
the root of the redex with the result. The final operation, updating the root of
the redex, contains a hidden danger, which this section will expose.
Suppose, then, that we have instantiated the body of the abstraction and
are about to update the root of the redex. The most obvious way to do this
seems to be simply to copy the root cell of the result on top of the root cell of
the redex. This is all very well, but it suffers from two shortcomings:
(i) The result of the reduction may not have a root cell to copy. For example,
consider
(Ax.4) 5
In an unboxed implementation the result, 4, is represented as a non-
pointer, and hence does not occupy a cell at all.
(ii) It is slightly inefficient, because the root cell of the result is constructed
(by Instantiate), copied over the root of the redex, and then discarded,
because there are no further pointers to it.
It would be more efficient to build the root cell of the result directly on
top of the root cell of the redex, thus avoiding ever constructing the root
cell of the result in the first place.
However, in a reduction such as
(Ax.x) (f 6)
the root cell of the result is not a newly constructed cell so we cannot
construct the root cell of the result on top of the root of the redex.
It appears, therefore, that lambda abstractions in which the body consists of
an unboxed constant or a single variable, form a special case. We consider the
former possibility first.
12.4.1 Updating with Unboxed Objects
We recall from Chapter 10 that an unboxed object is one which is represented
as a non-pointer, rather than as a pointer to a cell. How can we update the root
of the redex with such an object?
We are forced to introduce a new type of cell, an indirection cell. An
indirection cell has a tag, IND say, which identifies the cell as an indirection,
and a single field which is the contents of the cell. When updating an
application cell with an unboxed object we overwrite the application with an
indirection cell whose content is the unboxed object. For example:
@$
reduces to
V$
