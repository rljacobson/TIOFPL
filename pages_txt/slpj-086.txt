Section 5.2 The pattern-matching compiler algorithm
85
match:
match [u.]
[ ( [NIL],
( [CONS x NIL],
A
(B x)
ERROR
( [CONS y (CONS x xs)], (C y x xs) ) ]
This can be reduced to the equivalent expression:
case U1 of
NIL
=> match []
[ ( [].
ERROR
A
) ]
CONS U2 U3 => match [U2, U3]
[ ( [x, NIL],
(B x)
ERROR
( [y, CONS x xs], (C y x xs) ) ]
Again, NIL introduces no new variables (leaving a call of match with an empty
list of variables), and CONS introduces two new variables, u2 and U3.
More generally, it may be the case that not all equations beginning with the
same constructor appear next to each other. For example, one might have a
call of match such as:
match [u1]
[ ( [CONS x NIL],
( [NIL],
(B x)
A
ERROR
( [CONS y (CONS x xs)], (C y x xs) ) ]
It is always safe to exchange two equations that begin with a different
constructor, so we may rearrange the above to the equivalent call:
match [u1]
[ ( [NIL],
( [CONS x NIL],
A
(B x)
ERROR
( [CONS y (CONS x xs)], (C y x xs) ) ]
which may be transformed as before.
It may also be the case that not all constructors appear in the original list of
equations. For example, a function definition such as:
last [x]
= X
last (y:(x:xs)) = last (x:xs)
will result in the following call of match:
match [u,]
[ ( [CONS x NIL],
X
( [CONS y (CONS x xs)], (last (CONS x xs)) ) ]
),
ERROR
