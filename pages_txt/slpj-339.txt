Section 20.3 Direct execution of built-in functions
341
round. We can achieve this optimization simply by adding the above R rule to
the R scheme.
the R scheme:
As a second example, consider compiling the expression (IF Ec Et Ei) with
R[ IF Ec E: Er Iled
= C[[ IF Ec Et Et B p d; UPDATE (d+1); POP d; UNWIND
This code will construct the graph of ($IF Ec Et Et), unwind it, find $IF at the
tip of the spine, discover that it does indeed have enough arguments, and
enter the code for $IF. The code for $IF will evaluate its first argument, test it
and conditionally jump on the result. We can again short-circuit this process
by generating the following code:
RI IF Ec E. E. Iled
= CI[ Ec ]] p d; EVAL; JFALSE L;
LABEL L;
RI[ E: ] pd;
RI[ ErIl pd
First of all we evaluate the condition, and conditionally jump based on its
value. Then we can complete the code in each branch using a recursive
application of the R scheme. Notice how this neatly allows all the optimiza
tions we are developing to be applied in each branch. Notice also that, since
the code generated by R ends by returning to the caller, no jump is necessary
to 'join up the branches of the if'. The CASE-n function can be compiled in an
analogous manner, except using a multi-way jump (CASEJUMP) instead of a
two-way jump (JFALSE).
Precisely analogous remarks apply to expressions such as (+ E1 E2) and
(HEAD E). Rather than construct their graph and then immediately unwind
into them, we execute them directly:
R[ + E1 E2 ] pd
= CI[ E2 1 p d; EVAL; C[[ E: ]] p (d+1); EVAL; ADD;
UPDATE (d+1); POP d; RETURN
RI[ HEAD E I p d
= CI[ E ] p d; EVAL; HEAD; EVAL;
UPDATE (d+1); POP d; RETURN
These optimizations can be achieved by simply adding the above R rules
into the R scheme. They constitute an extremely worthwhile improvement to
our compilation algorithm, but there is more to come!
20.3.2 The E Scheme
A cursory inspection of the extra R rules reveals the frequent occurrence of
the sequence
CI[ E I p d; EVAL
