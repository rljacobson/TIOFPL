Section 8.2 Polymorphism
143
(Note: in functional programming, we consider a function to belong to a
type (A -> B) even though it is not totally defined on the domain type A. For
example, the partial function which assigns to every even number its successor
has type (num -> num).)
The arrow in the function type notation (A -> B) is considered to be a
right-associative binary operator. So
A -> B -> C
means the same as
A -> (B -> C)
and
(A -> B -> C)
(A -> B)
A
C
means the same as
(A -> (B -> C)) -> ((A -> B) -> (A -> C))
(We shall often lay out a large type expression over several lines, as above.)
The reason we choose -> to be right associative can be seen by considering
a (curried) function f of two arguments a:: A and b::B. Then we have:
f
(f a)
::A ->B ->C
:: B -> C
(f a b) :: C
If -> were left associative, we would have to write
f :: A -> (B -> C)
which is less convenient, since it uses more brackets.
8.2 Polymorphism
Many of the functions we define in a functional program are to a greater or
lesser degree indifferent to the types of their arguments. This can be
illustrated with a few examples.
8.2.1 The Identity Function
The identity function id, defined by
id x = x
works equally well on arguments of any type. For example, in
id 3
id 'a'
= 'a'
