E[ E] pd
evaluates E, leaving the result on top of the stack.
Eli] pd
EI f Ipd
= PUSHINT i
E[ x Ipd
=
=
PUSHGLOBAL f; EVAL
PUSH (d - p x); EVAL
E[[ NEG E ] pd
E[ + E: E2 ] pd
= BI[ NEG E ] p d; MKINT
= B + E: E2 1 p d; MKINT
E[[ CONS E: E2 ] p d
EI HEAD E ] p d
= CI E2 ] p d; C[[ E: ] p (d+1); CONS
= E[ E ] p d; HEAD; EVAL
E[ IF Ec Et Er I pd
= BI Ec I p d; JFALSE L1;
E[ Et I p d; JUMP L2;
LABEL L1;
E[ E: ] pd;
LABEL L2
EI E: E2 1 p d
= ES[ E1 62 1 p d 0
E[ let x=Ex in E ] p d
= CI[ Ex ]] p d;
E[[ let x!=Ex in El p d
E[ E ] p[x=d+1] (d+1); SLIDE 1
= E[ Ex I pd;
EI letrec D in E ] p d
E[ E ] p[x=d+1] (d+1); SLIDE 1
= CLetrec([ D ] p' d'; EI[ E ] p' d'; SLIDE (d'-d)
where
(o', d') = Xr[ DI pd
Figure 20.16 The final E compilation scheme
ES[ E I pd n
completes the evaluation of an expression, the top n ribs of which have
already been put on the stack.
ES constructs instances of the ribs of E, putting them on the stack, and
then completes the evaluation in the same way as E.
ES[[ f I edn
= PUSHGLOBAL f; MKAP n; EVAL
ES[ x ] pdn
= PUSH. (d - p x); MKAP n; EVAL
ES[[ HEAD E ] p d n
= E[ E ] p d; HEAD; MKAP n; EVAL
ES[ IF Ec Et Er I p d n
= B[ Ec ] p d; JFALSE L1;
ES[[ E: ] p d n; JUMP L2;
LABEL L1;
ES[ Er Ipdn;
LABEL L2
ES[ IF E ] pd
= B[ E ] p d; JFALSE L1;
LABEL L1;
ES[ $K-2-1 1 p d n; JUMP L2
ES[ $K-2-2 1 p d n;
LABEL L2
ES[ E: E2 Ipd n
ES[ E1 ! E2 ] pd n
= C[[ E2 1 p d; ES[[ E: ] p (d+1) (n+1)
= E[ E2 ] p d; ES[ E1 1 p (d+1) (n+1)
Note: ES cannot encounter a let or letrec.
Figure 20.17 The final ES scheme
