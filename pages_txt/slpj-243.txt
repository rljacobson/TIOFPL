Fifteen
FULLY LAZY LAMBDA-LIFTING
As we discussed in Chapter 11 our implementations support lazy evaluation.
However, there is one major way in which an implementation based on
lambda-lifting can be made still lazier than the version we have described so
far. The purpose of this chapter is to describe the opportunity and the
modifications required to exploit it.
15.1 Full Laziness
As we remarked in Section 12.1.3, a straightforward implementation of the
template-instantiation procedure risks constructing multiple instances of the
same expression, rather than sharing a single copy of them. This wastes space
because each instance occupies separate storage, and it wastes time because
the instances will be reduced separately. This waste can be arbitrarily large;
for example, the duplicated instances might each separately perform some
large calculation.
function
The loss of sharing can best be seen using an example. Consider the
f = Ay .+ y (sqrt 4)
Whenever this function is applied to an argument we will slavishly construct a
new instance of the subexpression (sqrt 4) in its body, despite the fact that all
instances of the (sqrt 4) reduce to 2. It would be better not to construct a new
instance of such constant subexpressions, but to share a single instance
instead. This can do no harm, since the constant subexpression does not
contain any occurrences of the formal parameter, and hence its value cannot
change between one application and another.
243
