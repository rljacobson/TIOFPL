46 Chapter 3 Translating a High-level Functional Language into the Lambda Calculus
We will describe TE by case analysis, giving a rule for each possible form of a
Miranda expression.
3.4.1 Translating Constants
To translate a constant or built-in function is straightforward, assuming that
the lambda notation into which we are translating supports the same set of
constants. The following rule is all that is required:
TE[[ k ] = k
where k is a constant or built-in function name (we include all Miranda's
operators, and literal constants in this category). Thus, for example
TE[[ 5 ]] = 5
TE[ + 1 =
This translation assumes that all the constants and built-in functions have
the same names in the lambda notation. It is straightforward to describe
changes of name, however. For example, the following set of rules for TE
translates the operators +, -, etc. in Miranda into PLUS, MINUS, etc.:
TE[[ + ] =
PLUS
TE[[ - ] = MINUS
etc.
3.4.2 Translating Variables
An equally simple rule suffices to translate variables:
TEI[ v ] = V
where v is a variable (including the names of user-defined functions and
constructors).
3.4.3 Translating Function Applications
Function application in Miranda is denoted by juxtaposition, thus (f x). The
same syntax is used in the lambda notation, so the rule for translation is
simple:
TEI[ E: E2 ] = TE[ E, ] TEI E2 I
where E1 and Ez are arbitrary Miranda expressions. In the case of certain
common operators (such as +, etc.), Miranda provides infix syntax (that is,
the operator is written between its operands). The translation rule to deal
with these constructs is:
TE[[ E, infix E2 ]] = TEI[ infix ] TEI[ E, ] TEI E2 I
