Section 2.1 The syntax of the lambda calculus
11
2.1.2 Use of Brackets
In mathematics it is conventional to omit redundant brackets to avoid
cluttering up expressions. For example, we might omit brackets from the
expression
(ab) +((2c)/d)
to give
ab + 2c/d
The second expression is easier to read than the first, but there is a danger that
it may be ambiguous. It is rendered unambiguous by establishing conventions
about the precedence of the various functions (for example, multiplication
binds more tightly than addition)..
Sometimes brackets cannot be omitted, as in the expression:
(b+c)/a
Similar conventions are useful when writing down expressions in the
lambda calculus. Consider the expression:
((+ 3) 2)
By establishing the convention that function application associates to the left,
we can write the expression more simply as:
(+ 3 2)
or even
+ 3 2
We performed some such abbreviations in the examples given earlier. As a
more complicated example, the expression:
((f ((+ 4) 3)) (g x))
is fully bracketed and unambiguous. Following our convention, we may omit
redundant brackets to make the expression easier to read, giving:
f (+ 4 3) (g x)
No further brackets can be omitted. Extra brackets may, of course, be
inserted freely without changing the meaning of the expression; for example
(f (+ 4 3) (g x))
is the same expression again.
2.1.3 Built-in Functions and Constants
In its purest form the lambda calculus does not have built-in functions such as
+, but our intentions are practical and so we extend the pure lambda calculus
with a suitable collection of such built-in functions.
