32
Chapter 2 The Lambda Calculus
two arguments, and we can define it by giving the value of this function
applied to arbitrary arguments:
qxe =q e [[ * TheA3
This gives the meaning of the lambda calculus * in terms of the mathematical
operation of multiplication x. The distinction between the * and x is crucial:
the * is a syntactic expression in the lambda calculus, while x is the abstract
mathematical operation. In the case of multiplication, the mathematical
notation x differs from the program notation *, but in the case of addition (for
example) the symbol + is used by both. This is a ready source of confusion,
and we must keep a clear head!
We will use lower-case letters, such as a and b, to stand for values in
semantic equations.
The equation given above is, however, an incomplete specification for *
We must define what * does to each possible argument, including L. The full
set of equations should therefore be:
Eval[[ * ] ab = axb
if a+ 1 and b+1
Eval[[ * ] lb = 1
Eval[ * ] al = 1
The two new equations complete the definition of *, by specifying that if
either argument of * fails to terminate, then so does the application of *.
They are not the only possible set of equations for a multiplication
operator. For example, here are the equations for a more 'intelligent'
multiplication operator, #:
Eval[[ # ] ab = axb
Eval[[ # 1 0b = 0
if a+1 and a+0 and b+1
Eval[[ # ] al = 1
Eval[[ # ] lb = 1
if a+0
These equations imply that # should evaluate its first argument and, if it is
zero, return the result zero without examining the second argument at all;
otherwise it behaves just like *. Using # instead of * would cause the
evaluation of some expressions to terminate when they would not have done
so before.
The point of the example is that the semantic equations for a built-in
function enable us to express subtle variations in its behavior, with a precision
that is hard to achieve by giving reduction rules. The semantic equations for a
function both specify the meaning of the function and imply its operational
behavior (reduction rules).
Strictly speaking we should also provide equations such as
Eval[[ 6 ]] = 6
where the '6' on the left-hand side is a lambda expression, and the '6' on the
right-hand side is the abstract mathematical object. Ideally, we should
