402
Chapter 23 The Pragmatics of Graph Reduction
newDrop has just the same meaning as drop, but it turns out not to be as lazy, so
that it does not have a space leak. This trick is based on the asymmetry in
laziness caused by the order of arguments referred to above, but is hardly
crystal clear! Furthermore, a clever compiler might 'optimize' newDrop to
drop, which is certainly a correct transformation (and one that improves
laziness), but will reintroduce the space leak.
23.3.2 Unevaluated Components of Data Structures
Consider the function addHead, where
addHead b (a:xs) = (add b a):xs
add b a = a+b
It just adds something to the first element of a list. Now suppose that addHead
is applied to a list many times, thus:
demo = addHead 1 (addHead 2 (addHead 3 [10,11]))
If evaluated to WHNF, demo will reduce to
[add 1 (add 2 (add 3 10)), 11]
but it will not reduce to
[16, 11]
until the first element of the list is evaluated. Meanwhile the graph
representing
add 1 (add 2 (add 3 10))
is taking up space in the heap. Laziness prohibits the evaluation of this graph
until the value of the first element of the list is needed.
This is a specific instance of a general phenomenon. A less contrived
instance is that of a dictionary or symbol table represented by a tree, which is
updated as data are entered into the dictionary. These updates do not
propagate immediately to the leaves of the tree. Instead an update will be
performed one level at a time, probably in response to the need for a lookup
function to search the tree. Parts of the tree which are not visited by the
lookup function will not have the updates fully performed (quite rightly
according to laziness, since they may never be visited). However, the half-
performed updates take up space in the form of pieces of graph just as the
half-performed addHead did above.
One way to fix this is to have a function which crawls over the tree visiting
every node. In our addHead example we could use seq to give
demo = seq (hd xs) xs
where xs = addHead 1 (addHead 2 (addHead 3 {10,11]))
The seq forces evaluation of the head of the list, before returning the list as
before.
