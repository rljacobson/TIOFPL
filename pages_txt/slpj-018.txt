Section 2.2 The operational semantics of the lambda calculus
17
Given a lambda abstraction (\x.E), how can we identify exactly those
occurrences of x which should be substituted for? It is easy: we should
substitute for those occurrences of x which are free in E, because, if they are
free in E, then they will be bound by the Ax abstraction (\x. E). So, when
applying the outer Ax abstraction in the above example, we examine its body
(1x. + (- x 1)) x 3
substitution.
and see that only the second occurrence of x is free, and hence qualifies for
This is why the rule given above specified that only the free occurrences of
the formal parameter in the body are to be substituted for. The nesting of the
scope of variables in a block-structured language is closely analogous to this
rule.
Here is another example of the same kind
(Ax. Ay . + x ((Ax. - x 3) y)) 5 6
(Ay . + 5 ((Ax. - x 3) y)) 6
+ 5 ((Ax. - x 3) 6)
+ 5 (- 6 3)
8
Again, the inner x is not substituted for in the first reduction, since it is not free
in the body of the outer Ax abstraction.
2.2.2.3 A larger example
As a larger example, we will demonstrate the somewhat surprising fact that
data constructors can actually be modelled as pure lambda abstractions. We
define CONS, HEAD and TAIL in the following way:
CONS = (\a. Ab. Af.f a b)
HEAD = (\c.c ( la.Ab.a))
TAIL = (Ac.c (Aa. Ab.b))
These obey the rules for CONS, HEAD and TAIL given in Section 2.1.3. For
example,
HEAD (CONS p q)
(Ac.c ( la.Ab.a)) (CONS p q)
CONS p q (la.Ab.a)
(la. Ab. Af. f a b) p q (la.Ab.a)
(Ab. Af . f p b) q (la.xb.a)
tuttttt
(Af. f p q) (la.Ab.a)
(Aa. Ab. a) p q
(Ab . p) q
p
This means, incidentally, that there is no essential need for the built-in
functions CONS, HEAD and TAIL, and it turns out that all the other built-in
