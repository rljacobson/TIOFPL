300
Chapter 18 The G-machine
Stripped-down set
Others which behave similarly
integer constants
boolean, character constants
NEG (unary negation)
NOT
+
. ", /, REM
<, S, =, 2, >
IF
CASE-n
FATBAR
CONS
PACK-SUM-d-r, PACK-PRODUCT-r
HEAD
TAIL, SEL-r-i, SEL-SUM-r-i
Figure 18.4 Built-in functions and constants
CONS, we use CONS, HEAD and TAIL as abbreviations for PACK-SUM-2-2,
SEL-SUM-2-1 and SEL-SUM-2-2 respectively. These abbreviations are easier
to remember, and are used in the G-machine papers.
We do not treat UNPACK, since it is eliminated by the transformation
described in Chapter 6.
We will postpone a treatment of the FATBAR function until Chapter 20
18.4 Compilation to G-code
For the rest of this chapter we will discuss the compilation of supercombinator
definitions to G-code, leaving the code generation for the next chapter.
The compilation of a program to G-code and its execution by the G-
machine are purely optimizations to the simpler template-instantiation
implementation. We begin with the simplest possible G-machine, where the
connection with template-instantiation is very direct. Later on, in Chapters 20
and 21, we will develop a number of optimizations which considerably speed
up the operation of the machine.
The G-code compilation algorithm behaves like this:
$F
$G .
. . . =
F. . .
G-code
A G-code
compilation
program
$Z
$Prog
The compilation algorithm takes a set of supercombinator definitions,
