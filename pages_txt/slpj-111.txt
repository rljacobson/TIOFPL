110
Chapter 6 Transforming the Enriched Lambda Calculus
We begin by sketching a new problem which is introduced by allowing
arbitrary patterns on the left-hand side of definitions. This leads us to define a
class of patterns, the irrefutable patterns, which do not suffer from the
problem. Then, before embarking on the transformations themselves, we
give a 'map' to explain their structure.
6.2.1 Conformality Checking and Irrefutable Patterns
Allowing arbitrary patterns on the left-hand side of a definition introduces a
new and somewhat subtle complication. Consider the expression
let (CONS x xs) = B in E
Here, the pattern (CONS x xs) appears on the left-hand side of the definition.
This raises the nasty possibility that B might evaluate to NIL instead of
(CONS B1 B2), in which case the pattern would not match, and some sort of
error should, presumably, be reported. This requires that a conformality
check be made, to ensure that B conforms with the specified pattern.
Conformality checking will carry some implementation cost, so we would
like to avoid it whenever possible. It can be avoided in precisely those cases
when the pattern match cannot fail; for example, simple product patterns.
However, there are some nested patterns which cannot fail also, which
motivates the following definition:
DEFINITION
A pattern p is irrefutable if it is
(i) either a variable v
ii) or a product pattern of form (t pi . . . pr)where p1. ..., Prare irrefut-
able patterns.
Otherwise the pattern is refutable.
In other words, the irrefutable patterns consist of arbitrarily nested product
constructors with variables at the leaves. These patterns cannot fail to match
in a type-checked implementation. Variables and simple product patterns are
just two examples of irrefutable patterns.
However, even a single constant or sum constructor (even if nested inside a
product pattern) makes the pattern refutable, since there is a possibility that it
may not match. We need to perform conformality checking for refutable
definitions only.
6.2.2 Overview of let and letrec Transformations
We are now ready to describe the various transformations to simplify let(rec)-
expressions. While few are complicated, they are quite numerous, so we
begin by offering a 'map' to aid in navigation through the rest of the section.
