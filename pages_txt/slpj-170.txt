Section 9.4 Solving equations
169
The problem of unification is to find a maximally general idempotent unifier
of a set of pairs of expressions. The method we use is Robinson's [1965]
unification algorithm. It is convenient when coding the algorithm to concen-
trate on the problem of extending a given substitution, which solves a set of
equations
t1 = ti'; ... ; tk = tk'
to one that solves an extended set
ti = ti'; ...; tk = tk' ; tk+1 = tx+1'
So we shall pose the problem in the following way. Given a pair (t1,t2) of type
expressions, and an idempotent substitution phi, our algorithm should return
FAILURE if there is no extension of phi which unifies (t1,t2), and it should return
(OK psi), where psi is an idempotent unifier of (ti,t2) which extends phi. (In
fact, the one we construct will be maximally general among such extensions of
phi.)
The simplest equation we can consider is one of the form
TVAR tvn = t
To handle such cases in the unification algorithm, we will make use of the
following function:
extend :: subst ->
extend phi tvn t
tvname -> type_exp -> reply subst
= OK phi,
= FAILURE,
t = TVAR tvn
tvn $in tvars_in t
= OK ((delta tvn t) $scomp phi)
An expression (extend phi tvn t) will be evaluated only when:
(i) phi is an idempotent substitution (the solution we are trying to extend);
(ii) t is a fixed point of phi;
(iii) tvn is unmoved by phi (tvn does not already have a value under phi).
The value of the expression is either FAILURE, or of the form (OK phi'),
where phi' is an idempotent substitution extending phi, such that
sub_type phi' t' = t
= sub_type phi t'
if t' = TVAR tvn
otherwise
equation:
In fact, phi' is maximally general among extensions of phi which solve the
TVAR tvn = t
Note that if phi is idempotent, t is a fixed point of phi and tvn is moved by phi,
then tvn can occur in neither (phi tvn) nor t.
