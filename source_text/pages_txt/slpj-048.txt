Section 3.5 The TD translation scheme
47
where 'infix' is an infix operator, and Et and E2 are arbitrary Miranda
above).
expressions. We must apply TE to 'infix' to accomplish any change of name (see
Furthermore, Miranda allows user-defined functions to be used as infix
operators by prefixing their names with $. We can treat this case with the rule
TE[[ E, $v E2 ] = TE[ v ] TEI E: ] TE E2 I
3.4.4 Translating Other Forms of Expressions
We shall consider two other forms of Miranda expression, namely
(i) list expressions such as [2,5,1];
(ii) ZF expressions.
We will deal with these in Chapters 4 and 7 respectively.
3.5 The TD Translation Scheme
The TD scheme takes a Miranda definition as its argument and produces a
letrec definition as its result. We will only give a rather simplified TD scheme
here, leaving a more powerful one for later chapters.
There are two cases that we can handle immediately, namely variable
definitions and simple function definitions.
3.5.1 Variable Definitions
Consider the Miranda definition
V = 5+7
It can be translated very easily to
V = *57
All that is required is to translate the body of the definition, using the TE
scheme. In general:
TDI[ v = E ]| = V = TE[ E II
where v is a variable and E is an expression.
3.5.2 Simple Function Definitions
We have already seen an example of translating a simple function definition,
when we translated the Miranda definition
square n = n*n
