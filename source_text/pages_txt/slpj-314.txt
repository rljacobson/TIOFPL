316
Chapter 18 The G-machine
The new code for $NEG would therefore be:
EVAL;
Evaluate the argument
NEG;
Negate it
UPDATE 1;
Update the root of the redex
RETURN;
Evaluation is complete
18.8.2 $CONS
When the code for $CONS is entered, the two objects to be CONSed are on top
of the stack, and below them is a pointer to the root of the redex. We can
therefore produce the following code sequence for $CONS:
CONS;
Form the CONS cell
UPDATE 1;
Update the root of the redex
RETURN;
Result guaranteed to be in WHNF
CONS is a G-code instruction which CONSes together the top two items on the
stack, pops them and pushes a pointer to the CONS cell. The CONS cell is then
copied over the root of the redex by UPDATE. The CONS cell cannot be
applied to anything (or the type-checker would have complained), so the
expression being evaluated must now be in WHNF; we can thus use RETURN
instead of UNWIND.
The treatment of $PACK-SUM-d-r is similar, except that we need a new
G-code instruction PACKSUM d,r which constructs a structured data object
with structure tag d and r fields, whose values are found on the stack. CONS is
then equivalent to PACKSUM 2,2. $PACK-PRODUCT-r can be treated
similarly, using a new G-code instruction PACKPRODUCT r. If sum types and
product types are represented in the same way, then a single G-code
instruction would suffice.
18.8.3 $HEAD
$HEAD is a function which evaluates its argument (to WHNF); it expects the
result to be a CONS cell, from which it can extract the head (that is, the first
field). Then, for the reasons we discussed in Section 12.4, it must evaluate the
head of the cell before overwriting the root of the redex with it. Failing to do
this final evaluation would result in the duplication of work.
The code for $HEAD is:
EVAL;
Evaluate to WHNF
HEAD;
Take its head
EVAL;
Evaluate the head
UPDATE 1;
Update root of redex
UNWIND;
Continue
Notice that we cannot use RETURN at the end, even though the result of the
