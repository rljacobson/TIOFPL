174
Chapter 9 A Type-checker
build a solution phi to the type equations implied by the structure of E, such
that
E :: t provided that x1 :: tsi', ... , Xk :: tSk
where tsi' is the image of ts under the substitution phi. We then form the type
scheme ts to be associated with x when type-checking E', in the extended
environment
X1 :: ts1, ... , Xk :: ISk' , X :: ts
The schematic variables of ts are all of the type variables of t except those that
are unknown (non-schematic) in any of the schemes tsi', ... , tsk'. So
whatever data structure we choose to represent the environment of the
type-checker, it should give us ready access to the set of unknowns in its range
(the tsi' ).
An association list provides us with a suitable data structure.
assoc_list * ** == [(*, **)]
Here * stands for the type of keys, and *+ for the type of associated values. A
key k is associated with a value v by means of the pair (k,v). The partial
function itself is represented by a list of such associations. We shall use al, al',
etc. as variables over association lists.
dom :: assoc_list * ** -> [*]
dom al = [ k I (k,v) <- all
(dom al) returns a list (possibly with duplications) of the keys associated with
values in the list, which is how we shall represent the domain of a partial
function.
val :: assoc_list * ** -> * -> **
val al k = hd [ v 1 (k',v) <- al ; k = k' ]
If k is a key in (dom al), then (val al k) returns the first value in the list which is
associated with k. When using this function, we should be careful to ensure
that the second argument belongs to the domain of the association list.
install al k v = (k,v):al
(install al k v) returns an association list which implements the same partial
function as al, except that the key k is now mapped to the value v.
rng :: assoc_list * * * -> [**]
rng al = map (val al) (dom al)
The property which ing is intended to satisfy is that every entry in (mng al) is a
value of (val al).
We shall represent the information passed to the type-checker about the
