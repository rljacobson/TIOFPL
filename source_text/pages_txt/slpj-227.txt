Section 13.3 Transforming lambda abstractions
227
Now we see that the Ax abstraction also fulfills the conditions for
supercombinatorhood, and we give it the name $X, thus
$Y wy = +yw
$X X = $Y x x
$X 4
reductions:
We can now execute our program by performing supercombinator
$X 4
$Y 4 4
+ 4 4
8
To review the algorithm so far:
UNTIL there are no more lambda abstractions:
(1) Choose any lambda abstraction which has no inner lambda
abstractions in its body.
) Take out all its free variables as extra parameters.
Give an arbitrary name to the lambda abstraction (e.g. $X34).
(4) Replace the occurrence of the lambda abstraction by the name
applied to the free variables.
(5) Compile the lambda abstraction and associate the name with the
END
compiled code.
It is easy to see that we suffer an increase in the size of the program during this
transformation, but it is a price we pay willingly in exchange for the easier
reduction rules.
When we have completed the algorithm we arrive at a program of the form
. . . supercombinator definitions
E
But what about the expression E? It must have no free variables, since it is
the top-level expression to be evaluated, so we can make it into a zero-
parameter supercombinator (a CAF) thus
. supercombinator definitions . . .
$Prog = E
$Prog
