70
Chapter 4 Structured Types and the Semantics of Pattern-matching
application of the lambda abstraction (\(BRANCH t1 12) . BRANCH t2 t1) to
(LEAF 0):
(A(BRANCH t1 12) . BRANCH 12 t1) (LEAF 0) - FAIL
The application returns FAIL because the constructor in the pattern is different
from that of the argument.
Finally, if A was built with the same constructor as the pattern, then the first
rule applies. To see how this rule works, consider an application of the same
abstraction to a BRANCH:
(A(BRANCH t1 12) . BRANCH 12 t1) (BRANCH (LEAF 0) (LEAF 1))
(At1 . At2 . BRANCH t2 t1) (LEAF 0) (LEAF 1)
(At2. BRANCH t2 (LEAF 0)) (LEAF 1)
1
BRANCH (LEAF 1) (LEAF 0)
In this case the match succeeds, and t1 and t2 are bound to the components of
the branch with the ordinary B-reduction rule.
Notice that for constructors of arity zero (r=0) the three rules correspond
exactly to those of the previous section. For example, using the first case of the
xor function gives:
(AFALSE.Ay . y) FALSE TRUE
- (Ay .y) TRUE
TRUE
Finally, notice that the rules deal correctly with nested patterns. Consider, for
example, the following application of the first case of the function lastElt to
(CONS 4 (CONS 3 NIL)):
(A(CONS x NIL).x) (CONS 4 (CONS 3 NIL))
(AX.ANIL.x) 4 (CONS 3 NIL)
(ANIL.4) (CONS 3 NIL)
( first rule)
(normal B-rule)
FAIL
(second rule)
Here, the outer pattern matches but the inner one does not, so the whole
expression returns FAIL.
4.3.4 The Semantics of Product-constructor Patterns
Finally we consider the semantics of matching product patterns. This is an
area in which a rather subtle issue surfaces.
Consider the Miranda functions
zeroAny x
=
O
zeroList []
= 0
zeroPair (x,y) = 0
The function zeroAny takes a single argument and returns 0. Miranda's lazy
semantics clearly means that the argument is not evaluated, so that 0 is
