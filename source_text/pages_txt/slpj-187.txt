Section 10.3 Concrete representations of the graph
187
A graph differs from a tree in that two edges can point to the same node.
For example, in Figure 10.2 node D is a descendant of nodes A and C (we say
that it is shared). A graph is said to be acyclic if there is no path from a node
back to itself (Figure 10.2 is not acyclic, since there is a path from node A to
itself, via node C). A directed acyclic graph is often abbreviated DAG.
10.3 Concrete Representations of the Graph
The pictures we have shown are still somewhat abstract. In a typical
implementation each node of the tree would be represented by a small
contiguous area of store, called a cell. A cell holds a tag which tells the type of
the cell (application, number, built-in operator, lambda abstraction, CONS
cell, etc.), and two or more fields. The number of fields in a cell varies between
implementations. Many implement fixed-size cells with two fields, but some
cell thus:
have variable-sized cells. This issue is further discussed below. We may draw a
Tag
Field 1
Field 2
A field may contain the address of another cell, in which case we say that it
is a pointer, and that it points to the cell. We draw a pointer field like this:
Address
- Another cell
Alternatively, a field may contain an atomic (non-pointer) data value. We
draw a non-pointer field like this:
A data value
Each node of the abstract syntax tree (or graph) corresponds to a cell of the
concrete representation. The tag on the node goes in the tag field of the cell.
Possible concrete representations for the syntax tree nodes we have met are
given in Figure 10.3, and, using these, our (+ 4 2) tree, for example, would
be represented as in Figure 10.4. Such pictures are rather laborious to draw,
so we will normally use the abstract version.
10.3.1 Representing Structured Data
We recall from Chapter 4 that an implementation of Miranda has to support a
family of constructor functions, of which NIL and CONS are particular
examples. A constructor function builds a structured data object, which is
simply an aggregate of values together with a structure tag to distinguish it
from other constructors of the same data type. Typically the structure tag will
be a small integer, between 1 and the number of constructors of the type (but
see below, where tags and type-checking are discussed).
