322
Chapter 19 G-code - Definition and Implementation
and imply that nodes not explicitly mentioned in the G field on the right-hand
side are unchanged from the left-hand side.
Using this notation we can now give a complete description of the G-code
instructions (Figures 19.1 and 19.2). The transitions for UNWIND are a little
complicated, so we will explain them briefly. There are four cases:
(i) The item on top of the stack is an integer or a CONS node. In this case it
must be the only element of the stack, and the expression being
evaluated is in WHNF. UNWIND therefore completes evaluation by
restoring the saved stack and code from the dump, and putting the result
of the evaluation on the top of the restored stack.
(ii) The item on top of the stack is (a pointer to) an application node. In this
case we just push the head of the application on the stack and repeat the
UNWIND instruction.
(iii) The item on top of the stack is a function, and there are enough
arguments on the stack. In this case we rearrange the stack as described
in Section 18.5.1, and begin executing the code for the function. The vi
are the vertebrae on the spine, while the n are the arguments to the
function.
(iv) The item on top of the stack is a function, but there are too few
arguments for it to execute (this is described by the {a<k} condition). In
this case the expression being evaluated is in WHNF, so UNWIND
completes evaluation by restoring the saved stack and code from the
dump, and putting the result of the evaluation on the top of the restored
stack.
19.1.3 The Printing Mechanism
The G-code instructions developed so far are intended to reduce an
expression to WHNF. As we saw in Section 11.2, though, we also need a
printing mechanism which repeatedly invokes the evaluator to reduce
expressions to WHNF and prints them. It would be nice if we could describe
the printing mechanism within the same framework, and we now do so.
We introduce one new instruction, PRINT, which prints the top element on
the stack. In order to describe its action we need to add one new component in
the G-machine state: O, the output produced by the machine. The empty
output is denoted by [], and O;x denotes the output O followed by the output x.
Now we can define PRINT:
<O, n:S, G[n=INT i], PRINT:C, D> => <O;i, S, G, C, D>
<O, n:S, G[n=CONS n1 n2], PRINT:C, D>
<0, n1:n2:S, G, EVAL:PRINT:EVAL:PRINT :C, D>
All the other instructions leave O unchanged.
