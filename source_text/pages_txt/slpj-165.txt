164
Chapter 9 A Type-checker
contain no repetitions. Moreover, the free variables in an expression must be
among those associated with predeclared types, either because they are
supplied by the system, or because their types can be deduced from type
definitions in the program. We can assure ourselves that these restrictions are
met in a simple recursive scan through the program.
trivial program:
To understand the representation, let us take for an example the following
let S = \x.Ay . Az. x z (y z)
K = Ax.Ay . x
in S K K
Considered as an object in the type vexp, the program becomes:
LET ['S","K"] [rhs_S, ths_K] main
where
var_S
= VAR "S"
var_K
VAR "K"
var_x
= VAR "X"
var_y
= VAR "y"
var_z
= VAR "z"
main
= AP (AP var_S var_K) var_K
rhs_S
rhs_K
= plambda ["x","y","z"] body_S
= plambda ["x","y"] body_K
body_S = AP (AP var_x var_z) (AP var_y var_z)
body_K = var_x
plambda vs e = foldr LAMBDA e vs
which the reader may write out without using 'where' if so inclined.
9.2 Representation of Type Expressions
To construct the type-checker, we will need to represent type expressions by
Miranda data structures. We need a type for the names of type variables and,
for the moment, we will take this to be the type of lists of characters. (For
technical convenience, we will revise this definition in Section 9.6.)
tvname
[char]
type_exp
::=
TVAR tvname
| TCONS [char] [type_exp]
This definition says that a type expression must be either a type variable or a
compound type (such as (A -> B), [A] or (A,B)). We represent such
compound types by the name of the operator (e.g. "arrow" for (A -> B),
"cross" for (A,B)), and a list of the operands.
Whatever other type-forming operators we have, we will certainly need the
function type operator. So let us define:
arrow :: type_exp -> type_exp -> type_exp
arrow t1 12
= TCONS "arrow" [t1,12]
