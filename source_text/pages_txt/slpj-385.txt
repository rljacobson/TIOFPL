Section 22.3 Coping with recursion
387
and hence
=# xy = & xy
where we define & as the boolean AND operator (in the abstract domain).
Similarly we define I as OR. The definition of +# is identical to that of =#.
However, IF# is more interesting. We know that
(IF E: E2 Es) may terminate if (E: may terminate)
and ((E2 may terminate)
Thus
or (Es may terminate))
IF# x y z = & x (I y z)
(All of these rules are proved in Burn et al.) We can now complete the
definition of f#, thus:
f# pqr = IF# (=# p 1) (+# q r) (+# q p)
= & (& p 1) (1 (& q r) (& q p))
= & p (& q (I pr) )
At last, we are in a position to discover the strictness of f. For example, to
find whether f is strict in its first parameter, p, we compute
f# 0 1 1 = & 0 (& 1 (1 0 1))
= 0
This tells us that f fails to terminate if p fails to terminate, even if all the other
compute
arguments terminate; so f is strict in p. To discover strictness in q and r, we
f# 1 0 1 = 0 (sof is strict in q)
f# 1 1 0 = 1 (sof is not strict in r)
22.2.4 Fitting Strictness Analysis into the Compiler
Everything we have said so far assumes that the functions being analyzed have
no free variables, and indeed it seems rather hard to analyze functions which
do have free variables. Rather than address this problem directly, we can
simply perform strictness analysis after lambda-lifting.
This makes sense in any case, because it is the supercombinator definitions
that we want to annotate for subsequent passes of the compiler, not the
original lambda abstractions.
22.3 Coping with Recursion
There is one fly in the ointment, which is that a user-defined function may be
recursive. To see that we cannot simply execute the # version of the function
normally, consider
fxy = IF (= x 0) y (f (- x 1) y)
