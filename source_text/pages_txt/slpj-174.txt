Section 9.5 Keeping track of types
173
During the course of type-checking we will have occasion to apply a
substitution to a type scheme, to reflect additional information we have on its
unknowns. When doing this, we should take care that only the unknowns are
affected (remember that the schematic variables function like the formal
parameter of a lambda abstraction, and have only local significance):
sub_scheme :: subst -> type_scheme -> type_scheme
sub_scheme phi (SCHEME scvs t)
= SCHEME scvs (sub_type (exclude phi scvs) t)
where
exclude phi scvs tvn = TVAR tvn,
tvn $in scvs
= phi tvn
In Section 2.2.6 we demonstrated the irritating problem of 'name-capture',
whereby a free variable of a lambda abstraction could become bound by being
substituted inside another lambda abstraction. There is a similar problem
here with substitution into type schemes. We must take care that the
expression
sub_scheme phi (SCHEME scvs t)
is only evaluated when the schematic variables scvs are distinct from any
variables occurring in the result of applying the substitution phi to any of the
unknowns of t. Otherwise a type variable in the range of the substitution
(which is always an unknown) might surreptitiously be changed into a
schematic variable. The way in which we ensure this is to guarantee that
the names of the schematic type variables in the type scheme are always
distinct from those which can occur in the range of the substitution (which are
always unknowns).
9.5.3 Association Lists
Having decided to associate a type scheme with each free variable in an
expression, rather than a type expression with each occurrence of a free
variable, we now have to decide how this information should be provided to
the type-checker. There are two requirements on the data structure we use:
(i) It should provide a mapping from the free variables of the expression to
type schemes.
(ii) We should be able to determine the range of that mapping.
To understand the second point, consider type-checking (let x=E in E'). We
start by deriving a type t for E, in a type environment
X1 :: ts1, . . . . Xk :: tSK
which associates a type scheme ts; with each variable xi free in E (the ts; thus
constitute the range of the type environment). In other words, we attempt to
