218
Chapter 12 Graph Reduction of Lambda Expressions
copies of nodes then identical arguments may look different to the memo
function.
There is only one argument against indirection nodes, but it is rather
persuasive:
(i) The reduction machine has to make continual tests for the presence of
indirection nodes, and de-reference them as they crop up. This adds a
large number of potentially slow tests to the implementation. Hardware
support would largely alleviate this problem.
On balance it looks as if copying has a short-term advantage of speed, but the
generality of indirection will probably win out in the end.
12.5 Implementing Y
We have said in Chapter 2 that Y is always implemented directly, and we now
discuss how this is done. The reduction rule for Y is
Yf -> f (Y f)
and there are two ways of implementing this:
(i)
$ @
reduces to
$ @
(ii)
$
reduces to
The first is straightforward, but the second is more interesting. The right
branch of the result node $ points back at node $. To see that this is a correct
implementation, consider the reduction rule for Y. On the right-hand side of
the rule, the thing f is applied to is (Y f), but the original redex was (Y f) and so
f can be applied to the root of the original redex.
Another way to see this is to try taking the reduction sequence for Y further:
Y f
f (Y f)
f (f (Y f))
f (f (f (Y ()))
f (f (f (f. ..))
which is just what the suggested graph represents.
This is the first time our graphs have incorporated cycles and this is indeed
