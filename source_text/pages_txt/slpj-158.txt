Section 8.5 How to find types
157
From the first of these we derive:
T6 = T10 -> T11 -> T12
T7 = T10 -> T11
T8 = T10 -> T12
reasoning that if (T1 -> T2) = (T1' -> T2'), then T1 = T1' and T2 = T2'.
By the same reasoning, we have
T10 = T13 = T12
T11 = T14
T10 = T15
T11 = T16 -> T15
which allows us to express the types of the two occurrences of K as
T6 = T10 -> (T16 -> T10) -> T10
17 = T10 -> T16 -> T10
and the type of the whole expression as
T9 = T8 = T10 -> T10
So the rule we adopt as the type-constraint for let-expressions is that the
types of the occurrences of the defined names in the body must be instances of
the types of the corresponding right-hand sides. The procedure we adopt to
compute those instances is to instantiate the variables in the types of those
right-hand sides with new variables, making a fresh instance for each
occurrence of the defined name in the body of the let. In fact, we shall not in
general be able to instantiate all the type variables, as we shall see shortly.
8.5.4 Top-level letrecs
Turning now to letrecs, it seems clear that a variable introduced by a letrec
definition should be capable of taking on different types in the body of the
program governed by the letrec, just as in the case of let-definitions. So in
letrec f = (...)
in (...f. ..f. . .f. . .)
we expect f to be capable of taking on different types throughout the
expression body. However, there is a new question we must answer. The
variable introduced by a recursive definition can also have many occurrences
in the right-hand side of its definition, as it were 'while' it is being defined, as
well as 'after'. In general, when there are several mutually recursive
definitions, as in
letrec x1 = (. . .X1 . . .Xi. . .Xk- . .)
Xk = (. . .X1. . .Xj. . .Xk . . .)
in (.. .X1. . .Xi. . .Xj. . .Xk. . . )
