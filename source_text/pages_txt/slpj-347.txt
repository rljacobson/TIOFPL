Section 20.5 Evaluating arguments
349
20.5 Evaluating Arguments
Suppose a supercombinator body consists of an expression of the form
(f E1 E2), where we cannot execute f directly as described in the preceding
section. Then we will compile the following code:
RI f E1 E2 ]] pd
= CI[ E2 ]] p d; C[[ E1 1 p (d+1); PUSHGLOBAL f;
MKAP 2; UPDATE (d+1); POP d; UNWIND
Notice that we have to construct the graph of Et and E2. Suppose, however,
that we knew that f would evaluate its first argument. Then we would be safe
to compile E1 with the E scheme (which will evaluate it), thus avoiding
constructing the graph of E1 before subsequently evaluating it.
If we know that f evaluates its first argument we say that f is strict in its first
argument (see Section 2.5.4). The optimizations of this section try to avoid
functions.
using C to compile Er and Ez by using information about the strictness of
20.5.1 Optimizing Partial Applications
Suppose we are compiling the supercombinator
f x = + (NEG x)
Here the result returned by f is a function which adds (NEG x) to its argument.
With our present compilation schemes we will get
RI + (NEG x) 1 pd
(where p=[x=1], d=1)
= PUSH 0; PUSHGLOBAL $NEG; MKAP; PUSHGLOBAL $+; MKAP;
UPDATE 2; POP 1; UNWIND
We cannot apply the RI[ + E: E2 ]] optimization of the last section, because
the + is only given one argument.
However, the reason we are evaluating (f x) must be to apply it to
something, and when it is applied to something the first argument of the + will
giving:
be evaluated. Hence we could evaluate the first argument straight away,
RI[ + (NEG x) Ipd
(where p=[x=1], d=1)
= PUSH 0; NEG; PUSHGLOBAL $+; MKAP;
UPDATE 2; POP 1; UNWIND
general rule is
This is better because it does not construct the graph for ($NEG x). The
RI + Ell ed
= E[[ E ]] p d; PUSHGLOBAL $+; MKAP;
UPDATE (d+1); POP d; UNWIND
