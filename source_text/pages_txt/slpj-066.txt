Section 4.2 Translating Miranda into the enriched lambda calculus
65
4.2.7 Repeated Variables
It appears at first that it is easy to use a conditional equation to eliminate
repeated variables, by introducing a new variable name to replace one of the
occurrences of the repeated variable, and adding an appropriate equality
condition. For example, we could rewrite the definition of noDups (given in
Section 4.2.1) thus:
noDups []
noDups [x]
[]
= [x]
noDups (x:y:ys) = noDups (y:ys), x=y
noDups (x:y:ys) = x : noDups (y:ys)
(The last two equations could now be combined into a conditional equation
with two alternatives.) Unfortunately, this approach occasionally conflicts
with the left-to-right rule originally given for pattern-matching. For example,
given the following definition:
nasty x x True = 1
nasty x y z
= 2
consider the evaluation of
nasty bottom 3 False
where the evaluation of bottom fails to terminate (for example, bottom could be
defined by the degenerate equation: bottom = bottom). We might expect that
the evaluation (nasty bottom 3 False) would not terminate, since we will try to
evaluate bottom in order to compare it with 3. However, suppose we trans-
formed the definition of nasty to use a conditional equation:
nasty' x y True = 1, x = y
nasty' x y z
= 2
Now, if we evaluate (nasty' bottom 3 False), bottom will match x and 3 will
match y, but the match of True against False will fail, so the second equation
will be tried, and deliver the answer 2. Hence, nasty and nasty' behave
differently, and the transformation is invalid. (Note: nasty and nasty' also
behave differently for expressions such as (nasty 1 2 bottom).)
function multi:
There is a further complication raised by repeated variables. Consider the
multi p q q p = 1
multi p q r s = 2
Should we compare the first and fourth arguments, and then compare the
second and third arguments, or the other way around? The order of
comparison is important, because it affects termination; consider
(multi bottom 2 3 4).
This section has shown that repeated variables in a pattern are not as
straightforward as at first appeared (the examples were suggested by Simon
