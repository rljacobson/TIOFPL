Section 9.7 The type-checker
179
9.7.4 Type-checking Lambda Abstractions
When type-checking (LAMBDA x e), we know nothing at the outset about the
type of x. So we associate x with a scheme of the form
(SCHEME [] (TVAR tvn)), where tvn is a new type variable. Because this
scheme has no schematic type variables, the various occurrences of the
variable will be assigned the value of the same type variable. This is the formal
counterpart of our decision to insist that all occurrences of the same LAMBDA-
bound variable should have the same type.
tclambda :: type_env -> name_supply -> vname -> vexp
"tclambda gamma ns x e
-> reply (subst,type_.exp)
= tclambda1 tvn (tc gamma' ns' e)
! where ns' = deplete ns
gamma' = new_bvar (x,tvn) : gamma
tvn
= next_name ns
tclambda1 tvn FAILURE
= FAILURE
tclambda1 tvn (OK (phi,t))
= OK (phi, (phi tvn) $arrow t)
new_bvar (x,tvn) = (x,SCHEME [] (TVAR tvn))
9.7.5 Type-checking let-expressions
When type-checking an expression (LET xs es e), we first of all type-check
the right-hand sides in the list es. We then have to update the environment so
that it associates the appropriate schematic types with the names in the list xs,
and type-check the body e. The details of constructing the 'appropriate'
schematic types are slightly involved, so we shall hide them in the definition of
a function add_decls.
tclet :: type_env -> name_supply
-> [vname] -> [vexp] -> vexp
-> reply (subst, type_exp)
tclet gamma ns xs es e
= tclet1 gamma ns0 xs e (tci gamma ns1 es)
where (ns0,ns1) = split ns
tclet1 gamma ns xs e FAILURE
= FAILURE
tcleti gamma ns xs e (OK (phi,ts))
= tclet2 phi (tc gamma" ns1 e)
where gamma" = add_decls gamma' ns0 xs ts
gamma' = sub_te phi gamma
(ns0,ns1) = split ns
