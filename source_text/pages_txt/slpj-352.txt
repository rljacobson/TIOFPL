354
Chapter 20 Optimizations to the G-machine
20.7 Avoiding Repeated Unwinding
Sometimes an application node is known not to be the root of a redex, but
because this information is not recorded we will unwind it every time we EVAL
it, only to find that it is already in WHNF. If this information were present in
the application node, EVAL would see this and return immediately (as it does
for integers, for example) rather than beginning an unwind.
This optimization only becomes important when strictness analysis is being
used, because then functions may be EVALuated when they are passed as strict
arguments. Without strictness analysis, functions are only evaluated when
they are applied.
We can incorporate the information that an application node is in WHNF
rather easily. All that is required is an extra tag AP-WHNF, which replaces the
AP tag on application nodes which are known to be in WHNF (i.e. irreducible
at the top level). If case analysis is implemented as outlined in Section 19.4,
then the EVAL entry of AP-WHNF's entry table will be the same as that for
integers; that is, an immediate return to the caller. This is much faster than
UNWINDing and then returning when the function at the tip of the spine is
found to have too few arguments.
There are two ways in which an application node can be given an AP-WHNF
tag:
(i) At compile-time, when the C scheme is compiling the application of a
known function to too few arguments. The required modification is
shown in Figure 20.9. The condition in curly braces means that the top
application node of the graph is known to be in WHNF. The lower
vertebrae will also be so identified by the recursive call to C.
CI f E1 ... En ] pd {where f is a global of arity > n}
= C[ En ] p d; C[ f E1 ... En-1 ] p (d+1); MKAP-WHNF
Figure 20.9 Modifications to the C scheme to use AP-WHNF
Similar optimizations apply to RS and ES, but we will see a more
elegant way of describing them (and the C modification too) in the next
chapter.
(ii) At run-time, when rearranging the stack before entering a function.
Referring back to Section 18.5.1, all the vertebrae that are below the root
of the redex at the completion of the UNWIND instruction are known to be
in WHNF, since each represents the application of a function to too few
arguments. For example, consider the graph
$
