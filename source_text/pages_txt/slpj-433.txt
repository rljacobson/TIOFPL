Appendix
435
style and gives the functional programmer access to a range of programming
possibilities not available to his imperative counterpart.
Infinite lists also provide the means for handling problems of interactive input/
output and communicating processes within a functional framework.
ZF Expressions
ZF expressions (also called list comprehensions) give a concise syntax for a rather
general class of iterations over lists. The notation is adapted from Zermelo Frankel set
theory (whence the name ZF). A simple example of a ZF expression is:
[ n*n In <- [1. . 100] ]
This is a list containing (in order) the squares of all the numbers from 1 to 100. The
above expression would be read aloud as 'list of all nen such that n drawn from
[1. .100]'. Note that n is a local variable of the above expression. The variable-binding
construct to the right of the bar is called a 'generator' - the *<-' sign denotes that the
variable introduced on its left ranges over all the elements of the list on its right. The
general form of a ZF expression in Miranda is:
[ body | qualifiers ]
where each qualifier is either a generator, of the form var<-exp, or else a filter, which is
a boolean expression used to restrict the ranges of the variables introduced by the
generators. When two or more qualifiers are present they are separated by semicolons.
An example of a ZF expression with two generators is given by the following definition
of a function for returning a list of all the permutations of a given list:
perms [] = [[]]
perms x = [ a:y | a <- x; y <- perms (x-[a]) ]
The use of a filter is shown by the following definition of a function which takes a
number and returns a list of all its factors,
factors n = [ i l i <- [1. .n div 2]; n mod i = 0 ]
ZF notation often allows remarkable conciseness of expression. We give two
of sorting a list:
examples. Here is a Miranda statement of Hoare's 'Quicksort' algorithm, as a method
sort [] = []
sort (a:x) = sort [ b I b <- x; b<=a ] ++ [a] ++ sort [ b I b <- x; b>a ]
Here is a Miranda solution to the eight queens problem. We have to place eight
queens on chess boards so that no queen gives check to any other. Since any solution
must have exactly one queen in each column, a suitable representation for a board is a
list of integers giving the row number of the queen in each successive column. In the
following script the function queens n returns all safe ways to place queens on the first n
columns. A list of all solutions to the eight queens problem is therefore obtained by
printing the value of (queens 8). This example is taken from Turner [ 1982].
queens 0 = [ [c] ]
queens n = [ q:b | q <- [0. .7];b <- queens(n-1); safe q b ], n>0
safe q b = and [ "checks q b i | i <- [o. .#b-1] ]
checks q b i = q=bli \/ abs(q - bli)=i+1
It is interesting to note that this is a problem whose solution would have involved
backtracking if it had been programmed in an imperative language. Lazy evaluation
enables us to avoid backtracking, by programming explicitly in terms of a list of all
