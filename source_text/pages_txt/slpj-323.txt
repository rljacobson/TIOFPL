Section 19.2 Implementation
325
adds 4 to register EP and puts the result in register 0. It can also be used to
move literal constants:
moval 4,r0
loads 4 into ro.
The subroutine call and return instructions are jsb and rsb.
19.2.2 The Stack Representation
The G-machine stack is represented by a data area to hold the stack, together
with a stack pointer held in a register, called EP. The stack grows downwards,
and each element of the stack is a 32-bit VAX word. EP points to the top
element of the stack, so elements can be pushed onto the stack using pre-
decrement of EP, and popped off with post-increment. For example,
movi 10,-(%EP)
movl (%EP)+, r0
Push register 0
Pop register 0
As with any stack we must be careful to check for stack overflow. At first it
looks as if we must perform this check (if the target machine's hardware does
not) on every push. A much cheaper solution is available, however, because
the amount of stack used by a function is totally predictable at compile-time
(apart from EVAL and UNWIND instructions). All we need do is compute the
amount of stack needed by a function (excluding any EVALs or UNWINDs), and
check at the beginning of the function that sufficient stack space is available.
An UNWIND at the end of the function can consume an unpredictable
amount of stack, so it must check for overflow on each push. An EVAL causes
an UNWIND followed by a function call, both of which are now dealt with, so
EVAL need only check for dump overflow.
19.2.3 The Graph Representation
The graph is represented by a large heap area of storage. Each node of the
graph is represented by a cell in the heap. Each cell consists of a tag and one or
more fields. The tag and each field occupy one VAX machine word (four
bytes), and the words constituting a cell are arranged contiguously. A two-
field cell would look like this:
Byte offset
Tag
4
Field 1
8
Field 2
It may seem rather wasteful to use four bytes to store a tag, but it gives
considerable uniformity to heap allocation, and offers the opportunity for an
ingenious optimization (see Section 19.4).
