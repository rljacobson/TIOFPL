Section 5.3 The Miranda pattern-matching compiler
91
For example, (x:xs) is represented by (CON "CONS" [VAR "x", VAR "xs"]).
We need two functions on constructor names. The function arity given a
constructor returns its arity, and the function constructors given a constructor
returns a list of all constructors of its type:
arity
:: constructor -> num
constructors :: constructor -> [constructor]
For example (arity "NIL") returns 0, and (arity "CONS") returns 2. Both
(constructors "NIL") and (constructors "CONS") return
["NIL", "CONS"].
the
list
5.3.2 Expressions
Next, we need a data type for representing expressions:
expression ::= CASE variable [clause]
1 FATBAR expression expression
clause
::= CLAUSE constructor [variable] expression
For example, the case-expression:
case xs of
NIL
CONS y ys
E:
E2
would be represented by
CASE "xs"
[CLAUSE "NIL" [] E.',
CLAUSE "CONS" ["y", "ys"] E2']
the expression
where E1', Ez' are the representations of the expressions E1, E2. Similarly,
E1 0 E2
would be represented by
FATBAR E1' E2
The '. . .' in the definition of the type expression stands for other
constructors used to represent other expressions, such as variables,
applications and lambda abstractions. We do not need to know anything
about these other expressions, except that there is a substitution function
defined for them.
subst :: expression -> variable -> variable -> expression
For example, if E represents the expression (f x y), then (subst E "_u1" "x")
represents the expression (f _u1 y).
