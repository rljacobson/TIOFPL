284
Chapter 17 Storage Management and Garbage Collection
into a contiguous area in to-space. Furthermore, it is fairly easy to
arrange that cells that point to one another get copied into physically
adjacent locations, which significantly improves locality and gives
opportunities for extra-compact list representations (cdr-coding)
[Baker, 1978]. This process is sometimes called linearizing since linked
lists get copied into a contiguous linear area of store, and it further
reduces the storage overheads of a copying collector. The improvement
in locality may also give improved paging performance in a virtual
memory system.
Reference-counting does not inherently perform any compaction, but
there is no reason why a compactor could not run concurrently with a
reference-counting garbage collector.
(iii) Sparsely used heap/virtual memory. Mark-scan and copying collectors
visit all accessible cells, not just those in immediate use. In contrast,
reference-counting collectors visit only cells in current use. For heaps in
which only a small fraction of the accessible data is in active use, this
represents a strong advantage for reference-counting
Without compaction the accessible cells get thinly spread through the
address space, giving appalling paging behavior. The locality-improving
possibilities of copying collectors (or reference-counting plus a copying
compactor), mentioned above, thus make them preferable to sliding
compaction.
(iv) Parallel machines and real-time performance. Since garbage collection
began, researchers have tried to find ways to run garbage collection in
parallel with useful computation, in an endeavor to eliminate the
embarrassing pause'. For mark-scan collectors this may be achieved by
arranging that garbage collection is performed by a process (or
processor) in parallel with useful computation. The algorithm is, of
course, more complicated [Steele, 1975; Kung and Wong, 1977; Dijkstra
et al., 1978].
For copying collectors, an ingenious scheme allows the copying
process to take place incrementally, a fixed small amount being
performed whenever a cell is allocated [Baker, 1978]. This scheme
increases the overheads of the useful computation somewhat, in both
time and space, and fails completely if to-space fills up before copying is
completed.
Reference-counting collectors are inherently distributed in time, and
hence need no modification for real-time performance.
(v) Effect of heap occupancy. The performance of mark-scan and copying
collectors degrades sharply as the heap gets full, since all the accessible
data have to be visited in order to recover the few unused cells.
Reference-counting, on the other hand, is unaffected by heap occupancy.
(iv) Cyclic structures. Mark-scan and copying collectors have no problem
with cyclic structures, but reference-counting cannot recover them. The
reason is that when a cell refers to itself it may have a non-zero reference-
