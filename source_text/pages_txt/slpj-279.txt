Section 16.5 Comparison with supercombinators
279
but with a larger constant. Joy et al. [1985] summarize these and other related
results.
By way of comparison, Hughes [1984] shows that the supercombinator
technique has a worst case complexity of 0(Nlog N), but is typically linear.
To conclude, for a lambda expression of size N, SK combinator compilation
time and code size is worst case 0(N?) and typically 0(Nlog N), while super-
combinator compilation time and code size is worst case 0(Nlog N) and
typically linear.
16.5 Comparison with Supercombinators
SK combinators represent one extreme of graph reduction techniques.
Complex reductions are reduced to the composition of many fast, simple
reductions, so the 'grain' of execution steps is about as small as it can
conceivably be. This is a mixed blessing, and we attempt a summary of the
pros and cons at this point.
16.5.1 In Favor of SK Combinators
(i) A small, fixed set of combinators can be implemented directly in
hardware, thus bypassing a level of interpretation. This is analogous to
moving from machine code to microcode.
(ii) The instantiation of lambda bodies is done lazily, thus avoiding
instantiating sections of graph which are subsequently to be discarded.
(iii) The technique is fully lazy.
(iv) The reduction machine is relatively simple to implement.
16.5.2 Against SK Combinators
(i) The 'grain' of execution steps is too small. Since the arguments to a
function are pushed down into its body one level at a time, many
intermediate application nodes are created and almost immediately
taken apart again. This means that an SK combinator reducer consumes
a lot of transient storage, which increases the load on the garbage
collector.
(ii) The translation to combinators is expensive compared with super-
combinator techniques, and the resulting program is larger (see Section
16.4).
iii) With SK combinators, the larger program increases the number of
storage accesses required, as does the creation and subsequent examina-
tion of intermediate application nodes.
(iv) Any scheme for improving performance using cacheing must operate
with a unit of cacheing of a single node. A supercombinator machine can
