Section 18.5 Compiling a supercombinator definition
307
18.5.3.3 E is an application
If E is an application (E: E2), where Er and E2 are arbitrary expressions, then
the expression to be constructed is the application of Er to E2. It is easy to do
this: first construct an instance of Ez (leaving a pointer to the instance on top of
the stack), then construct an instance of E: (likewise), then make an
application cell from the top two items on the stack, and leave a pointer to the
application cell on top of the stack. This can be achieved by the following rule:
C[[ E: E2 1 p d = C[[ E2 ] p d; CH[ E1 1| p (d+1); MKAP
Notice that the current context is one deeper during the second call to C, so we
passed it (d+1) instead of d.
MKAP is an instruction which takes the top two items on the stack, pops
them, forms an application node in the heap, and pushes a pointer to this node
onto the stack. If MKAP took its arguments in the other order, we could
construct first E, and then E2. This might seem to be a more logical order, but
we will see later that it is more convenient to construct Ez first.
18.5.3.4 E is a let-expression
Next, consider the rule for let-expressions
C[[ let x = Ex in Eb I p d
where x is a variable and Ex, Et are expressions (we consider only the case of a
single definition). We recall that a let in a supercombinator body is just a way
of describing a graph (with sharing) rather than a tree. We can deal with let in a
very straightforward way.
(i) First we construct an instance of Ex, leaving a pointer to it on the stack.
(ii) Then we augment p to say that x is to be found at offset (d+1) from the
base of the context (which is true, since it is on top of the stack).
(iii) Then we construct an instance of Eb, using the new values of p and d,
leaving a pointer to the instance on top of the stack.
(iv) Now a pointer to the instance of En is on top of the stack, and underneath
it is a pointer to the instance of Ex. We no longer want the latter, so we
squeeze it out by sliding down the top element of the stack on top of it.
Figure 18.8 shows the execution of a let after these four stages.
In symbols:
C[[ let x = Ex in Eb I p d
= CI[ Ex ] p d; C[[ Eb ]] p[x=d+1] (d+1); SLIDE 1
Remembering that p is a function taking a variable as its argument, the
notation 'p[x=d+1]' means 'a function which behaves just like p except when it
is applied to x, in which case it delivers the result (d+1)'. In other words,
