Section 19.4 More on the graph representation
335
The second thing we must do is alter the implementation of UPDATE. Recall
that 'UPDATE k' updates the root of the redex, which is pointed to by the kth
element of the stack, with the result, which is on top of the stack. The new
implementation of 'UPDATE k' must therefore do three things:
(i) Overwrite the vertebra pointed to from the kth element of the stack with
an indirection node, whose indirection pointer points to the result.
(ii) Overwrite the kth element of the stack to point directly to the result (not
to the indirection node). This is really just an optimization, but ensures
that the result of EVAL is never an indirection cell. This is helpful when,
for example, the result of an EVAL is known to be an integer; in this case it
is a nuisance to have to check for an indirection also.
(iii) Pop the result from the stack.
instruction:
This gives the following code sequence for the 'UPDATE d' G-code
movi 4*d(%EP), .2
moval IND, (12)+
12 points to root of redex
movi (%EP), (12)
IND tag
movi (%EP)+,4*d(%EP)
Put result into indirection cell
Overwrite vertebra and pop result
That's all! In addition, the garbage collection entry point(s) in the indirection
Chapter 17.
cell entry table can perform the 'shorting out' of indirection nodes discussed in
19.4.5 Boxed versus Unboxed Representations
The Chalmers G-machine uses boxed representations for all basic values.
There are two reasons for this:
(i) A boxed representation of a basic value has a tag in just the same place as
any other value, so that generic operations can be implemented
uniformly. With unboxed representations generic operations would have
to perform an initial test to separate pointers from non-pointers before
doing case analysis as before.
(ii) An unboxed representation would need to carry around a pointer bit with
each field. This is rather tiresome. On the VAX the pointer bit could
either be packed into the same 32-bit word as the value, or kept in a
separate byte (or word) which was moved around with the value. In the
former case there has to be much stripping off and tacking on of pointer
bits, and integers are restricted to only 31 bits. In the latter case there
have to be two target code 'move' instructions instead of one whenever a
value is moved around.
Of course, this problem would go away in a target architecture more
specifically suited to graph reduction.
