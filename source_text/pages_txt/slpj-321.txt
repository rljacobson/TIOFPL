EVAL
<v:S, G[v=AP v' n], EVAL:C, D>
<v:[], G, UNWIND:[], (S,C):D>
<n:S, G[n=FUN 0 C'], EVAL:C, D>
<n:[], G, C':[], (S,C):D.>
<n:S, G[n=INT i], EVAL:C, D> => <n:S, G, C, D>
and similarly for CONS and non-CAF FUN nodes.
UNWIND <n:[], G[n=INT i], UNWIND:[], (S,C):D>
<n:S, G, C, D>
and similarly for CONS nodes.
<v:S, G[v=AP v' n], UNWIND :[], D>
<V' :V:S, G, UNWIND:[], D>
<Vo:V1:. . .:VK :S, G Vo=FUN k C
[VI=AP Vi-1 ni, (1sisk)
UNWIND: []. D>
<n1:n2:. . .:nk:VK :S, G, C, D>
{a<k}
<Vo:V1:. . .:Va:[]. G[vo=FUN k C'], UNWIND:[], (S,C):D>
<Va:S, G, C, D>
RETURN <Vo:V1:.. .:VK: [], G, RETURN:[], (S,C) :D> => <VK:S, G, C, D>
JUMP
<S, G, JUMP L:. . .:LABEL L:C, D> => <S, G, C, D>
JFALSE
<n:S, G[n=BOOL true], JFALSE L:C, D> => <S, G, C, D>
<n:S, G[n=BOOL false], JFALSE L:. . .:LABEL L:C, D>
=>
<S, G, C, D>
Figure 19.1 G-machine state transitions (control)
PUSH
<no:m1:. . .:nk:S, G, PUSH k:C, D>
<nk :no:n1:. . .:nk:S, G, C, D>
PUSHINT
PUSHGLOBAL similarly
<S, G, PUSHINT i:C, D> => <n:S, G[n=INT i], C, D>
POP
<n1:n2:...:nk:S, G, POP K:C, D> => <S, G, C, D>
SLIDE
<no:n1:...:nk:S, G, SLIDE k:C, D> => <no:S, G, C, D>
UPDATE
<no:n1:. ..:nk:S, G, UPDATE k:C, D>
<n1:. . .:nk:S, G[nk=G no], C, D>
ALLOC
<S, G, ALLOC k:C, D>
<n1:n2:. ..:nk:S, G[m1=HOLE, . .., nk=HOLE], C, D>
HEAD
<n:S, G[n=CONS n1 n2], HEAD:C, D>
<m1:S, G, C, D>
NEG
<n:S, G[n=INT i], NEG:C, D>
<n':S, G[n'=INT (-i)], C, D>
ADD
<n1:n2:S, G[n1=INT i1, n2=INT i2], ADD:C, D>
=><n:S, G[n=INT (i1+iz)], C, D>
MKAP
CONS
similarly
<n1:n2:S, G, MKAP:C, D> => <n:S, G[n=AP n1 n2], C, D>
Figure 19.2 G-machine state transitions (stack and data)
