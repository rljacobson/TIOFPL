Section 12.4 Updating the root and indirection nodes
215
where we use V to identify indirection nodes.
This expedient seems not to be necessary in an implementation in which
everything is boxed, since we can just copy the top node of the object over the
shows.
root of the redex. However, we still need to take care as the next section
12.4.2 Updating where the Body is a Single Variable
Consider our example, the expression ((Ax.x) (f 6)):
@$
There are two ways in which we can update the root of the redex:
(i) We could copy the root cell of the result on top of the root cell of the redex
thus:
@$
reduces to
@$.
Now the result (seen from the point of view of node $) is quite correct
(viz. (f 6)). However, now the application of f to 6 has been duplicated,
(f 6) may be evaluated twice if node # happens to be shared. This would be
wasted work if (f 6) were expensive; we have lost laziness. Notice that this
problem can only arise if the body of the lambda abstraction consists of a
single variable. If the body is an application, then the root of the result
will be a newly constructed application cell, and hence cannot be shared.
Even if this were not the case, and the (f 6) were already in normal
form, node $ is a duplicate of node #, which is a waste of storage space.
Furthermore, this alternative might not be possible in an implemen
tation supporting variable-sized cells, if the root cell of the argument was
bigger than the root cell of the redex.
(ii) We could take the hint from Section 12.4.1, and use an indirection node.
We would then overwrite node $ with an indirection to node #, thus:
@$
reduces to
V$
@#
