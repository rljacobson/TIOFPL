84
Chapter 5 Efficient Compilation of Pattern-matching
This can be reduced to the equivalent call:
match us
[ ( ps1, E1[u/v1] ),
( PSm, Em[u/Vm] )]
E
where, as usual, E[M/x] means 'E with M substituted for x'. In order to avoid
too many subscripts, a Miranda-like notation. has been used here; for
example, we write (u:us) instead of [u1, ..., Un]. The general case corres-
ponds to the first example above, where u is u1, us is [uz, U3], V1 is f, psi is
[NIL, ys], and so on.
It is not hard to show that the rule is correct, that is, that the two match
expressions are equivalent. This follows from the definition of match and the
semantics of pattern-matching.
5.2.3 The Constructor Rule
The above step has left us with the following call of match:
match [U2, U3]
[ ( [NIL,
ys
J. (A u1 ys)
( [CONS x XS, NIL
], (B U1 x xs)
( [CONS x xs, CONS y ys], (C U1 x xs y ys) ) ]
ERROR
In this case, the list of patterns in every equation begins with a constructor.
This call is equivalent to the following case-expression:
case U2 of
NIL
=> match [u3]
[ ( [ys],
(A U1 ys)
) ]
ERROR
CONS UA US
=match [U4, Us, U3]
[ ( [x, XS, NIL],
(B U1 X xs)
( [x, xs, CONS y ys], (C U1 x xs y ys) ) ]
),
ERROR
This call is derived by grouping together all equations that begin with the same
constructor. Within each group, new variables are introduced corresponding
to each field of the constructor. Thus NIL, which has no fields, requires no new
variables, while CONS, which has two fields, introduces the variables u4 and
Us. These new variables are matched against the corresponding subpatterns of
the original patterns.
It may be useful here to look at a second example. In compiling the
definition of a function like nodups, one would encounter the following call of
