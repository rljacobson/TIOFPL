266
Chapter 16 SK Combinators
When we apply this compiled expression to an argument x, the reduction
sequence begins like this:
S (S (S (K IF) Cc) Ct) Cf x
S (S (K IF) Cc) Ct x (Cf x)
S (K IF) Cc X (Ct x) (Ct x)
K IF x (Cc x) (ct x) (C: x)
IF (Cc x) (ct x) (ct x)
Notice that we have not constructed an instance of et or er as we did in the
supercombinator case. Instead we have postponed this instantiation by
building the expressions (ct x) and (C+ x). Only the branch selected by the IF
will be evaluated any further.
The effect of S is to push the argument down one level (only) into the body
of the function. This is advantageous if any parts of the body are discarded.
The price paid for this laziness is the allocation of intermediate nodes to
hold the partially instantiated branches of the IF. For example, the application
node (c: x) would not have been allocated by a supercombinator implemen
tation. In addition, the reduction steps are rather small. This question is
further discussed at the end of the chapter.
16.1.5 1 is Not Necessary
Curiously enough, S and K are sufficient on their own, because the expression
(S K K) is extensionally equal to I:
S K K x
I X
K x (K x)
X
X
Hence I = S K K
It is for this reason that this chapter is entitled 'SK combinators', rather than
'SKI combinators'. However, it is only of theoretical interest; all reasonable
implementations include I.
16.1.6 History
This remarkable and counter-intuitive transformation of lambda expressions
into combinators was first developed by Curry and Feys [1958], but was
thought to be of more mathematical than practical interest until David Turner
used it as the basis of an implementation of the functional language SASL
[Turner, 1979a and 1979b]. In these papers he described a number of
optimizations to the basic compilation scheme which we will examine in the
next section.
