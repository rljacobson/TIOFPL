302
Chapter 18 The G-machine
We call the function F a compilation scheme, and we will use a number of
other compilation schemes as auxiliary functions to F. Using this notation will
allow us to express quite subtle compilation techniques in a compact and
elegant way.
Now we will 'turn up the magnification' still more, and consider what the
G-code for $F might look like. Before we can do this we must establish the
context in which the code for $F will execute, and in particular the
configuration of the stack which $F expects.
18.5.1 Stacks and Contexts
Suppose the G-machine was evaluating the expression ($F p q r s), and $F
was a supercombinator of two arguments. After the spine of the graph has
been unwound, the stack would look like this:
Stack base
Stack top
(In all the pictures the stack grows downwards.) This is not the most
convenient configuration during execution of $F, because in order to access
the arguments p and q it needs to do an indirect access via the vertebrae. The
solution is to rearrange the stack after unwinding is complete, and before the
supercombinator is executed, so that the elements on the stack point directly
to the arguments, thus:
Stack base
P
Stack top
The rest of the spine is still there, of course, but it has not been drawn.
Notice that we do retain a pointer to the root of the redex, because we will
