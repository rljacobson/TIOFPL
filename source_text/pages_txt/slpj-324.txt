326
Chapter 19 G-code - Definition and Implementation
AP n m
AP
n
m
CONS n m
CONS
n
m
INT i
INT
HOLE
HOLE
FUN k C
See Section 19.4.3
Figure 19.3 Node representations in the G-machine
Boxed representations of basic values are used. The various types of node
are represented as shown in Figure 19.3.
A copying garbage collector is used, so only half the heap area is in use at
any time. Cells are allocated contiguously in the current heap area, and a
register called HP points to the next free word. Cells can then be allocated
simply by incrementing HP; indeed this can be done at the same time as the
contents of the cell are filled in by using the VAX auto-increment instruction.
It appears at first that HP should be checked after each increment to see if
the heap is exhausted (which initiates garbage collection), which would
require an extra instruction for each allocation. Instead, however, the
compiler computes how much heap will be allocated by each super-
combinator, and inserts code at the beginning of the supercombinator to
check that enough heap is available. If not enough is available, garbage
collection is invoked. Hence, during execution of a supercombinator there is
no danger of heap exhaustion, so cells can be allocated with a simple auto-
increment on HP.
19.2.4 The Code Representation
The code is the VAX machine code, together with the program counter.
19.2.5 The Dump Representation
The dump is the VAX system stack, together with its stack pointer held in the
(special) SP register. This stack is addressed in the same way as the other
stack.
19.3 Target Code Generation
Having established concrete representations for the four components of the
G-machine state, we now turn our attention to the task of generating target
code from the G-code instruction sequence. We begin with a simple method,
and then demonstrate a simple but effective optimization technique.
