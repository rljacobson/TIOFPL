Section 18.5 Compiling a supercombinator definition
301
together with a distinguished one ($Prog), and produces a G-code program.
The G-code program will consist of the following parts:
(i) A segment of initialization code, which will perform any run-time
initialization necessary.
(ii) A segment of G-code which evaluates the distinguished super-
combinator $Prog and prints its value. This will probably follow
immediately after (i).
(iii) A segment of G-code corresponding to each supercombinator definition.
Each of these will be identified by an initial label.
(iv) Labelled segments of G-code corresponding to each built-in function
(such as + or CONS). This constitutes the run-time library, since it is the
same for all programs.
The code segments for (i) and (ii) can be fairly simple. All we need for (i) is a
G-code instruction BEGIN which labels the beginning of the program and
initializes anything necessary. Then to evaluate $Prog we will first push it onto
the stack (using a G-code instruction PUSHGLOBAL), then evaluate it (using
the EVAL instruction) and then print it (using the PRINT instruction). Here is a
code sequence that could be generated to initialize the system and print $Prog:
BEGIN;
Beginning of program
PUSHGLOBAL $Prog;
Push $Prog onto stack
EVAL;
Evaluate it
PRINT;
Print the result
END
End of program
We have felt free to invent G-code instructions out of thin air to perform the
steps of the program. We will continue to do this, and will wait until the next
chapter before giving them a more precise meaning. The EVAL instruction is
discussed in Section 18.8.1.
We now turn our attention to (iii), compiling code for supercombinators,
leaving (iv) for Section 18.8.
18.5 Compiling a Supercombinator Definition
We may depict the compilation of a supercombinator definition like this:
$F X1 X2 = E
F
G-code
for $F
We can regard the compiler as a function F, which takes a supercombinator
definition as its argument, and returns the compiled G-code as its result. Using
the [[ ]] notation:
FI[ $F X1 X2 = E ]] = ...G-code for $F. . .
