76
Chapter 4 Structured Types and the Semantics of Pattern-matching
The semantic equations of (Ap . E) are:
Evall[ Ak. E ]
Eval[[ Ak. E ]
a = Eval|[ E ]
if a = Eval[ k ]
a = FAIL
if a + Eval[[ k ]] and a + 1
Eval[[ AK.E ]
1=1
Evalf[ A(s pi . . . Prs) . E 1 (s a1 . . . arg) = Eval[[ Ap1. . .APrg . E ] a1 . . . ars
Eval[ A(s p1 . . . Prs) . E ]
Eval[ A(s p1 . .. Prs) . E ] 1
.E ] (s' a1 . . . arg') = FAIL if s + S'
Eval[ A(t pi . . . Pn). E ] a = Eval{[ Ap1 . . .Apnt . E I (SEL-t-1 a)
(SEL-t-r a)
where k is a constant
s is a sum constructor of arity rs
t is a product constructor of arity rt
Pi is a pattern
E is an expression
al, a are values
The SEL-t-i functions are defined as follows:
SEL-t-i (t a1 . . . aj . . . ar) = ai
T
SEL-ti 1
=
where t is a product constructor of arity r.
The I operator is defined as follows:
a
I b =
if a # 1. and a # FAIL
FAIL | b = b
[ b = 1
T
Figure 4.5 Semantics of pattern-matching lambda abstractions and [
structure. Indeed, the implementation described in Chapters 18-20 will
compile case-expressions and I respectively to precisely such machine code!
4.5 Summary
Structured data types have proved more complicated than at first appeared!
We have discussed the background and semantics of pattern-matching,
showing how to translate a Miranda function definition involving pattern-
matching into the enriched lambda calculus. This required us to define two
new constructs, pattern-matching lambda abstractions and the | operator,
whose semantics we then defined. To clear the way for a more efficient
translation, we then introduced case-expressions, describing their semantics
in terms of a transformation into the constructs previously described.
The next two chapters complete the pattern-matching story. Chapter 5
