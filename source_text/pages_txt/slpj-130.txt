Section 7.2 Reduction rules for list comprehensions
129
of quicksort: the list is divided into those elements less than or not less than
the first element, and the two sublists are sorted recursively:
sort []
= []
sort (x:xs) = sort [y ! y <- xs; y < x]
++ [x] ++
sort [y I y <- xs; y >= x]
(Here, ++ is list append.)
Patterns may appear to the left of the <- arrow. For example, suppose that
lists, so that
the function zip returns a list of pairs of corresponding elements of a pair of
zip ([1,2,3], [4,5,6]) = [(1,4), (2,5), (3,6)]
Then we can define a function vecAdd for performing vector addition (adding
corresponding elements of two lists) as follows:
vecAdd xs ys = [x+y ! (x,y) <- zip (xs,ys)]
The pattern (x,y) appears to the left of a <- arrow. For example,
vecAdd [1,2,3] [4,5,6] = [5,7,9]
It is often convenient to use zip with list comprehensions in this way.
More generally, in a generator 'p <- L' the pattern p may be refutable. In
this case, elements of the list L which do not match the pattern are simply
filtered out. The function singletons takes a list of lists and returns the
elements of each list of length one:
singletons xs = [x | [x] <- xs]
For example,
singletons [ [1,2], [5], []. [2] ] = [5, 2]
Here the '[x]' to the left of the arrow is the refutable pattern. The elements
[1,2] and [] do not match the pattern, and so are filtered out.
For simplicity, in Sections 7.2-7.4 we will ignore the fact that a pattern may
appear on the left of the < - arrow, and only deal with variables. The results of
these sections will then be extended to patterns in Section 7.5.
(In Miranda there is a second form of ZF expression, written with curly
braces, which indicates that duplicates should be removed from the result list
and generators should be 'diagonalized'. This form will not be dealt with
here. There is also another form of generator which we do not cover here. )
7.2 Reduction Rules for List Comprehensions
Just as reduction rules (such as the B-rule) can be given to define the behavior
of lambda abstractions, so can reduction rules to define the behavior of list
comprehensions be given.
