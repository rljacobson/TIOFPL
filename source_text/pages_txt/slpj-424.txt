426
Chapter 24 Parallel Graph Reduction
The first method has the advantage of simplicity, but it is rather inefficient,
since repeated attempts are made to execute a task which is still blocked for
the same reason. Some care would have to be taken to ensure that the
machine did not spend all its time trying to resume blocked tasks, while never
getting around to executing the tasks which would remove the blockage.
In order to implement the second method we would somehow have to
attach the blocked task to the marked node. Then when the mark is taken off
the node, the blocked task can be put back in the task pool. We could achieve
this by adding an extra field to every application node, which pointed to a list
of tasks which should be reawakened when the mark on the node is removed.
This is the approach taken by the ALICE machine (see below).
Attaching an extra field to every application node seems rather wasteful,
since most of them will not have any tasks blocked on them, and an alternative
would be to overwrite the head of the application node with a pointer to a list
of blocked tasks, and to remember the old head in the tail of the list. Some
mechanism would then be required to indicate that there were blocked tasks
queued up on a marked node.
24.7 Locality
All the issues we have discussed so far have been logical issues, concerning the
abstract model of agents reducing a graph. Having fixed the details of the
model we then need to take decisions concerning its physical embodiment.
For the most part we regard a discussion of these physical issues as beyond the
scope of this book, since they are largely technological.
There is, however, one question which straddles the boundary between
these two areas, and which has a pervasive effect on the architecture of the
machine, namely the question of locality.
24.7.1 What is Locality?
Consider the communication within a commercial company. The
organization of the company is intended to enable workers to perform their
tasks by communicating mainly with fellow workers in the same office.
Somewhat less often a worker may need to communicate with someone
further away but in the same building, and less often still he may need to
communicate with a colleague further away. Longer-distance communication
costs more, however, both in time and money, and an excessive proportion
of non-local communication generally indicates an inefficiently organized
company. It is therefore important to achieve predominantly local
communication, a property we call locality of reference.
The idea of locality is well established in conventional computer
architecture. It is an observed property of most programs that they tend to
reference data which have either been referenced in the recent past (temporal
