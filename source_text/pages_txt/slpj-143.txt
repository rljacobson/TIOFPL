142
Chapter 8 Polymorphic Type-checking
type variables, which in Miranda have the special form *, * *, * **, etc. Also,
t1,1, . . ., tm,rm are type expressions, built up using variables from the list vi, . . ., VK
and names for type-forming operations which are either built-in or declared
elsewhere in the script.
For example, in the type declaration
tree * ::= LEAF * | BRANCH (tree *) (tree *)
V1 is *, C1 is LEAF, and ti, 1 is *; C2 is BRANCH, and t2,1, t2,2 are both (tree *).
tree' is a type-forming operator since, given a type as 'argument', it produces a
type as its 'result'; for example, (tree char), (tree num), (tree (tree num)). In
this sense, the built-in basic types (such as char, num, bool) are simply type-
forming operators which take no arguments.
A declaration with the form above means that an object of a type
name t's . . . t'k
must have one of the constructed forms
Ci X1 . . . Xn
where xja:t'ij for 1sjsn, and t'y denotes the result of simultaneously
substituting the type expressions t'1, . .., t'k for the type variables vi, . . ., Vk in
the type expression ti,J.
For example here is an object of type (tree char):
BRANCH (LEAF 'a') (LEAF 'b')
In this case, t'1 is char; the form of the object is a BRANCH, and x1 is
(LEAF 'a')::tree char, x2 is (LEAF 'b')::tree char.
8.1.4 Functions
Given types A and B, we use the notation:
A -> B
to denote the type of functions f applicable to objects a::A, whose values (f a)
are of type B.
For example, (char -> num) is the type of integer-valued functions of
characters. The function 'code' which maps a character to its ASCII code is of
this type.
(char -> bool) is the type of boolean-valued functions of characters. For
example, the function
isdigit ch = (code '0' <= x) & (x <= code '9')
where x = code ch
is a function of this type.
([char] -> [num]) is the type of functions whose arguments are lists of
characters, and whose values are lists of integers. The function which returns
the list of ASCII codes corresponding to a character list is of this type.
