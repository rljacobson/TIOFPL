Section 8.1 Informal notation for types
141
(A1,. . ., An)
is the type whose values are of the form of tuples
(a1, . . ., an)
where a1::At,. .., an::An. The important points about tuples, so far as typing is
concerned, are:
E
(ii)
the coordinates of a tuple need not be of the same type;
the type of a tuple determines the number of its coordinates (that is, its
dimension), and their types.
8.1.2 Lists
Given a type B, [8] is the type of lists whose entries are of type B. More
specifically, an object of type [B] must be
(i) either the empty list, which is denoted by [ ];
E
)or a non-empty list, formed by prefixing an object b::B to a list bs::[B],
which is denoted by b:bs.
If all the successive entries bi,...,bk of a finite list are known, we may write
it using the notation
[bi. ..., bx]
The important points about lists, so far as typing is concerned, are:
(i) In contrast with the coordinates of a tuple, all entries of a list must be of
the same type. For example, it would make no sense to form a list in which
the entries were alternately characters and truth values. (We could in fact
define a type of such entities, but they would not be lists. )
(ii) In contrast with the dimension of a tuple, the length of a list is not
determined by its type. Indeed, when programming in a lazy language,
we may operate with infinite lists such as the list of positive integers.
There is no requirement that a list must be built up from the empty list by
a finite number of applications of the prefixing operation (b:bs), or that a
valid.
principle of well-founded induction on the structure of lists should be
8.1.3 Structured Types
Tuple types and list types are both examples of structured types, which were
introduced in Chapter 4. As explained there, in Miranda the general form of a
declaration of an operator for forming structured types is:
name vi . . . Vk ::= Ci ti,1 . . . ti,n
I .. .
1 Cm tm, 1 . . . tm,Im
where m21, n20 for 1sism, and k20. Here vi, ..., Vk stand for schematic
