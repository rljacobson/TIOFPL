312
Chapter 18 The G-machine
18.6.2 Garbage Collection of CAFs
Supercombinators which have one or more arguments need not be garbage-
collected at all, since they cannot grow in size. CAFs, on the other hand, can
grow in size without bound. For example, consider the program:
$from n = CONS n ($from (+ n 1))
$Ints = $from 1
$F x y = ...$Ints. . .
$Prog = . . .$F . . .
$Prog
$Ints is the infinite list of integers, and we would like to recover the space this
list occupies when it is no longer needed. Unfortunately, we will be unable to
reclaim this space if we decide that all supercombinators should not be subject
to garbage collection.
$Ints can be recovered when there are no references to it, directly or
indirectly, from $Prog. However, $Prog may refer to $Ints indirectly, by using
$F which uses $Ints, so we cannot recover $Ints just because $Prog does not
refer to it directly.
The only clean way around this is to associate with each supercombinator
(of any number of arguments, including zero) a list of CAFs to which it refers
directly or indirectly. Then, for mark-scan garbage collection, to mark a
supercombinator of one or more arguments we simply mark all the CAFs in its
associated CAF list. To mark an unreduced CAF we mark its CAF list, while a
reduced CAF is indistinguishable from any other heap structure and is
marked as usual.
Another way to understand this is to see that in a template-instantiating
implementation, the template for $F would refer to that for $Ints. Hence, $Ints
would be reached by the mark phase of garbage collection during the normal
marking traversal of $F. In a compiled implementation, however, the
reference to $Ints is buried in the code for $F, and the CAF list for $F makes
this dependency sufficiently explicit for the garbage collector to understand it.
This technique, or something similar, is essential to prevent ever-
expanding CAFs from filling up the machine.
18.7 Getting it all Together
We can now put all the pieces together to describe how to compile a complete
program. Consider the program:
$F X = NEG x
$Prog = $F 3
$Prog
