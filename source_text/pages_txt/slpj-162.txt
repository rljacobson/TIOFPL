Section 8.7 Some cautionary remarks
16
8.6.3 Rule for let-expressions
{..y :: C. . .}
. . . .
.. .X :: A' .. . X :: A" . ..
x:: A
B
let x.
B
Ay .
Here we have shown only the case where just one definition is made in the
let-expression: let x = E in E'.
Restriction: A' and A" are instances of A. No variable may be instantiated
which occurs in the type of a variable bound in a more global lambda
abstraction or letrec-expression (i.e. one further down the tree). The portions
of the figure in curly brackets indicate such a situation. Any type variables in A
shared with C may not be instantiated in forming A' and A".
8.6.4 Rule for letrec-expressions
. . .X :: A . . . X :: A . . .
. . .X :: A' . .. X :: A" . . .
X::A
B
B
letrec x.
Here we have shown only the case where just one definition is made in the
letrec-expression: letrec x = E in E'. Note that the occurrences of x within
the right-hand side of the definition must have the same type.
Restriction: just as in the let rule.
8.7 Some Cautionary Remarks
There is a beguiling similarity between the notion of type which we use in
mathematics, and the notion which we use in functional programming. It is all
too easy to transfer intuitions concerning the mathematical notion of type to
the notion used in programming. There are at least two important differences.
First, the types in a functional language are types of partial objects, whose
evaluation may not terminate. In contrast, the mathematical notion of type,
whose study began with Frege [Gaeck and Black, 1970] and Whitehead and
Russell [1910-1913], concerns total objects, whose definitions are well
