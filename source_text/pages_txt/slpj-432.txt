434
Appendix
Currying and Higher-order Functions
Miranda is a higher-order language - functions are first class citizens and can be both
passed as parameters and returned as results. Function application is left-associative, so
when we write f x y it is parsed as (f x) y, meaning that the result of applying f to x is a
function, which is then applied to y. So for example if we define the function plus by:
plus x y = x + y
then plus 3 is a function in its own right - it is the function that adds 3 to its argument.
This device, whereby any function of two or more arguments is treated as a higher-
order function, is known as 'currying' (after the logician H.B. Curry).
The use of higher-order functions is an important feature of the programming style
made possible by functional languages, and often lends itself to very concise forms of
expression. As a simple example of higher-order programming consider the function
foldr, defined by:
foldr op k [] = k
foldr op k (a:x) = op a (foldr op k x)
foldr. Examples:
All the standard list processing functions can be obtained by partially parameterizing
sum = foldr (+) 0
product = foldr (*) 1
reverse = foldr postfix []
where postfix a x = x ++ [a]
Note that in Miranda an operator can be passed as a parameter, by enclosing it in
parentheses.
Lazy Evaluation
Miranda's evaluation mechanism is 'lazy', in the sense that no subexpression is
evaluated until its value is known to be required. One consequence of this is that it is
possible to define functions which are non-strict (meaning that they are capable of
returning an answer even if one of their arguments is undefined). For example, we can
define a conditional function as follows:
if True x y = x
if False x y = y
and then use it in such situations as if (x=0) 0 (1/x).
The other main consequence of lazy evaluation is that it makes it possible to write
down definitions of infinite data structures. Here are some examples of Miranda
definitions of infinite lists (note that there is a modified form of the . . notation for
endless arithmetic progressions)
ones = 1 : ones
nats = [0. .]
odds = [1,3. .]
fibs = f 0 1
where f a b = a : f b (a+b)
The last example is the list of all Fibonacci numbers - 0,1,1,2,3,5,8,13 . . . (each
number from the third onwards is the sum of its two predecessors).
The presence of infinite data structures in a programming language is far from being
a mere curiosity - as with higher-order functions it has a strong effect on programming
