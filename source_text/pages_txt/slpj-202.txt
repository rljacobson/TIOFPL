202
Chapter Il Selecting the Next Redex
E3
E3
$ @
E2
Xx
E1
body
(a)
(b)
Figure 11.1 Finding the next redex (marked $)
Some evaluators insist that an expression always reduces to a data object in
the end. They will therefore treat the case of a built-in function with too few
arguments or lambda expression with no arguments as an error. If in addition
the program is type-checked the test can be omitted altogether, since there
will always be enough arguments for a function. (Note: this is not true for
other reduction orders. For example, an applicationder reducer will
evaluate the argument to a function before applying a function, and the
argument might itself be a partially applied function.)
Thus to find f we just go down the left branch of each application node from
the root. This left-branching chain of application nodes is called the spine of
the expression, and the act of 'going down' the spine is sometimes called
unwinding the spine. Continuing the analogy, the vertebrae of the spine are
the application nodes encountered during unwinding, the ribs are the
arguments of the vertebrae (the Er in Figure 11.1), and the tip of the spine is
the extreme bottom of the spine (IF is at the tip of the spine in Figure 11.1(a)).
It is therefore rather easy to find the next redex to reduce. We just unwind
the spine until we find a function, and then, based on the function we find, we
go back up the spine to find the root of the redex.
Notice that the most natural way to proceed is to reduce the top-level redex,
so there is a good 'fit' between normal order reduction and graph reduction.
We have to go to extra trouble to evaluate arguments to functions before
applying the function.
11.6 The Spine Stack
So far we have said that we should 'unwind the spine' and 'go back up the
spine', without saying how to do so. In particular, as we unwind the spine we
pass by the arguments that we will subsequently require during the reduction
of the function (built-in or lambda abstraction) found at the tip. This suggests
that we should keep a stack of pointers to the vertebrae as shown in Figure
