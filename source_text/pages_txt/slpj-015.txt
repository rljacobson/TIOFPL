14
Chapter 2 The Lambda Calculus
In what follows we will use lower-case names for variables, and single
upper-case letters to stand for whole lambda expressions. For example we
might say 'for any lambda expression E, . . .,'. We will also write the names of
built-in functions in upper case, but no confusion should arise.
2.2 The Operational Semantics of the Lambda Calculus
So far we have described only the syntax of the lambda calculus, but to dignify
it with the title of a 'calculus' we must say how to 'calculate' with it. We will do
this by giving three conversion rules which describe how to convert one
lambda expression into another.
First, however, we introduce an important piece of terminology.
2.2.1 Bound and Free Variables
Consider the lambda expression
(Ax. + x y) 4
In order to evaluate this expression completely, we need to know the 'global'
value of y. In contrast, we do not need to know a 'global' value for x, since it is
just the formal parameter of the function, so we see that x and y have a rather
different status.
The reason is that x occurs bound by the Ax; it is just a 'hole' into which the
argument 4 is placed when applying the lambda abstraction to its argument.
An occurrence of a variable must be either free or bound.
Definition of 'occurs free'
x occurs free in x (but not in any other variable or constant)
x occurs free in (E F)
x occurs free in. E
or
x occurs free in F
x occurs free in Ay . E
x and y are different variables
and x occurs free in E
Definition of 'occurs bound'
x occurs bound in (E F)
x occurs bound in E
or
x occurs bound in F
x occurs bound in Ay . E
(x and y are the same variable
and x occurs free in E)
or
x occurs bound in E
(No variable occurs bound in an expression consisting of a single constant
or variable.)
Note:'<>' means 'if and only if'
Figure 2.2 Definitions of bound and free
