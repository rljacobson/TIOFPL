314
Chapter 18 The G-machine
(iii) As a built-in run-time function. For example, at run-time the machine
may have to evaluate a graph like this
$CONS
X
The spine will be unwound and the function $CONS will be found at the
tip. Just as in the $from example (Section 18.2) the code for $CONS will be
entered to perform the reduction. This means that there should be a
G-code sequence for the $CONS function, and for all other built-in
functions.
It is for this reason that we prefix this form of CONS with a $. At
run-time it appears just like any user-defined supercombinator; that is as
a (boxed) G-code sequence. In the next few chapters, therefore, we will
not make any distinction between built-in functions and super-
combinators. Sometimes we will call them globals; this is the origin of the
PUSHGLOBAL instruction.
No confusion between the first two cases should arise, because the meaning
should be clear from its context. One slight annoyance is that now we have
C[[ CONS ]] p d = PUSHGLOBAL $CONS
which makes it look as if C'sticks the $ on a global', but this is contradicted by
the case of a supercombinator:
CI[ $X II p d = PUSHGLOBAL $X
We content ourselves with the general rule as given in the C scheme, namely
CI f Il p d = PUSHGLOBAL f
and remember that a $ is added to built-in functions. (This is, of course, a
purely notational point.)
The third case above raises the question of what the G-code sequences for
CONS and the other built-in functions are, and we will develop them in this
section. The built-in functions we will consider are those given in the left-hand
column of Figure 18.4; those in the right-hand column are analogous. In doing
this we will also develop some new G-code instructions.
18.8.1 $NEG, $+, and the EVAL Instruction
NEGate is an example of a function which has to evaluate its argument. As we
have seen before (Sections 11.4 and 12.2) this always seems to require a new
mechanism for recursive argument evaluation, and the G-machine is no
exception. The new mechanism we introduce is the G-code instruction EVAL,
which evaluates the top item on the stack, leaving the evaluated object on the
