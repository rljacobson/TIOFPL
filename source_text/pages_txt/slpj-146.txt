Section 8.2 Polymorphism
145
The function length works equally well on any list, regardless of the type of its
entries. For example, in the equations:
length [7,1,4]
length ['7','1','4','z'] = 4
3
length [(3,'a'),(26,'z') ] = 2
length [id,id]
NN
the function is used with the types:
[num]
[char]
-> num
> num
[(num, char)] -> num
[(A -> A)] -> num
respectively. We express the type of length by
length :: [A] -> num, for all types A
which conveys that
(i) length is a function;
(iii)
(ii) its arguments are lists;
its values are numbers;
(iv) the type of the entries in the argument list does not matter.
8.2.3 The Composition Function
Let us represent the composition of two functions f and g with a right-
associative infix dot, and define
(f . g) x = f (g x)
(We shall write the composition function 'compose' when we do not want to
indicate its arguments.) Composition is well defined so long as both its left-
and right-hand arguments are functions, and the type of arguments of its
left-hand argument is the same as the type of values of its right-hand
argument. For example, the following make perfect sense:
(i) decode . succ . code
where succ denotes the successor of an integer. The expression denotes a
function which returns 'b' from 'a', 'c' from 'b', and so on. The composi-
tion function is used here with the type:
(num -> char) -> (char -> num) -> char -> char
at its first occurrence, and with the type:
(num -> num) -> (char -> num) -> char -> num
at its second.
