208
Chapter 12 Graph Reduction of Lambda Expressions
Three important issues of implementation arise here:
(i) The argument may be bulky and/or contain redexes, so we should
substitute pointers to the argument for the formal parameter (see Section
12.1.1).
(ii) The redex may be shared, so we must physically overwrite the root of the
redex with the result (see Section 12.1.2).
(iii)
The lambda abstraction may be shared, so we must construct a new
instance of the lambda body, rather than substituting in the original body
directly (see Section 12.1.3).
We will deal with these issues in the following sections.
12.1.1 Substituting Pointers to the Argument
When substituting the argument for the formal parameter, we could just copy
the argument whenever the formal parameter occurred. But copying the
argument may be very wasteful, because
(i) the argument might be a very large expression, in which case we are
wasting space by making multiple copies of the same object;
(ii) the argument might contain redexes, in which case we are wasting work by
duplicating redexes which may subsequently have to be separately
reduced (if they are needed).
Both of these problems can be avoided by substituting pointers to the
argument for the formal parameter. This gives rise to sharing, whereby there
may be many pointers to the same expression, and it is for precisely this
reason that the expression tree becomes a graph. Figure 12.2 is an example of
this process in action, in which the (NOT TRUE) expression becomes shared.
Sharing by means of pointers was first suggested by Wadsworth [1971], who
called it graph reduction. It is the key idea that turns reduction into a practical
technique. The alternative, of copying the argument wherever it is used, is
called tree reduction or string reduction and is normally considered pro-
reduces to
@
NOT
TRUE
AND
NOT
TRUE
AND
(AX.AND x x) (NOT TRUE) -, AND (NOT TRUE) (NOT TRUE)
Figure 12.2 Pointer substitution
