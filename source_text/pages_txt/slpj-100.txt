Section 5.5 Uniform definitions
99
bottom. In order to perform this match it is necessary to evaluate bottom, and
this of course causes the entire expression to fail to terminate.
On the other hand, consider evaluation of:
mappairs' (+) [] bottom
Now matching against the first equation binds f to (+), matching [] against []
succeeds, and then ys is bound to bottom (without evaluating bottom). So the
expression returns [] instead of failing to terminate. This means that the
definition of mappairs' is not as symmetric as it appears.
Further, if the first two equations of mappairs' were written in the opposite
order, the two expressions above would change their meaning: now the first
would return [] and the second would fail to terminate. So even though the
first and second equations have the same right-hand side, the order in which
they are written is important.
The original definition of mappairs has none of these problems:
mappairs f [] ys
mappairs f (x:xs) []
mappairs f (x:xs) (y:ys) = f x y : mappairs f xs ys
Now
the
asymmetry
between
(mappairs (+) [] bottom)
(mappairs (+) bottom []) is apparent from the equations. Further, changing
and
the order of the equations does not change the meaning of the function.
In general, one might expect that whenever the equations do not overlap,
the order in which they are written does not matter. In fact, this is not true.
Consider the definition:
diagonal x
True False = 1
diagonal False y
diagonal True False z
True = 2
=
3
The three equations of this definition are non-overlapping, that is, at most one
equation can apply. However, by this definition, the evaluation of:
diagonal bottom True False
would return 1. On the other hand, if the order of equations in the definition
were reversed, so the third equation came first, then the above expression
would fail to terminate. So even though the equations do not overlap, the
order in which they are written is important.
Clearly, it would be useful to have a test that guarantees that the order of
the equations does not matter. We now define the class of uniform definitions,
which have this property. The definition of 'uniformity' is designed so that it is
easy to test whether a definition is uniform while applying the pattern-
matching compiler to it.
