Section 4.2 Translating Miranda into the enriched lambda calculus
61
This introduces a new sort of lambda abstraction, a pattern-matching lambda
abstraction, which has the form (Ap. E) where p is a pattern. This leaves us with
two questions:
(i) How can we translate a general Miranda function definition into pattern-
matching lambda abstractions?
(ii) What, exactly, does (Ap. E) mean?
We discuss the first in the remainder of this section, leaving the second for the
next section.
4.2.4 Multiple Equations and Failure
Consider first a Miranda function definition of the form
f pi = E1
f p2 = E2
f Pn = En
Intuitively, we expect the semantics to be 'try the first equation, and if that
fails try the second, and so on'. This introduces the idea that a pattern-match
might fail. Such failure does not necessarily indicate an error, since there
might be a subsequent equation which would match. Hence, we introduce a
new built-in value FAIL, which is returned when a pattern-match fails.
With the aid of this idea, we can translate the definition of f into the
following enriched lambda calculus expression:
f = XX. ( ((\p1' . E1') x)
I ((\p2' . E2') x)
I ((\pn' . En') x)
I ERROR)
where x is a new variable name that does not occur free in any Ei, the
expressions Er' are the result of translating the Ei, and the patterns pi' are the
result of translating the pi. The new definition of f can be read 'try to apply
(Api'. E1') to x, and if that succeeds return its result; otherwise try (Ap2' . Ez'),
and so on; if they all fail, return ERROR'.
Here ERROR is meant to be a special value whose evaluation indicates an
error, an event which should never occur.
The function I is an infix function, whose behavior is described by the
semantic equations:
a
I b = a
FAIL I b = b
if a+l and a+FAIL
T
I b = 1
Operationally, I evaluates its left argument; if the evaluation terminates and
