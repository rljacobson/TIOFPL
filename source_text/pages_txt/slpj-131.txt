130
Chapter 7 List Comprehensions
To present these rules, we will write comprehensions in the form
[E 1 Q]
where E is an expression and Q is a sequence of zero or more qualifiers. The
sequence Q will
(i) either begin with a generator, in which case the rule is of the form
[E IV <- L; Q']
where v is a variable and L is a list-valued expression;
(ii) or begin with a filter, in which case the rule is of the form
[E 1 B; Q']
where B is a boolean-valued expression;
(iii) or will be empty, in which case the rule is of the form
[E 1 ]
One does not normally see comprehensions with no qualifiers such as [E | ],
but they are useful for defining reduction rules in a uniform way.
Abbreviations should be expanded so that all comprehensions are in the
above form. In particular, generators of the form
V1, . .., Vn <- L
should be expanded to
Vi <- L; ... ; Vn <- L
where vi, ..., Vn are variables.
After abbreviations are expanded, the following five reduction rules suffice
to define list comprehensions:
[E I v <- [] ; Q]
[]
[E i V <- E' :L' ; Q]
[E | Q][E'/] ++ [E Iv <- L'; Q]
[E | False ; Q]
[]
[E | True ; Q]
[E | Q]
[E 1 ]
[E]
The first two rules define the behavior of generators, the second two define
the behavior of filters, and the last 'cleans up' after all the generators and
filters have been processed. The second rule uses the substitution notation of
Chapter 2, so [E ( Q][E'/v] means [E I Q] with all free occurrences of v
replaced by E'.
From rules (1) and (2) we can see that
(2b) [E | v <- [E1, ..., En]; Q]
- [E | Q][E1/] ++ ... ++ [E | Q][Ew/v]
