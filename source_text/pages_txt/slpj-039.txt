38 Chapter 3 Translating a High-level Functional Language into the Lambda Calculus
3.1 The Overall Structure of the Translation Process
Miranda is a powerful, high-level functional language, providing a rich set of
programming constructs. The purpose of the next few chapters is to demon-
strate how some of these constructs can be translated into the lambda
calculus. Specifically, we will discuss structured data types, pattern-matching,
conditional equations and ZF expressions. Miranda includes a number of
other constructs, such as abstract data types and structured data types with
laws, which we will not study in this book.
Even so, the translation we describe is a substantial task, and we begin by
outlining the structure of the translation process
It might be possible to translate a program directly from Miranda into the
lambda calculus, but this would be an extremely complicated translation, so
we will take a more step-by-step approach. In order to do this, it is convenient
to regard much of the translation as a process of successively transforming one
program into another, until finally the result is a program in the lambda
notation. (We are here using 'translation' to suggest a process which takes a
program in one language and produces a program in another, while a
'transformation' produces a program in the same language.)
Two ways of organizing the translation then suggest themselves:
(i) We could perform most of the translation by successive transformations
of one Miranda program into another, each transformation performing a
simplification step. We would complete the process by translating the
resulting (simple) Miranda program into the lambda calculus. The idea is
that the earlier transformations would have done all the hard work, so the
final step should consist of little more than a change of syntax.
(ii) Alternatively, we could begin the translation by performing a simple
syntactic translation of the Miranda program into an enriched version of
the lambda calculus. This enriched lambda calculus would include the
ordinary lambda calculus as a subset, but would also include extra
constructs, chosen so that the first step consists of little more than a
change of syntax. Then we could do most of the hard work by successively
transforming the expression into simpler and simpler forms, until it
becomes an ordinary lambda expression, free from any of the extra
constructs.
Initially, the first method looks more attractive than the second, because it
does not require us to define a new language (the enriched lambda calculus).
However, we choose to follow the second course of action for the following
reasons:
(i) Miranda is designed to be a language for programmers, not compilers,
and it lacks certain features that are desirable for a transformation-based
compiler. (The particular features lacking are lambda abstractions and
the ability to qualify any expression with local definitions. This is not a
criticism of Miranda - it just has a different purpose.)
