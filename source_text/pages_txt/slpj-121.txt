120
Chapter 6 Transforming the Enriched Lambda Calculus
(1) For each letrec construct a (directed) graph in which the nodes are the
variables bound by the letrec. There is an arc from one variable, f, to
another variable, g, if g occurs free in the definition off (i.e. the definition
of f depends directly on g). We call this graph the dependency graph.
Figure 6.4 shows the dependency graph for our example.
d
Figure 6.4 Example dependency graph
(2) Now, two variables x and y are mutually recursive if there is a path (direct
or otherwise) in the dependency graph from x to y and from y to x. But this
is precisely the definition of a strongly connected component of a graph, so
the next phase is to discover the strongly connected components of the
dependency graph. There are a number of standard algorithms for doing
this (see, for example, Aho et al. [1974, 1983a] and Dijkstra [1976]).
In our example, the strongly connected components are
{c,d} {f.g,h} {b} {a}
(We put non-recursive variables, such as a and b, in a singleton
component.) Each of the variables in each group depends on the others,
and these are the largest such groups.
(3) Next we need to sort the strongly connected components into dependency
order. In our example above this is to ensure that the let-expression for a
will enclose the let-expression for b. First of all we coalesce each strongly
connected component to a single node, forming a new graph (the
coalesced graph) which is guaranteed to be acyclic. Figure 6.5 shows the
effect of this operation. Now we can perform a topological sort to put
them in dependency order (this is again a standard algorithm [Aho et al.,
1983b]). A topological sort puts the nodes of an acyclic graph into a linear
order such that no node has an arc to an earlier node. Alternatively, a
suitable strongly connected component algorithm (such as those given
above) will produce the components in topologically sorted order, so that
a separate topological sort would not be necessary.
