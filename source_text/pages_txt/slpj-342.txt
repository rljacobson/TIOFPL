344
Chapter 20 Optimizations to the G-machine
in particular HEAD and IF, together with their analogs SEL-k-i and CASE. What
we would like to generate for the above example is this:
RI[ HEAD E1 E2 1 p d
= Cl[ E2 ] p d; El[ E1 1 p (d+1); HEAD; MKAP;
UPDATE (d+1); POP d; UNWIND
Achieving this optimization requires us somehow to apply an R-like
compilation scheme recursively to the (HEAD E1) subexpression, rather than
just giving up and using C. We call this new compilation scheme RS, and we
want RS to have a rule something like
RS[[ E1 E2 ]] p d = C[[ E2 ]] p d; RSI[ E: ] p (d+1)
We could then use RS by replacing the RI[ E1 E2 ]] rule with
RI E1 E2 1 p d = RS[[ E1 E2 ]] p d
(Warning: these rules are not yet correct as they stand here.) With these
modifications, the compilation of (HEAD E1 E2) would begin thus:
RI HEAD E: E2 ] p d
= RS[[ HEAD E1 E2 ]] p d
= CI[ E2 I p d; RS[[ HEAD E, I p (d+1)
Now the (HEAD E1) expression can be picked up with a special case in the RS
scheme.
The RS rule given above causes RS to descend the spine of the expression,
constructing its ribs using C, and putting them on the stack. The question
arises, however, of what RS should do when it reaches the bottom. At this
point, all the ribs of the expression are on the stack, so what RS should do is to
generate an appropriate number of MKAPs to construct the spine of the
expression, update the root of the redex, pop the arguments and UNWIND.
This means that RS must know how many ribs are on the stack, so it needs an
extra parameter, n. The real rule for RS now becomes
RS[[ E1 E2 ] p d n = C[[ E2 ]] p d; RS[[ E, ] p (d+1) (n+1)
It is invoked from the R scheme like this:
R[[ E1 E2 1 p d = RS[[ E: E2 ]] p d 0
When it reaches the bottom, AS simply constructs the spine with n MKAPs,
updates the root of the redex, pops the arguments and UNWINDs:
RS[[ f ]] pdn
= PUSHGLOBAL f; MKAP n; UPDATE (d-n+1); POP (d-n); UNWIND
RS[[ x Ipdn
= PUSH (d - p x); MKAP n; UPDATE (d-n+1); POP (d-n); UNWIND
'MKAP n' is an extended version of MKAP, equivalent to n repetitions of
MKAP. The offsets in the UPDATE and POP instructions take into account the
