406
Chapter 23 The Pragmatics of Graph Reduction
23.4.3 Transient Lists
One of the advantages of lazy evaluation is that data are only computed when
needed. For example, in the Miranda program
square n = n*n
sum (map square [1. . 1000])
the list of integers between 1 and 1000 is squared and added up as it is
generated. The system will not first produce the list of the first 1000 integers,
then square them and then add them up. We may think of it like this:
[1. . 1000]
square
sum
In a non-lazy system we would be tempted to write a special version of sum
which squared the elements of the list before adding them, to avoid
generating the intermediate list.
Unfortunately, this nice behavior does not always occur, as Hughes [1984]
points out. Consider the program
average xs = (sum xs) / (length xs)
average (map square [1. . 1000])
If we wrote in Pascal, we could write a program which uses bounded space to
compute the average of a list of integers, simply by maintaining a count of how
many integers had been encountered so far and a running total of their
values.
Unfortunately, a conventional functional language implementation will
first evaluate one argument of the division operator and then evaluate the
other. This means that the entire list of integers will reside in memory at once
It is clear that we would like to evaluate the arguments in parallel and in a
synchronized fashion (notice that the former does not imply the latter).
In the particular example given, it is possible to write a more efficient
version without resorting to parallelism, but the program is rather more
obscure. More seriously, though, Hughes shows that there are simple and
common programs which cannot run in bounded space on any sequential
evaluator.
Another example of the seriousness of this problem is the space complexity
of a straightforward coding of the quicksort algorithm. It turns out that this
has a linear transient space usage on average, but a quadratic transient space
usage in the worst case (the imperative algorithm uses linear space).
Hughes therefore suggests that even on a single processor implementation,
some form of parallelism is desirable if functional programs are to run
