Section 6.1 Transforming pattern-matching lambda abstractions
107
The function UNPACK-SUM-s takes two arguments, a function (in this case
(Ap:. . .Apr. E)), and a structured object. It checks whether the object is built
with constructor s: if not, FAIL is returned; if so, UNPACK-SUM-s takes the
object apart and applies the function (its first argument) to its components.
UNPACK-SUM-s is specified by the following semantic equations:
UNPACK-SUM-s f (s a1 . .. ar) = f at . . . ar
UNPACK-SUM-s f (s' a1 . . . ar) = FAIL
UNPACK-SUM-s f 1
if s + s'
T
As an example, recall the Miranda definition of reflect:
reflect (LEAF n)
= LEAF n
reflect (BRANCH t1 12) = BRANCH (reflect t2) (reflect t1)
This is translated to:
reflect = At. ( ((\(LEAF n) . LEAF n) t)
I ((\(BRANCH t1 12) . BRANCH (reflect t2) (reflect t1)) t)
I ERROR)
Now, applying the transformation gives:
reflect
= At. ( (UNPACK-SUM-LEAF ( An. LEAF n) t)
[ (UNPACK-SUM-BRANCH (Ati . At2. BRANCH (reflect 12) (reflect t1)) t)
I ERROR)
6.1.4 Reducing the Number of Built-in Functions
The trouble with the transformations of the previous section is that they
introduce several functions associated with each constructor. In this section
we discuss the implementation of these functions.
A structured object will be represented by the implementation as an
aggregate, consisting of the component fields together with a structure tag,
which distinguishes objects built by different constructors from each other
(see Section 10.3.1). It is this tag which can be used by UNPACK-SUM-s to
identify the constructor used.
In a type-checked system it is only necessary to distinguish objects from
other objects of the same type, so the structure tag can be a small integer in the
range 1. ..n (where n is the number of constructors in the type). This means
that, instead of requiring an UNPACK-SUM-s function for each constructor s,
it is only necessary to have a single family of functions UNPACK-SUM-d-rs,
where d is the integer structure tag which is recognized by UNPACK-SUM-d-rs,
and rs is the arity of s. In a similar way, the sum constructor functions can be
replaced with a family of functions PACK-SUM-d-rs, which take rs arguments
and construct an aggregate with rs fields and structure tag d.
We can perform an analogous set of replacements for the functions
associated with product types. UNPACK-PRODUCT-t can be replaced with
