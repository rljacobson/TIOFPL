Section 20.4 Compiling FATBAR and FAIL
347
is an equivalent definition for $F, but it will generate much less efficient
G-code. The reason is that the IF no longer has enough parameters, so R
cannot use the efficient test-and-jump sequence it would have generated for
the previous definition of $F.
This applies quite generally, and means that n-reduction should only be
performed if it eliminates a whole definition. In fact, the opposite process,
n-abstraction, may be desirable! However, 7-abstraction risks losing full
laziness, and we will not study it further.
A closely related point concerns the lambda-lifting algorithm. The
optimizations described in this section apply to expressions such as
(f E1 E2 . . .), where we know what f is. If we do not know what f is, it will
generate less good code. The way in which this tends to occur is:
fxgy = g ( + xy)
that is, when a function is passed in as an argument and then applied.
Unfortunately, fully lazy lambda-lifting results in many such expressions, and
this is the main motivation for eliminating redundant full laziness (see Section
15.6).
20.4 Compiling FATBAR and FAIL
So far we have not made any mention of the built-in function FATBAR, and its
companion value FAIL. In this section we will show a rather subtle
efficiently.
optimization due to Augustsson [1985], which implements them extremely
Suppose we have to compile
RI FATBAR E, E2 ]] p d
First, recall the semantic equations for FATBAR:
FATBAR a b = a
FATBAR FAIL b = b
if a # 1 and a # FAIL
FATBAR 1
b = 1
One way to proceed would be to compile E: with the E scheme, test the result
for FAIL and return E2 or E: accordingly:
RI[ FATBAR E, E2 I p d
= EI[ E1 ] p d; JFAIL L; UPDATE (d+1); POP d; UNWIND;
LABEL L; RI[ E2 ] p d;
'JFAIL L' tests whether the value on top of the stack is FAIL; if so, it pops the
stack and jumps to L; otherwise it does not pop the stack and does not jump.
A better way is to evaluate Et with the R scheme, but to jump to the
evaluation of Ez if FAIL is encountered. This entails adding two new parameters
to the R scheme, j and s, where j is the label to jump to, and s is the depth of the
current context expected by the code at j.
