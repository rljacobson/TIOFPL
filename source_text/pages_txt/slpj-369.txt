Section 21.2 Generalizing tail calls
371
21.2 Generalizing Tail Calls
The optimization of the previous section only applied when W was known at
compile-time to be a supercombinator of three arguments. We generalize this
idea for any W by simply replacing the JFUN instruction at the end of the code
for $F given in the previous section with a new instruction
DISPATCH 3
The argument 3 to DISPATCH gives the number of ribs currently on the stack.
The code for $F would then be
C[ E3 ]] p d;
CI E2 ]] p (d+1);
CI E1 1 p (d+2);
PUSHGLOBAL W;
SQUEEZE 4 2; DISPATCH 3
regardless of what W is (except that the PUSHGLOBAL would be a PUSH if W
was a variable). For the present we will not perform any compile-time analysis
of W; instead, we will simply generate the above code for $F and leave it to the
DISPATCH instruction to sort things out at run-time.
Root of $F-redex
r:@
n3: E3
n2: E2
n1:E1
f:W
Figure 21.3 Current context on entry to the DISPATCH instruction
Figure 21.3 shows the current context at the moment the DISPATCH
instruction is executed. We annotate the nodes with names using a colon to
make it easier to follow the rules for DISPATCH. For example, the root of the
$F-redex will be r in the rules for DISPATCH.
When the DISPATCH 3 instruction is executed it has to perform case
possibilities:
analysis on the function which is on top of the stack. There are several
(i) W is an application node;
(ii) W is a supercombinator of zero arguments;
