178
Chapter 9 A Type-checker
variable x can be resolved independently, as indicated by the schematic
variables in the type scheme associated with x.
tcvar :: type_env -> name_supply -> vname
tcvar gamma ns x
-> reply (subst,type_exp)
= OK (id subst, newinstance ns scheme)
where scheme = val gamma x
where
newinstance :: name_supply -> type_scheme -> type_exp
newinstance ns (SCHEME scvs t)
= sub_type phi t
where al = scvs $zip (name_sequence ns)
phi = alto_subst al
Here we have built an association list between the schematic variables and
an initial segment of the name sequence built on the given name supply. Such
an association list can be made into a substitution, by means of the function:
al_to_subst :: assoc_list tvname tvname -> subst
alto_subst al tvn
= TVAR (val al tvn),
tvn $in (dom al)
= TVAR tvn
9.7.3 Type-checking Application
When type-checking an expression (AP e1 e2) with respect to a type
environment gamma, we first of all try to construct a substitution phi which
solves the type constraints on e1 and e2 together. Suppose that the types t1
and t2 are derived for e1 and e2. We then try to construct an extension of phi
which satisfies the additional constraint
t1 = 12 ->t'
where t' is a new type variable. We obtain this extension, as usual, by unifying
t1 with 12 -> t'.
tcap :: type_env -> name_supply -> vexp -> vexp
-> reply (subst,type_exp)
tcap gamma ns e1 e2
= tcap1 tvn (tcl gamma ns' [e1,e2])
where tvn = next_name ns
ns' = deplete ns
tcap1 tvn FAILURE
= FAILURE
tcap1 tvn (OK (phi,[t1, t2]))
= tcap2 tvn (unify phi (t1,t2 $arrow (TVAR tvn)))
tcap2 tvn FAILURE = FAILURE
tcap2 tvn (OK phi) = OK (phi, phi tvn)
