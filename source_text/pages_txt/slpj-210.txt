210
Chapter 12 Graph Reduction of Lambda Expressions
We may describe the instantiation operation by a recursive function
Instantiate(Body, Var, Value), which copies Body substituting Value for free
occurrences of Var. This function implements precisely the substitution
operation described in Figure 2.3. Specifically:
Instantiate(Body,Var,Value) constructs Body[Value/Var]
Instantiate proceeds by case-analysis on the root node of Body, and each case is
a direct transcription of the corresponding line of Figure 2.3:
(i) if Body is a variable x and Var = x then return Value (here we substitute
Value for an occurrence of Var),
(ii) if Body is a variable x and Var + x then return Body,
(iii) if Body is a constant or built-in function then return Body,
iv) if Body is an application (E1 Ez) then return the application
(Instantiate(Et, Var, Value) Instantiate(E2, Var,Value)),
(v) if Body is a lambda abstraction Ax.E and Var = x then return Body - the
new lambda abstraction binds Var anew, so no substitutions should occur
inside it, and hence we can avoid instantiating it altogether,
(vi) if Body is a lambda abstraction Ax.E and Var + x then return
Ax . Instantiate(E, Var, Value) - we must instantiate the lambda abstraction
in case there are free occurrences of Var inside it.
This case is much simpler than the corresponding rule of Figure 2.3,
because we are assuming that Value has no free variables (see Section
11.3.2).
Figure 12.3 gives a possible definition of Instantiate in the C language.
The instantiation process is simple enough, but it risks copying large
expressions in which Var does not occur free at all, and hence which could be
shared. We could alleviate this by adding a new first clause to the definition of
Instantiate:
if Body does not contain any free occurrences of Var then return Body.
This would, however, be an expensive test to make. We might imagine some
sort of annotation scheme whereby we could precompute such information,
but it is hard to do in general (even Wadsworth did not give an algorithm!).
An implementation which manages to perform this test, or which does
something equivalent, is said to be fully lazy. We discuss full laziness in detail
in Chapter 15, but ignore it until then.
12.1.4 Summary
In the previous chapter we saw that lazy evaluation had two ingredients:
arguments to functions should be evaluated only if needed;
once evaluated, they should never be re-evaluated.
