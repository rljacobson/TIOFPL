376
Chapter 21 Optimizing Generalized Tail Calls
vertebrae vi, ..., Vx-1 are known to be in WHNF, so we can construct them as
AP-WHNF nodes.
The second rule covers the case when there are enough arguments, and the
rearrangement depicted in the previous diagram takes place, followed by a
jump to the code of the function.
<f:n1:n2:. ..:nk:" :Vk+1:. . .:Va:S,
G f=FUN a C
Vk+1=AP r nk+1
1, DISPATCH k:[], D>
VI=AP Vi-1 ni, (k+1<isa)
{k<a} => <m1:n2:. ..:nk:nk+1:. . .:na:Va:S,
G [VI=AP-WHNF f n:
VI=AP-WHNF Vi-1 ni (1<i<k)
.C, D>
r=AP-WHNF VK-1 nk
21.3 Compilation Using DISPATCH
In this section we discuss the compilation schemes and code generation
necessary to use the DISPATCH instruction.
21.3.1 Compilation Schemes for DISPATCH
It is rather simple to compile code to use the DISPATCH instruction, by
replacing two rules in the RS scheme (Figure 21.4). This is the reason why we
went to the trouble of developing the RS scheme.
RS[ x ] pd n = PUSH (d - p x); SQUEEZE (n+1) (d-n); DISPATCH n
RS[ f ] p d n = PUSHGLOBAL f; SQUEEZE (n+1) (d-n); DISPATCH n
Figure 21.4 Modifications to the RS scheme to use DISPATCH
21.3.2 Compile-time Optimization of DISPATCH
So far we have assumed that DISPATCH will do all its work at run-time. This is
potentially slow, and sometimes we know what W is at compile-time. We can
easily make use of this information to improve the code we generate.
All that is needed is for the code generator to watch for the sequence
PUSHGLOBAL $H; SQUEEZE p q; DISPATCH k
Now the code generator can do much of the case analysis on $H that would be
done at run-time. For example, it may observe that $H takes exactly k
arguments, in which case we have a tail call and can generate code to jump
directly to the code of $H. This would achieve precisely the effect we obtained
in the section on tail calls. Such a jump should, of course, be to the EXEC entry
of the function, after the arity check and stack rearrangement.
In particular cases we can do even better. For example,
PUSHGLOBAL $CONS; SQUEEZE 3 q; DISPATCH 2
