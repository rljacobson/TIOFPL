30
Chapter 2 The Lambda Calculus
The notation (p x), on the right-hand side, means 'the function p applied to
the argument x'.
Next we treat applications. It seems reasonable that the value of (E1 E2)
should be the value of E: applied to the value of E2:
Eval[[ E1 E2 I p = (Eval[[ E1 ]] p) (Eval[[ E2 ]] p)
The final case is that of a lambda abstraction. What should be the value of
(Eval[[ Ax. E ]] p)? It is certainly a function, and so we can fully define it by
giving its value when applied to an arbitrary argument, a:
(Eval[[ Ax. E ]] p) a
(Following our usual conventions about currying, we will omit the brackets in
future.) The following statement sums up our intuitions about lambda
abstractions:
The value of a lambda abstraction, applied to an argument, is the value of
the body of the lambda abstraction, in a context where the formal
parameter is bound to the argument.
Formally, we write
Eval[[ Ax. E ]] p a = Evall[ E ]] p[x=a]
where the notation p[x=a] means 'the function p extended with the
information that the variable x is bound to the value a'. More precisely:
p[x=a] x = a
p[x=a] y = py
if y is a different variable from x.
That's it! Apart from constants and built-in functions, each of which require
individual treatment, we have now provided a simple denotational semantics
for the lambda calculus. Figure 2.5 summarizes our progress.
Needless to say, this account is greatly simplified (though hopefully not
misleading). The main component that is missing is a description of the
collection of all possible values which Eval can produce. This collection is
called a domain, and it is quite a complicated structure, since it includes all the
Eval[[ k ] p
<see Section 2.5.3>
Eval[[ x ] p
Eval[ E1 E2 1 p
p x
Eval[[ Ax. E ] pa
=
(Eval[ E1 ] p) (Eval[[ E2 ] p)
= Eval[ E ] p[x=a]
where
is a constant or built-in function
is a variable
E, E1, E2
are expressions
Figure 2.5 Denotational semantics of the lambda calculus
