Section 18.6 Supercombinators with zero arguments
311
18.5.3.6 Summary
We are done! The C compilation scheme has been described in considerable
detail because the same ideas will be used again and again in what follows. It is
worth some study to ensure that you understand what is going on. Figures
18.10 and 18.11 summarize the C scheme.
18.6 Supercombinators with Zero Arguments
The lambda-lifting algorithm given in earlier chapters may produce some
supercombinators with no arguments. The most obvious example of this is the
$Prog supercombinator.
Such supercombinators are simply constant expressions (sometimes called
constant applicative forms or CAFs), since they have no parameters at all. The
presence of CAFs raises two issues, compilation and garbage collection,
which we now discuss.
18.6.1 Compiling CAFs
How should we compile CAFs? There are two alternatives:
(i) Do not compile them at all. Instead keep them as pieces of graph. Since
they are not functions they will never be copied, so they can be shared
without further ado. This is a perfectly acceptable solution, but it does
mean that the compiled program is a mixture of target machine code and
(ii)
graph.
Treat them as supercombinators with zero arguments and compile them
to G-code which will, when executed, construct an instance of their
graph. Since we want to share this graph (and not make repeated copies
of it) the instance should overwrite the compiled code in some way.
This is easily achieved. We allocate a single graph node, tagged as a
function, which holds a pointer to the compiled code. This node is shared
by anyone who uses the supercombinator. When the compiled code
executes, the current context will contain a pointer to that node as its only
element (since there are no arguments), so the node will be updated with
the result, and this update will be seen by anyone else sharing the node.
body.
The F scheme is therefore quite adequate to compile the code for the
The advantage of this is that the compiled program consists almost
entirely of target machine code, plus some individual graph nodes, one
per supercombinator. In the Chalmers G-machine these nodes are
allocated space physically adjacent to the target machine code of the
supercombinator, outside the main heap. Such CAF nodes should not be
in read-only memory, however, since they must be updated after their
code is executed.
