Section 13.3 Transforming lambda abstractions
229
These optimizations together exploit supercombinators that appear naturally
in the original program, and sometimes catch other n-reductions as well.
Caveat: it turns out that, for more sophisticated implementations,
performing such n-reductions is actually undesirable, unless they succeed in
eliminating a definition, which is always desirable. For a full explanation of
this point, see Section 20.3.4.
13.3.2 Parameter Ordering
When we take out several free variables from a lambda abstraction as extra
parameters the order in which we put them seems rather arbitrary. For
example, consider the program
(...
(Ax. Az. + y (* x z))
. ..)
where the '. . .' stands for some expression enclosing the Ax abstraction. It
could be transformed to
$S x y z = + y (* x z)
(.
(AX. $S x y)
.)
or alternatively it could be transformed to
$S y x z = + y (* x z)
(.. .
(Ax . $S y x)
.. .)
Both x and y are free, and it does not seem to matter which order we take them
out in. However, let us take the second possibility one stage further, by lifting
the Ax abstraction:
$S y x z = + y (* x z)
$T y x = $S y x
(...
($T y)
.)
Now we can remove the redundant parameters from the definition of $T, and
