40 Chapter 3 Translating a High-level Functional Language into the Lambda Calculus
abstractions, constants and built-in functions therefore remains exactly as
described in Chapter 2. Likewise, all functions are written in prefix form, and
the same conventions hold concerning brackets.
The only difference from the ordinary lambda calculus is the provision of
four extra constructs. They are:
(i) let-expressions and letrec-expressions;
ii) pattern-matching lambda abstractions;
the infix operator Q;
iv) case-expressions.
Of these, we will only describe the first here. The other three all concern
pattern-matching, and cannot be defined before the discussion of pattern-
matching itself. This is given in Chapter 4, and the remaining three constructs
are defined there.
Figure 3.2 summarizes the syntax of the enriched lambda calculus for future
reference.
<exp> ::= <constant>
<variable>
Constants
Variables
<exp> <exp>
A <pattern> . <exp>
Applications
let
Lambda abstractions
<pattern> = <exp> in <exp> Let-expressions
letrec <pattern> =
= <exp>
Letrec-expressions
in <exp>
<pattern> = <exp>
1
<exp> I <exp.>
case <variable> of
Fat bar
<pattern>
<exp>
Case-expressions
<pattern>
=> <exp>
<pattern> :
::=
= <constant>
<variable>
Constant patterns
<constructor> <pattern>
Variable patterns
Constructor patterns
<pattern>
Figure 3.2 Syntax of enriched lambda expressions
3.2.1 Simple let-expressions
One of the main constructs in any functional language is the definition,
whereby a name is bound to a value. This mechanism is provided in the
enriched lambda calculus, using let-expressions and letrec-expressions.
We begin by defining simple let-expressions. They are called 'simple' by
contrast with pattern-matching let-expressions, which we deal with later. A
simple let-expression has the following syntax:
let v = B in E
