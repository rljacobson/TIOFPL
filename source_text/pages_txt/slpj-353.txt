Section 20.8 Performing some eager evaluation
355
UNWIND will identify the node labelled $ as the root of the redex, and it
follows that the node labelled # is in WHNF, because it represents the
application of + to one argument only.
The tag on these vertebrae could therefore be changed to AP-WHNF as
they are removed from the stack. We can formally describe this by
modifying one of the clauses describing the UNWIND instruction:
<Vo:VI:. . .:VK:S, G: No=FUN k C
[vi=AP VI-1 n, (1sisk)]
UNWIND : [], D>
<n1:n2:. . .:nk :Vk:S, G[vi=AP-WHNF vi-1 ni, (1sisk)], C, D>
For a sequential implementation this modification would make the stack
rearrangement take longer, since the tags of all the vertebrae have to be
changed. Whether it is worth the extra effort depends on the balance
between this cost and the benefits arising from faster EVALS.
20.8 Performing Some Eager Evaluation
Under certain circumstances we may wish to perform a reduction even though
a completely lazy implementation would postpone it. Consider compiling the
expression (CONS E, E2) with the C scheme:
C[ CONS E1 E2 ]] p d
= C[[ E2 1 p d; C[[ E1 1 p (d+1); PUSHGLOBAL $CONS; MKAP; MKAP
But it is clear that when (and if) evaluated, the expression (CONS E1 E2)
will simply return a CONS cell, with CI[ E1 ] in one branch and CI[ E2 ]] in
the other. So it would be much better to construct it directly, with the code:
CI CONS E1 E2 1 p d
= C[[ E2 ]] p d; CHI E: ] p (d+1); CONS
The code is shorter and fewer cells are allocated, so we win all round (despite
being less lazy). We can achieve this optimization simply by adding the above
rule to the C compilation scheme.
If we have the information described in the previous section, telling which
variables have been evaluated, we can perform some further optimizations to
C. C is used when we are not sure if an expression will be evaluated or not.
However, consider compiling (+ x 3) with the C scheme in a context where x
has already been evaluated. Our present scheme will produce
C[[ + x3 ]pd
= PUSHINT 3; PUSH (d - p x); PUSHGLOBAL $+; MKAP; MKAP
It would be considerably cheaper to generate
CI + x 3 1 pd { x evaluated }
= PUSHINT 3; PUSH (d - p x); ADD
This risks performing an addition which turns out not to be necessary
