Section 24.5 Blocking tasks
423
graph
sum is thus defined as a partial application of foldr, and is represented by the
sum: @
foldr
Now suppose we were evaluating an expression which used sum in many
places. As a task unwinds into the sum graph it marks the top node, thus
blocking any other tasks from unwinding into it. But the sum graph is already
in WHNF, so there is no point in making other tasks block. It is perfectly safe
to allow any number of tasks simultaneous access to the sum graph, and it is
quite peculiar to insist on serial access to a commonly used function!
This is a specific instance of a general rule:
Once a subgraph is in WHNF it will never be altered, so it is quite safe for
many tasks to have (read only) access to it.
This suggests that we need another kind of application node, a WHNF
application. A graph rooted at a WHNF application node is known already to
be in WHNF, so the node is not marked when a task unwinds into it.
Supercombinators, numbers, CONS cells and so on are, of course, already
known to be in WHNF. This scheme will ensure that:
(i) if a graph may contain redexes, and hence may be altered, then only one
task is allowed in it;
(ii) if a graph is known to be in WHNF, and hence cannot alter, then any
number of tasks can have simultaneous access to it.
We must now consider when we can mark an application node as being
in WHNF. Sometimes this will be possible at compile-time. Consider the
supercombinator
$F X =. IF (> x 0) x
The two application nodes in the body are known to be WHNF applications,
since IF requires three arguments. Compile-time WHNF marking is not
always possible, so that further improvements accrue from performing some
run-time WHNF marking as well. Consider the expression ($G E1 E2 E3),
this:
where $G is a supercombinator requiring three arguments. It has a graph like
$G
E1
