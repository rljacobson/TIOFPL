154
Chapter 8 Polymorphic Type-checking
seems to be the function which when applied to a function c of type
(num -> char -> A) returns the value (c 0 'a'). On the other hand,
F code 0 'a' K
would certainly be an error, since it would result in the evaluation of (code 0),
whereas the function code is applicable only to characters. At last we can see
the point of the assumption. In order for an expression to be well typed, it is
not enough that it cannot 'go wrong' when evaluated on its own, or in a
particularly favorable context. We have to make sure that it cannot 'go wrong'
when plugged into any well-typed context.
So we shall require that variables bound in a lambda abstraction receive the
same type at all their occurrences. Without 'outside knowledge' of the
arguments to which an abstraction will be applied, we must assume the worst:
all occurrences of a variable bound by the same lambda abstraction must
share the same type.
To sum up, so far we have adopted the following rules:
(i) The function part f of an application (f a) has a function type (A -> V),
where A is the type of the argument part a and V is the type of the
application (f a).
(ii) All occurrences of a A-bound variable must have the same types.
Moreover, when solving a system of equations, we have used the following
rule:
If (T1 -> T2) = (T1' -> T2'), then T1 = T1' and T2 = T2'
(This follows from a more general law which states that if two compound type
expressions are equal, then they must be formed with the same construction,
and their corresponding parts must be equal.)
8.5.2 A Mistyping
Consider the expression
An . Aa. Ab. b n (n a b)
(This is sometimes used to define the successor function on natural numbers in
the type-free lambda calculus.) Written as a tree, the expression is:
n :: TO a :: T1
@
b :: T2 n :: T3
T4
b :: T5
@
@
T6
T7
T8
An . la . Ab .
T9
