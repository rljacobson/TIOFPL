Section 19.4 More on the graph representation
331
An application node
AP
Field 1
Field 2
Entry table for AP nodes
Entry point for AP_EVAL
Entry point for AP_UNWIND
Entry point for AP_PRINT
etc.
The AP_EVAL code, for example, performs the appropriate operations to
evaluate an application node. Each distinct node type has a different entry
table, so that case analysis on a cell can now be performed simply by jumping
to the appropriate entry of the table pointed to from the tag of the cell.
Naturally, the EVAL entry must occupy the same position in the entry table
for each node type.
19.4.2 Implementing EVAL
In this section we will consider the implementation of the EVAL instruction.
This comes in two parts:
(i) the code that is generated in-line for an EVAL G-code instruction;
(ii) the code for the EVAL entry of each tag's entry table.
First of all, here is the VAX target code which might be generated in-line for
an EVAL G-code instruction:
movl (%EP),r0
mov! (10),r1
Top of stack to ro
jsb *O_Eval(r1)
Tag to r1
Call Eval code
The element on top of the stack is fetched into 10 (without popping the stack),
its tag is fetched into r1, and the final instruction is an indexed subroutine call,
where O_Eval is the offset of the Eval entry in the entry table. Notice that by
using a jsb instruction we push the return address (the code pointer C) onto
the system stack (the dump D), so that we can return to the instruction
following EVAL when evaluation is complete.
We now consider the Eval code thus entered. Suppose that the cell in
