Section 16.1 The SK compilation scheme
261
16.1.1 Introducing S, K and I
Consider the lambda abstraction Fun, where
Fun = (\x.e1 e2)
where e1 and ez are arbitrary expressions. Given the reduction rule for S, an
equivalent expression is Fun', where
Fun' = S (Ax.e1) (Ax.e2)
We can demonstrate that Fun and Fun' are equivalent by applying them to the
same argument:
Fun arg
=
(Ax.e1 82) arg
(e1[arg/x]) (ez[arg/x])
Fun' arg =
S (Ax.e1) (Ax.e2) arg
((Ax.e1) arg) ((1x.e2) arg)
(e1[arg/x]) (ez[arg/x])
Hence Fun = Fun' by extensional equality.
We call the transformation from Fun to Fun' the S-transformation, and
denote it using a '=>' arrow, in the following way:
Ax.01 02 => S (Ax.e1) (Ax.e2)
Notice the difference between the arrows '=>' and '-'. Both denote the
transformation of one expression into an equivalent one, but the former
reduction.
denotes a compile-time transformation and the latter denotes a run-time
As an example of the use of the S-transformation, consider the expression
h = AX. OR X TRUE
Applying the S-transformation twice, we get
AX. OR X TRUE
S
S
S (AX.OR x) (Ax. TRUE)
S (S (AX. OR) (Ax.x)) (Ax. TRUE)
being used.)
(We use an 'S' in the left margin to indicate that the S-transformation rule is
As we perform the S-transformation, the Ax gets pushed down one level
each time, because so long as its body is an application we can apply the
S-transformation again. Each time we apply the S-transformation we produce
two new Ax abstractions, but with smaller bodies. In the end the body will be
an atomic object, and there are two cases to consider:
(i) The expression is (1x.x). This is just the identity function, which we call I,
with the definition
I x - X
