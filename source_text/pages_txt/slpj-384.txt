386
Chapter 22 Strictness Analysis
Now, certainly Eval#[[ [ ] = 0 (since I certainly fails to terminate). Using
this fact, together with a rule similar to the second Eval% rule, gives
Eval#[[ f 1 ] = Eval#[[ f ]] Eval# [ 1 I
= f#* O
Remember that we are free to invent whatever rules we like for Eval#, so long
as we can prove that the safety condition holds. We will not do so here, but
Burn et al. [1985] give the formal proofs.
To summarize our progress, for each function f we must first find its abstract
version f#. Having done so, we compute (f# 0), and if the result is 0 then f is
certainly strict. The hope is that computing (f# 0) is very much cheaper than
terminate!
computing (f 1). It would be hard to do worse, since the latter may fail to
22.2.3 Developing f# from f
We will now show how to produce the definition of f# from the definition of f,
using the following example:
fpqr = IF (= p 0) (+ qr) (+ q p)
All we have to do is to take the abstract interpretation of the right-hand side:
f# pq r = Eval#[[ IF (= p 0) (+ q r) (+ q p) ]
Using the rules of the previous section repeatedly gives
f# p q r = IF# (=# p 0#) (+# q r) (+# q p)
We have actually used one extra rule, namely
Eval#[ v I = v
where v is a variable. Now,
constant# = 1
(since the evaluation of constants always terminates) and hence
f# p qr = IF#(=# p 1) (+# q r) (+# q p)
The net effect is that, to obtain f# from f, we simply replace all constants and
built-in functions in the body of f with their abstract (#) versions. To put this
another way, Eval# gives a denotational semantics for the language, which
differs from the standard semantics only in the interpretation of constants and
built-in functions.
Finally, we must decide what the abstract versions of the built-in functions
actually are. Beginning with the equality function =, we know that
(= E1 E2) may terminate if (E+ may terminate)
and (Ezmay terminate)
