136
Chapter 7 List Comprehensions
operations than this, because of the extra CONS operations performed by
APPEND. However, the new scheme is indeed optimal in this sense, as the
reader may verify (informally or by a simple inductive proof).
Although the work here has been presented in an informal style, it is an
excellent example of the power of formal methods. As has been pointed out,
starting from the reduction rules of Section 7.2, one may derive the trans-
lation scheme of Section 7.3 and the improved translation scheme of this
section. None of the transformation steps is particularly difficult. On the other
hand, had formal methods not been used, the development would have been
much more troublesome, and quite possibly the optimal translation scheme
described here would not have been discovered.
7.5 Pattern-matching in Comprehensions
Sections 7.2-7.4 have ignored the fact that in general a pattern rather than a
variable may appear to the left of the <- in a generator. This was done in
order to make the presentation of the material a little simpler. This section
updates the results of the previous sections to allow patterns in generators.
First, we consider the reduction rules that define the semantics of list
comprehensions. Recall that the reduction rules for generators are:
(1)
[E ( v <- [] ; Q]
- []
N
[E | v <- E':L' ; Q] - [E | Q][E'/] ++ [E | v <- L'; Q]
To allow for patterns in generators, these are replaced by:
(1') [E | p <- [] ; Q]
- []
(2') [E | p <- E':L' ; Q] - ( ((\p.[E 1 Q]) E') [ [] )
#+ [Elp <- L'; Q]
The only changes are that the variable v has been replaced by the pattern p,
and that in the second rule the phrase
[E ( Q][E'/]
has been replaced by
((Ap.[E 1 Q]) E') 0 []
Thus, instead of substitution we use a pattern-matching lambda abstraction,
as described in Chapter 4. If the pattern does not match then [ ] is returned; so,
as desired, if an element does not match a pattern it is as if it had been filtered
out of the list.
