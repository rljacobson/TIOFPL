352
Chapter 20 Optimizations to the G-machine
those from the previous section. Notice that partial applications of + (and its
analogs) will be annotated with ! by the strictness analyzer, so this subsumes
the explicit treatment of such partial applications given in the previous
section.
20.6 Avoiding EVALS
EVAL is perhaps the most costly instruction in the G-machine instruction set,
and optimizations that eliminate uses of EVAL are extremely worthwhile. We
will discuss two ways of avoiding EVAL in this section.
20.6.1 Avoiding Re-evaluation in a Function Body
get
Consider compiling an expression such as (+ x x) with the Escheme. We will
E[[ + xxIpd
= PUSH (d - p x); EVAL; PUSH (d + 1 - p x); EVAL; ADD
This is wasteful, because the second EVAL is not necessary -x has already been
evaluated once, so it will now be in WHNF. We would prefer to generate
PUSH (d - p x); EVAL; PUSH (d + 1 - p x); ADD
This can be achieved by keeping track of which variables have been
evaluated, and checking for this when performing the E[[ x ]] case. From a
conceptual point of view this is very simple, but to write it into our com-
pilation schemes rather destroys their simple structure, so we will content
ourselves with a description of how to do it!
It turns out that it is convenient to keep track of which stack locations are
evaluated, rather than which variables are evaluated. As far as this section
goes there is no benefit from this generalization, but we will need it in the next
section. All that is required is to add an extra parameter, o, to each
compilation scheme, which gives context information in a similar manner to p.
o is a function which, given an offset from the base of the current context,
returns a flag indicating whether or not that stack location is evaluated.
Furthermore, each compilation scheme must now return two pieces of
information, the code it generates (as before) and a new o. The new o
returned by a scheme is the same as the o which was passed to it, except that
the flags on some of the stack locations have been set to indicate that they have
been evaluated.
20.6.2 Using Global Strictness Information
Consider the supercombinator definition
