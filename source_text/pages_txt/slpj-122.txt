Section 6.3 Transforming case-expressions
121
{c,d}
{ b}
{f.g.h }
{a)-
Figure 6.5 Example coalesced graph
A possible result of the topological sort in our example is
{c,d}, {b}, {f.g,h}, {a}
This tells us that it is acceptable for the definition of {a} to enclose that of
{f,g,h}, which encloses that of {b}, which encloses that of {c,d). An
alternative result is
{c,d), {f,g,h), {b}, {a}
The fact that more than one result is valid reflects the lack of dependency
between {f,g.h} and {b}.
Non-recursive definitions will be singleton components which do not
point to themselves in the dependency graph; we will produce let-
expressions for these.
(4) Finally we generate a let- or letrec-expression for each definition group in
the topologically sorted order. For our example this would generate the
following expression:
let
in let
a
. .
in letrec
b = ...a. . .
f =...g . . .h . . .a . . .
g
= ...f . ..
in letrec
= ...g . . .
C = ...h ...b. ..d . . .
d = ...C. . .
in
6.3 Transforming case-expressions
The translation scheme of Chapter 5 made use of the case-expression
construct, and we now demonstrate how case-expressions may be
transformed into an expression in the ordinary lambda calculus.
