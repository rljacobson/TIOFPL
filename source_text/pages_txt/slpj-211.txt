Section 12.1 Reducing a lambda application
211
Instantiate( Body, Var, Value )
expression *Body, *Var, * Value;
if (IsAp( Body )) /* Is Body an application node? */
return( MakeAp( Instantiate( GetFun( Body ), Var, Value ),
Instantiate( GetArg( Body ), Var, Value ) );
if (IsVar( Body )) /* Is Body a variable? */
if (Body = Var)
retum( Value );
/* is Body the variable Var? */
else
return( Body );
(IsLam( Body )) /* Is Body a lambda abstraction? */
if (GetVar( Body ) = Var) /* Same formal parameter? */
else
return( Body );
return( MakeLam( GetVar( Body ),
Instantiate( GetBody( Body ), Var, Value )));
/* So Body must be a constant or built-in function */
}
return( Body );
Note: IsAp(B) tests whether B is an application node
GetFun(B) gets the function from an application node
GetArg(B) gets the argument from an application node
MakeAp(F,A) makes a new application node
IsVar(B) tests whether B is a variable node
IsLam(B) tests whether B is a lambda abstraction node
GetVar(B) gets the formal parameter from an abstraction
GetBody(B) gets the body from an abstraction node
MakeLam(V,B) makes a new lambda abstraction node
Figure 12.3 The Instantiate function in C
We saw that normal order evaluation implemented the first ingredient. We
two things:
can now see that the second ingredient is implemented by the combination of
(i) substituting pointers to the argument rather than copying it avoids
duplicating the (unevaluated) argument;
(ii) updating the root of the redex with the result ensures that further uses of
the argument will get the benefit of the work done.
To summarize:
