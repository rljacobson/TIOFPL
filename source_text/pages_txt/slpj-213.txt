Section 12.4 Updating the root and indirection nodes
213
to be recovered by the garbage collector. Now the evaluation of the
arguments of + is complete, and it executes, giving
18 $
12 *%
@
The node $, the root of the original expression, is the result, the other
fragments being garbage. From now on we will no longer draw the garbage
nodes in our pictures.
12.3 The Reduction Algorithm So Far
We now review our reduction algorithm, putting together the material of the
previous two sections.
REPEAT
(1) Unwind the spine until something other than an application
node is encountered.
(2) Examine the objects found at the tip of the spine (see
Section 11.5).
(a) A data object. Check that it is not applied to anything. If
not, the expression is in WHNF so STOP, otherwise
there is an ERROR.
(b) A built-in function. Check the number of arguments
available. If there are too few arguments the expression
is in WHNF so STOP. Otherwise evaluate any
arguments required, execute the built-in function and
overwrite the root of the redex with the result.
(c) A lambda abstraction. Check that there is an argument;
if not the expression is in WHNF so STOP. Otherwise
instantiate the body of the lambda abstraction,
substituting pointers to the argument for the formal
parameter, and overwrite the root of the redex with the
result.
END
12.4 Indirection Nodes
In Section 12.1 we described how to reduce an application of a lambda
abstraction by constructing an instance of the body of the lambda abstraction,
