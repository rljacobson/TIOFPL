270
Chapter 16 SK Combinators
A x [[f ]
Abstracts x from f
A x [ f1 f2 1
= Opt[ S (A x [[ f1 D (A x [[ f2 D I
[ x ] x V
=
A x [[ cv ]
= K cv
Opti[ e ] Optimizes e
Opt [[ S (K p) (K q) I
Opt[ S (K p) 1 1
= K (p q)
=
P
Opt[[ S (K p) q 1
Opt[ S p (K q) ]
= Bpq
Opt[[ S p q ]
= Cpq
= Spq
Figure 16.4 Modifications to SK compilation algorithm to include B and C
We can formalize the optimizations in the [[ ]] notation by introducing a new
function Opt, which optimizes a combinator expression. Figure 16.4 shows the
definition of Opt and a modified version of A which uses it.
Let us apply the new algorithm to the example in Section 16.1.2. We omit
some of the steps, which are rather laborious.
CI (\x. + x x) 5 1
Ax [[+ xx ]]5
OptHI S (A x [ + x ) 115
=
Opt[ S Opt[[ S (K +) | 1 1 15
Opt[[ S + 1 15
S + 15
We can now evaluate the expression thus
S + 15
+ 5 (1 5)
10
The compiled expression is much smaller, and the reduction sequence much
shorter, than before.
16.2.4 The S' Combinator
There remains one major opportunity for improving the code produced by the
compilation algorithm. It occurs when abstracting many variables from an
expression. Suppose we were compiling
AXn. . . AX2. AX1 - P q
where p and q are complicated expressions, which both use x1, X2, . . ., Xn- We
define
'p = AxI [[pI
2p = A x2 [ 'p ]
and so on.
