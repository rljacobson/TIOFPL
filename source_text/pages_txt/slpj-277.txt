Section 16.3 Director strings
277
16.3.2 Minor Refinements
Consider the lambda abstraction
Ax. Ay . + y 1
This does not use x at all, so we need a director which says 'the argument is not
needed in either branch'. We call this director j. It can only occur at the root of
a lambda abstraction, because in the rest of the expression the arguments are
annotated tree
only sent where they are needed. Thus the lambda abstraction would have the
Corresponding to the director are the J and J' combinators
Jf gx
J' kfgx -> kfg
such as
Another awkward problem is what to do when given a lambda abstraction
Ax. Ay . 3
Here the body is not even an application, so we cannot annotate it. In this case
we use the old K combinator for the Ay abstraction, transforming it to
AX . K 3
Now the body is an application, so the annotation for x can go as before.
16.3.3 Director Strings as Combinators
We now turn our attention to the implementation of director strings.
So far we have two representations for programs, namely SK combinator
expressions, and syntax trees annotated with directors. To each director there
corresponds exactly one combinator in the combinator representation, each
of which takes a whole node. Since there are only four directors (j, s, b and
c), we could encode each director in two bits. Encoding a string of directors as
a bit-string would give a dramatic decrease in program size over the
combinator .representation, since we would need only two bits instead of a
whole node to store each combinator. This would make the program execute
faster, too, since there would be less of it to fetch from store.
