Section 5.4 Optimizations
95
The pattern-matching compiler transforms this into:
unwieldy = Axs. Ays. case xs of
NIL
case ys of
NIL
CONS x' xs' =>
CONS y' ys'
A
B xs ys
B xs ys
Here the expression (B xs ys) appears twice. If (B xs ys) were replaced by
a very large expression, the increase in size caused by the compilation process
could be very significant.
The problem can be avoided by modifying the rules given in Section 5.2 so
that right-hand sides are never duplicated during the compilation process. In
fact, only one rule can cause right-hand sides to be duplicated, the constructor
rule. This rule is modified as follows.
Recall that the constructor rule transforms a call of match of the form:
match (u:us) (qs1 ++ ... ++ qsk) E
to a case-expression of the form:
case u of
c1 us1' => match (us,' ++ us) qs1' E
Ck USk' = match (usk' ++ us) qsk' E
where qs1, . .., qsk and qs1', ..., qsk' are as described in Section 5.2.3.
Normally E will be ERROR, but if the mixture rule is used then E may itself
be a match expression containing right-hand sides; it is in this case that
duplication may occur. The modified rule prevents this by using I and FAIL to
avoid duplicating E.
expression:
This is done by replacing the case-expression above with the equivalent
(case u of
C1 us;' = match (us.' ++ us) qs,' FAIL
. .
IE
Ck USk' = match (USk' ++ us) qsk' FAIL)
If we call the old case-expression C, then the new expression is (C' | E),
where C' is formed by replacing each E in C by FAIL. It is clear that the new
expression is equivalent to the old expression and, as desired, E is not
duplicated by the new rule.
For example, using the new rule, the definition of unwieldy will now
