Section 6.2 Transforming let and letrec
109
replacements should not be performed until after type-checking. For the
same reason, none of these replacements is possible for a system that
performs run-time type-checking (see Section 10.5).
6.1.5 Summary
Figure 6.1 summarizes the transformations developed in this section, and
Figure 6.2 gives the semantics for the two new families of functions we
introduced in order to perform the transformations.
(AK. E)
(Av . IF (= k v) E FAIL)
where vis a new variable that does not occur free
in E
(A(t p1 . .. Pn).E)
(UNPACK-PRODUCT-t (Ap1 . . .Apn . E))
(A(s p1 . . . Prs) . E) = (UNPACK-SUM-s (Api. . .APrs . E))
where k is a constant
t is a product constructor of arity rt
s is a sum constructor of arity rs
Figure 6.1 Transforming out pattern-matching lambda abstractions
UNPACK-PRODUCT-t f a = f (SEL-t-1 a) . . . (SEL-t-rt a)
UNPACK-SUM-s f (s a1 . . . ars) = f at . . . ars
UNPACK-SUM-s f (s' a1 . . . arg') = FAIL
UNPACK-SUM-s f 1
if s # s'
= 1
where t is a product constructor of arity r
s is a product constructor of arity r's
Figure 6.2 Semantics of UNPACK-PRODUCT and UNPACK-SUM
6.2 Transforming let and letrec
In Section 4.2.9 we introduced a new complication to let(rec)-expressions, by
allowing the left-hand side of definitions to be an arbitrary pattern rather than
a simple variable. In this section we show how to transform these generalized
lets and letrecs into successively simpler forms, arriving eventually at the
ordinary lambda calculus.
Rather than defining the semantics of let and letrec directly, as we did for
pattern-matching lambda abstractions, we will regard the transformations
described in this section as a definition of their semantics. To define their
meaning in a more direct way would require more mathematical machinery
than we have available in this book.
