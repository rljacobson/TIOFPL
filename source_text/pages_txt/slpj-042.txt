Section 3.2 The enriched lambda calculus
41
where the v is a variable, and B and E are expressions in the (enriched) lambda
notation.
It introduces a definition for a variable v, which binds v to B in E. The
definition is in scope with E but not B. We say that the 'v = B' is the
definition of the let, the v is the variable bound by the let, and the B is the
definition body.
For example, consider the following let-expression:
let x = 3 in (* x x)
Intuitively, the value of this expression is found by substituting 3 for x in the
body (* x x), and then evaluating the body, giving the result 9:
let x = 3 in (* x x)
*3 3
9
A let-expression is an expression like any other, and can be used in the same
way as any other expression. For example,
+ 1 (let x = 3 in (* x x))
+ 1 (* 3 3)
+ 19
10
For the same reason, let-expressions can be nested:
let x = 3 in (let y = 4 in (* x y))
let y = 4 in (* 3 y)
* 3 4
12
As a matter of convenience, we also allow ourselves to write multiple
definitions in the same let; thus:
let x = 3
y = 4
in * x y
This expression means precisely the same as the previous one. We define a
let-expression with several definitions to mean the same as the nested set of
let-expressions which defines the same variables in the same order, one per
let-expression. (Syntactically, it would have been possible to specify that
multiple definitions are separated with semicolons, but layout will suffice for
our purposes.)
Earlier in this section we developed an informal reduction rule for let-
expressions. This involved substitution and is very reminiscent of the
B-reduction rule, which also uses substitution. For example, to evaluate
(Ax. * x x) 3
we substitute 3 for x in the body (* x x), and then evaluate the body.
