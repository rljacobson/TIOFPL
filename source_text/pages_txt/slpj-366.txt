368
Chapter 21 Optimizing Generalized Tail Calls
this figure, all the graph of the $F-redex has been omitted except the root,
which is always an application node.
At this point there are now a number of cases to consider, depending on the
nature of W. Before we follow the main thread of this section we will treat an
important special case, that of a tail call. This special case will be subsumed by
the subsequent more general treatment, but it is an easier introduction.
21.1 Tail Calls
A tail call is the case when the result of one function is given by a call to
another function with exactly the right number of arguments supplied. In our
example, the call to W is a tail call if W is a supercombinator which takes
exactly three arguments.
Under these circumstances $F's body (W E1 Ez Es) is itself a redex - in fact
it will be the next redex to be reduced. Furthermore, the node that will be
updated by the result of the ensuing W-reduction is the same node that will be
updated by the result of the $F-reduction. On entry to the code for the
supercombinator W the current context will look like Figure 21.2, where the
W-redex).
Root of $F-redex' is the same as in Figure 21.1 (it is now the root of the
One way to move from Figure 21.1 to Figure 21.2 would be to complete
construction of the graph of (W E1 Ez Es) in the heap, update the root of the
redex with the result, pop the parameters of $F and execute UNWIND. This
would unwind the spine onto the stack, find W at the tip, rearrange the stack to
look like Figure 21.2 and finally enter the code for W. This is just what the
compilation algorithm we have developed in Chapters 18-20 will do, but it is
plain that this is a very stupid way to proceed.
Root of $F-redex
2nd arg of $F (y)
Ist arg of $F (x)
E3
E2
E1
W
Figure 21.1 Current context of $F after ribs have been built
