200
Chapter 11 Selecting the Next Redex
This is based on the insight that the body of the lambda expression will
subsequently be evaluated anyhow, so we do not risk non-termination by
evaluating it before applying it. Thus Barendregt et al. show that innermost
spine reduction never takes more reductions than normal order, and some-
times takes fewer. As mentioned above, the serious problem with innermost
spine reduction is that it entails performing reduction in the presence of free
variables. From an implementation point of view (only), this objection is so
forthwith.
serious (see Section 11.3.2) that we abandon innermost spine reduction
This view is not universally held; see, for example, Watson et al. [1986].
11.4 Evaluating Arguments of Built-in Functions
Some built-in functions, such as + and HEAD, need to evaluate their
arguments before they can execute. For example, consider
+ (- 4 3) 5
The inner redex (- 4 3) must be evaluated before the + can proceed. We say
that + is strict in both arguments (see Section 2.5.4).
When the evaluator finds that the top-level redex is an application of a
built-in function which evaluates its argument(s), it has to check whether the
appropriate argument(s) are already in WHNF. If they are not, it must
recursively invoke itself to reduce them to WHNF before proceeding with the
application of the function. For example, in the expression
IF (NOT TRUE) f g h
we will select the redex (IF (NOT TRUE) f g) for reduction. Now, the function
IF must evaluate its first argument (only), and that argument is not yet in
WHNF. So the evaluator recursively invokes itself on the (NOT TRUE)
expression, which returns FALSE, at which point the IF can proceed.
As another example, consider
HEAD (CONS 2 NIL)
The outer level redex is the application of HEAD, and HEAD must evaluate its
argument to WHNF (that is, until it is a CONS cell). So the evaluator invokes
itself recursively to evaluate
CONS 2 NIL
This evaluation produces a CONS cell in one reduction, from which HEAD
extracts the result, 2.
To summarize, the evaluator has to invoke itself recursively to evaluate the
arguments of strict built-in functions.
