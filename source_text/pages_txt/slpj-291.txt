Eighteen
THE G-MACHINE
The heart of any graph reducer is the implementation of function application.
In Chapter 12 we saw that a lambda abstraction can be applied to an argument
by constructing an instance of the body of the abstraction with substitutions
made for occurrences of the formal parameter. Unfortunately, this involved
an inefficient traversal of the tree representing the body of the abstraction,
and the presence of free variables seemed to make a more efficient imple-
mentation rather difficult.
With this in mind, we developed the supercombinator transformation in
Chapter 13, which yielded particularly simple lambda abstractions (the
supercombinators), which had no free variables. This simplified the process of
instantiating the body of such an abstraction, but at the (minor) price of
having to substitute for several variables at once. However, the principal
incentive for developing the supercombinator transformation was the hope of
compiling the body of a supercombinator to a fixed sequence of instructions
which, when executed, would construct an instance of its body.
The payoff comes in this chapter, in which we will examine the G-machine,
an extremely fast implementation of graph reduction based on super-
combinator compilation. The G-machine was developed at the Chalmers
Institute of Technology, Goteborg, Sweden, by Johnsson and Augustsson.
This chapter and the subsequent three chapters draw heavily on the G-
machine papers [Johnsson, 1984; Augustsson, 1984]. Many of the ideas in
literature.
these chapters are theirs, and not all of them have appeared in the published
The development of the G-machine is presented informally, but it would be
an interesting exercise to give a formal proof of its correctness [Lester, 1985].
202
