Section 22.2 Using abstract interpretation to do strictness analysis
385
This equation says that, if Eval# errs from the 'right answer'
(abs Eval[[ E I), then it must always err on the high side. If the right answer
is 1, then Eval# must produce the result 1, since the only alternative is 0,
which is unsafe (this is property (i)). If the right answer is 0, then Eval# can
produce 0 or 1 but we hope that it will produce 0 most of the time, because
that is more informative (this is property (ii)).
To put it another way, it must not be possible to use the short-cut abstract
interpretation to conclude that a function is strict, when in reality it is not.
Hence, the abstract interpretation must only produce the result 0 when the
standard interpretation is guaranteed to produce L.
It follows that there is a range of possible abstract interpretations, all of
which are safe, but which vary in their informativeness. In the rest of this
section we will use informal arguments to develop a reasonably informative
abstract interpretation Eval#.
property:
For a start, the safety condition means that Eval# should have the following
Eval#[[ E ]] = 0
only if the (ordinary) evaluation of E definitely fails to terminate.
Conversely,
Eval# [[ E ] = 1
if the (ordinary) evaluation of E may terminate.
Next, we recall, from the rule of signs example, that
Eval% [[ 34*(-5)*(-3993) ]] = PLUS *% MINUS *% MINUS
Eval%:
Generalizing from this example, we might suggest the following rules for
Eval% [[ E1 E2 ] = Eval%[[ E1 ] Eval% [[ E2 1
Eval% [ * I
Eval% [ -n ]
Eval% [[ n I
= MINUS
= PLUS
where E1 and Ez are expressions, *% is the abstract version of multiplication,
and n is a number. The first two of these rules are quite general, while the last
two are clearly specific to the rule of signs.
In the case of strictness analysis, we want to evaluate
Eval #[[ f _ D
follows:
Using a similar rule to the first of those given for Eval%, we might proceed as
Eval# [ f _ ]] = Eval#[[ f ]] Eval#[ 1 0
