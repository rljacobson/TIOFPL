Section 23.4 Transient store usage
403
The same problems apply to this fix as to the others we have discussed. It is
far from obvious when it is good to apply it, it is an extra onus on the
programmer, and it contributes nothing to the meaning of the program.
It would be better if we could perform some kind of automatic analysis
which would discover which components of the data structure will eventually
be needed, and hence which could be evaluated straight away. This is just
strictness analysis in another guise, except that it is a version of strictness
analysis which can 'look inside lists'. It is very much a research issue at the
moment. Furthermore, in the case of a dictionary, the parts of the tree that
are visited are data-dependent, so even a clever strictness analyzer would not
help.
23.3.3 Summary
This section has shown two contrasting ways in which a functional program
may use more store than expected:
(i) By performing reductions and holding on to the result, which is bigger
than the redex.
(ii) By not performing reduction but holding on to the unevaluated graph,
which is bigger than the result.
Notice that one problem is caused by reducing too much and the other is
caused by reducing too little.
23.4 Transient Store Usage
Some functions have a small amount of input data and a small amount of
result data, but nevertheless consume a large amount of store while they
compute their results. The residency of a program at a particular moment is
the size of the graph at that moment, and this section is concerned with
programs which have high transient residency.
Some functions allocate and discard transient store quite rapidly, but if the
function was stopped at any moment there would not be a large amount of
accessible store. Other functions allocate store and do not discard it until the
very end. This behavior is even more undesirable, because just before the
function completes it may be holding a large fraction of the heap. We will look
at some examples of this latter behavior.
23.4.1 Recursion
Consider a function to add up the elements of a list:
sum []
= 0
sum (x:xs) = x + sum xs
