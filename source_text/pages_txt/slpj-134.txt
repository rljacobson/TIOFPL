Section 7.4 Using transformations to improve efficiency
133
7.4 Using Transformations to Improve Efficiency
The translation scheme described in the previous section is complete, but is
not the most efficient translation method possible. This section uses well-
known techniques of program transformation to derive a more efficient
translation scheme.
The translation scheme will be improved in two steps. The first step
improves efficiency using the well-known idea of expanding-out a program in
place. Notice that an expression of the form
flatMap (Av. E) L
may be replaced by the equivalent enriched lambda calculus expression
letrec
h = Aus. case us of
NIL
NIL
CONS v us'
in (h L)
APPEND E (h us')
where h, us and us' are new variable names. It is straightforward to show that
this expansion corresponds to the original definition of flatMap.
TE[ [E I V <- L; Q] ]
letrec
h = Aus. case us of
NIL
NIL
CONS v us'=
in (h TE[ L D
APPEND TEI [E ! Q] ] (h us')
where h, us and us' are new variables which do not occur free in E, Lor Q
Figure 7.2 Improved rule (a) for translation scheme
If we apply this transformation to rule (a) then we get a new, equivalent
rule, shown in Figure 7.2. Combining this rule with rules (b) and (c) gives a
more long-winded, but more efficient, translation scheme. An example of the
use of this scheme is shown in Figure 7.3.
TE[[ [square x 1 x <- xs; odd x] ]
letrec
h = Aus. case us of
NIL
CONS x us'
APPEND
(IF (odd x) (CONS (square x) NIL) NIL)
in (h xs)
(h us')
Figure 7.3 Example of a translation using the improved rule
