Section 17.2 A sketch of the standard techniques
283
Reference-counting relies on keeping an extra field, called the reference-
count, in each cell. The reference-count field holds the number of references
to the cell (i.e. the number of pointers to the cell). This count is incremented
whenever a pointer is duplicated, and decremented whenever a pointer is
discarded. When the reference-count drops to zero the cell must be garbage,
since no other cells point to it.
Against our criteria, the techniques have the following characteristics.
(i) Overheads. A mark-scan collector requires a mark bit in each cell to
indicate that the cell has been visited. In addition it appears at first that
the mark phase will require an auxiliary stack to guide its recursive
tree-walk. Furthermore, the only bound on the size of this stack is the
number of cells in the heap, though this bound would only be attained in
pathological cases. This would be a heavy price to pay, but fortunately
the Deutsch-Schorr-Waite pointer-reversing algorithm [Schorr and
Waite, 1967] reduces the space overheads of the mark phase algorithm to
a single bit per cell (in addition to the mark bit). This algorithm was
explained in a different context in Section 11.6.1.
Copying collectors appear to have a 100% space overhead, but in a
virtual memory system the semi-space that is not in use will be paged out,
so there is very little overhead in fast memory. Even during copying,
activity only takes place at two sites in the target semi-space (to-space),
so only two pages of to-space need to be paged in.
Reference-counting collectors require a reference-count field in every
cell. In principle this field should be as wide as an address, since every cell
in the heap could point to a single cell, but in practice reference-counts
are almost always small. Hybrid systems have therefore been proposed,
which have a limited-width reference-count field. When there are too
many references to a cell and the reference-count field overflows it is set
to a special value meaning 'infinity', which is never decremented (so the
cell is then irrecoverable). Cells irrecoverable by reference-counting are
subsequently recovered by an occasional invocation of a mark-scan or
copying collector.
Reference-counting' collectors are also somewhat less easy to use.
Great care must be taken in the implementation never to duplicate a
reference without incrementing the reference-count, though this is not,
of course, a criticism of the adequacy of the algorithm itself. More
seriously, many extra storage accesses are required to update the
reference-counts.
(ii) Compaction. Compaction can be combined with the scanning phase of a
mark-scan collector. This is usually done using sliding compaction, in
which cells are slid down to one end of the address space, maintaining
their address order. This means that cells which point to each other will
not normally end up physically adjacent.
A copying collector is inherently compacting, since the cells are copied
