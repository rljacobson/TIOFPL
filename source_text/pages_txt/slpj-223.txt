Section 13.2 Solving the problem of free variables
223
13.2.1 Supercombinators
What sort of lambda abstractions are amenable to this sort of multi-argument
reduction? Simply lambda abstractions of the form (Ax1. Ax2. . .AXn. E). This
motivates a new definition:
DEFINITION
A supercombinator, $S, of arity n is a lambda expression of the form
AX1 . Ax2 . . . AXn . E
where E is not a lambda abstraction (this just ensures that all the 'leading
lambdas' are accounted for by x1 . . .Xn) such that
(i) $S has no free variables,
CE
any lambda abstraction in E is a supercombinator,
(iii) n 2 0; that is, there need be no lambdas at all.
A supercombinator redex consists of the application of a supercombinator
to n arguments, where n is its arity. A supercombinator reduction replaces
a supercombinator redex by an instance of the supercombinator body with
the arguments substituted for free occurrences of the corresponding
formal parameter.
For example,
3
(+ 2 5)
AX . X
Ax. + x 1
Ax. + XX
Ax. Ay . - y x
Af.f (\x. + x x)
are all supercombinators, while the following are not:
Ax .y
(y occurs free)
Ay . - y x
(x occurs free)
Af . f (Ax.f x 2)
(inner Ax abstraction is not a supercombinator, since f
occurs free)
13.2.1.1 Supercombinators of non-zero arity
Supercombinators of non-zero arity (that is, having at least one A at the front)
are important because they will be our unit of compilation. Since they have no
free variables (clause (i)) we can compile a fixed code sequence for them.
Furthermore, clause (ii) ensures that any lambda abstractions in the body
have no free variables, and hence do not need to be copied when instantiating
the supercombinator body.
Such a supercombinator is somewhat analogous to a Pascal function which
