Section 18.8 The built-in functions
313
(Note: such a program will never be generated by the lambda-lifter due to
n-optimization, but it serves here as the smallest feasible example program.)
This will compile to the following G-code:
BEGIN;
PUSHGLOBAL $Prog:
Beginning of program
Load $Prog
EVAL; PRINT;
Evaluate and print it
END;
GLOBSTART $F, 1;
PUSH 0;
Beginning of $F (one argument)
Push x
PUSHGLOBAL $NEG;
Push $NEG
MKAP;
Construct ($NEG x)
UPDATE 2;
Update the root of the redex
POP 1;
Pop the parameter
UNWIND;
Continue evaluation
GLOBSTART $Prog, 0; Beginning of $Prog (no arguments)
PUSHINT 3;
Push 3
PUSHGLOBAL $F;
Push $F
MKAP;
Construct ($F 3)
UPDATE 1;
UNWIND;
Update the $Prog
Continue evaluation
We have now described a complete compilation scheme for compiling a
program into G-code. It is far from optimal, as we will soon see, but even in its
present form it should work faster than a template-instantiation
implementation.
The only mysterious feature of the above code is the function $NEG. It is
one of the built-in functions in the run-time system, and we now describe the
G-code for these functions.
18.8 The Built-in Functions
The names of built-in functions will appear in our implementation in three
distinct ways. For example, CONS can appear in the following ways:
(i) As a (built-in) function in the supercombinator program. For example
$S x y = CONS y x
(ii) As a G-code instruction, which takes the top two elements on the stack,
forms a CONS cell from them, and puts a pointer to the result on top of
the stack (see Section 18.2).
