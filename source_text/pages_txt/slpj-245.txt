Section 15.2 Maximal free expressions
245
example compiles to
$g x y = + y (sqrt x)
$f = $g 4
$Prog = + ($f 1) ($f 2)
$Prog
The reduction proceeds as follows:
$Prog
+ (. 1) (( 2)
($g 4)
+
(. 1) (+ 2 (sqrt 4))
($g 4)
+ (- 1) 4
($g 4)
+ (+ 1 (sqrt 4)) 4
+ 34
Again we see that the (sqrt 4) has been evaluated twice.
To be as lazy as possible we would like to share even these dynamically
created constant expressions. Specifically, the effect we want to achieve is that
every expression is evaluated at most once after the variables in it have been
bound. This is called full laziness. It corresponds closely to an optimization
sometimes performed by conventional compilers on loops, in which
expressions not involving the loop variable (i.e. free expressions) are moved
out of the loop so that they are not repeatedly evaluated.
15.2 Maximal Free Expressions
The problem we have discovered is that laziness can be lost if we instantiate
too much of the body of a lambda abstraction.
Which parts should not be instantiated? The parts of the body that should
not be instantiated are those subexpressions which contain no (free)
occurrences of the formal parameter, because if the formal parameter does
not occur then the value of the subexpression will be the same between all
