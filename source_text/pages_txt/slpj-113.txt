112
Chapter 6 Transforming the Enriched Lambda Calculus
Both possibilities are catered for by the transformations shown in Figure 6.3.
In what follows, when considering let-expressions we assume that they
contain only one definition. This gives no loss of generality, since a let-
expression with multiple definitions is trivially equivalent to a nested set of
single-definition let-expressions.
The following sections deal with the transformations depicted in Figure 6.3
6.2.3 Transforming Simple lets into the Ordinary Lambda Calculus
Once we have arrived at an expression in which all let-expressions are simple,
it is easy to remove them altogether, using the transformation given in Section
3.2.1:
let v = B in E = (\v . E) B
For example,
let x = 4 in (+ x 6) = (Ax. + x 6) 4
6.2.4 Transforming Irrefutable lets into Simple lets
Consider the case of an irrefutable let-expression, of the form
let p = B in E
where p is irrefutable. Since the pattern on the left-hand side of the definition
is irrefutable, it must either be a variable or a product pattern. In the former
case there is nothing to do, since the let-expression is already simple. In the
latter case, the let-expression takes the form
let (t p1 . . . Pi) = B in E
where the pi are irrefutable patterns, and B and E are expressions. We can now
make the following transformation:
let (t p1 . . . pr) = B in E = let v = B
in (let p1 = SEL-t-1 v
pr = SEL-t-r v
in E)
where v is a new variable that does not occur free in E.
The pi are bound to selector functions applied to v, which is in turn bound to
B. Repeated application of this transformation will eliminate all non-simple
irrefutable let-expressions.
To take an example, the expression
let (PAIR x y) = B in E
