2
Chapter 1 Introduction
going. A brief introduction to functional programming may be found in
Darlington [1984], while Henderson [1980] and Glaser et al. [1984] give more
substantial treatments. Another useful text is Abelson and Sussman [1985]
which describes Scheme, an almost-functional dialect of Lisp..
An encouraging consensus seems to be emerging in the basic features of
high-level functional programming languages, exemplified by languages such
as SASL [Turner, 1976], ML [Gordon et al., 1979], KRC [Turner, 1982],
Hope [Burstall et al., 1980], Ponder [Fairbairn, 1985], LML [Augustsson,
1984], Miranda [Turner, 1985] and Orwell [Wadler, 1985]. However, for the
sake of definiteness, we use the language Miranda as a concrete example
throughout the book (When used as the name of a programming language,
Miranda' is a trademark of Research Software Limited.) A brief intro-
duction to Miranda may be found in the appendix, but no serious attempt is
made to give a tutorial about functional programming in general, or Miranda
in particular. For those familiar with functional programming, however, no
difficulties should arise.
Generally speaking, all the material of the book should apply to the other
functional languages mentioned, with only syntactic changes. The only
exception to this is that we concern ourselves almost exclusively with the
implementation of languages with non-strict semantics (such as SASL, KRC,
Ponder, LML, Miranda and Orwell). The advantages and disadvantages of
this are discussed in Chapter 11, but it seems that graph reduction is probably
less attractive than the environment-based approach for the implementation
of languages with strict semantics; hence the focus on non-strict languages.
However, some functional languages are strict (ML and Hope, for example),
and while much of the book is still relevant to strict languages, some of the
material would need to be interpreted with care.
The emphasis throughout is on an informal approach, aimed at developing
understanding rather than at formal rigor. It would be an interesting task to
rewrite the book in a formal way, giving watertight proofs of correctness at
each stage.
1.2 Part 1: Compiling High-level Functional Languages
It has been widely observed that most functional languages are quite similar to
each other, and differ more in their syntax than their semantics. In order to
simplify our thinking about implementations, the first part of this book shows
how to translate a high-level functional program into an intermediate language
which has a very simple syntax and semantics. Then, in the second and third
parts of the book, we will show how to implement this intermediate language
using graph reduction. Proceeding in this way allows us to describe graph
reduction in considerable detail, but in a way that is not specific to any
particular high-level language.
The intermediate language into which we will translate the high-level
