Section 18.1 Using an intermediate code
295
Source program
Compile to lambda expressions
Lambda calculus plus let and letrec
Lambda-lifting
Set of supercombinator definitions
Compilation to G-code
Chapters 18, 20, 21
G-code program
Chapters 18, 19
Code generation
Chapter 19
Target machine code
Figure 18.1 Structure of the G-machine compiler
(iii) a description of the code generator.
We will discuss the first of these parts in this chapter and the latter two in the
next chapter. First, however, we will mention some related work.
18.1.2 Other Fast Sequential Implementations of Lazy Languages
The implementation of Ponder [Fairbairn, 1982], developed by Fairbairn and
Wray, is based on a similar approach to the G-machine. The Ponder Abstract
Machine (PAM) is at least as sophisticated as the G-machine, though they
were developed independently, and is described in Fairbairn's thesis
[Fairbairn, 1985; Fairbairn and Wray, 1986]. An interesting development of
this work is a cross-compiler which compiles Ponder abstract machine
instructions into SKIM microcode [Elworthy, 1985].
A related approach, though one which diverges from graph reduction, is to
use a lexically scoped dialect of Lisp, such as Scheme [Steele and Sussman,
1978] or T [Rees and Adams, 1982], as an intermediate code. This takes
advantage of the immense amount of effort which has been spent on building
Kranz, 1984].
fast Lisp implementations, and is the approach taken by Hudak [Hudak and
