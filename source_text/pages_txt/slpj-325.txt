Section 19.3 Target code generation
327
19.3.1 Generating Target Code from G-code Instructions
In this section we will show how to perform simple code generation from
G-code into VAX assembler code.
To each G-code instruction there should correspond a short sequence of
VAX machine instructions. For example, using the representations described
in Section 19.2 for the VAX, we could generate code for the PUSH instruction
like this:
PUSH n
movl 4*n(%EP),-(%EP)
The source is 4*n(%EP), and uses indexed addressing to fetch the word 4*n
bytes from the top of the stack, which is pointed to by register EP. We must
multiply n by 4 to get a byte offset (rather than a word offset). The destination
is the top of the stack, and we pre-decrement the stack pointer to push the new
word onto the stack.
As a longer illustration, we will generate code for the function
g f = NEG (f 5)
With our present compilation algorithm this compiles to
PUSHINT 5; PUSH 1; MKAP; PUSHGLOBAL $NEG; MKAP;
UPDATE 2; POP 1; UNWIND
A simple code generation would go like this:
G-code
HP VAX assembler code
Comments
PUSHINT 5
PUSH 1
0 moval [5,-(%EP)
MKAP
movi 4(%EP),-(%EP)
Push 5
4 moval APPLY,(%HP)+
Push f
8 movl (%EP)+,(%HP)+
Tag of apply node to heap
12 movl (%EP)+,(%HP)+
Function of apply node (f)
PUSHGLOBAL $NEG
moval -12(%HP), -(%EP)
Argument of apply node (5)
moval C_NEG,-(%EP)
Result on stack (f 5)
MKAP
16 moval APPLY,(%HP)+
Push NEG
20 movl (%EP)+,(%HP)+
Tag of apply node to heap
24 movl (%EP)+,(%HP)+
Function of apply ($NEG)
Argument of apply (f 5)
UPDATE 2
moval -12(%HP),-(%EP)
movi (%EP)+,r1
Result on stack
movi 4(%EP), .2
Result in register r
movl (r1)+,(12)+
Root of redex in 12
movi ((1) +,(12)+
Copy tag
POP 1
movl ( 1)+,((2)+
Copy first field
moval 4(%EP),% EP
Copy second field
APPLY is the tag word for an apply node.
Decrement stack pointer
L5 is the address of a boxed integer 5.
C NEG is the address of the NEG function cell.
We will see later how to implement the UNWIND instruction.
